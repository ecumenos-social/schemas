syntax = "proto3";

package networknode.v1;

option go_package = "github.com/ecumenos-social/schemas/proto/gen/networknode/v1";

import "common/v1/pagination.proto";
import "networknode/v1/channel.proto";
import "networknode/v1/group.proto";
import "networknode/v1/publication.proto";

message ApiGatewayServiceGetGroupsRequest {
  string remote_mac_address = 1;
  string token = 2;
  optional common.v1.Pagination pagination = 3;
  optional string query = 4;
  optional bool membered_only = 5;
}

message ApiGatewayServiceGetGroupsResponse {
  repeated networknode.v1.Group data = 1;
  int64 total = 2;
}

message ApiGatewayServiceGetGroupByIDRequest {
  string remote_mac_address = 1;
  string token = 2;
  int64 id = 3;
}

message ApiGatewayServiceGetGroupByIDResponse {
  networknode.v1.Group data = 1;
}

message ApiGatewayServiceGetGroupPublicationsRequest {
  string remote_mac_address = 1;
  string token = 2;
  optional common.v1.Pagination pagination = 3;
  optional string query = 4;
}

message ApiGatewayServiceGetGroupPublicationsResponse {
  networknode.v1.Publication data = 1;
  int64 total = 2;
}

message ApiGatewayServiceGetChannelsRequest {
  string remote_mac_address = 1;
  string token = 2;
  optional common.v1.Pagination pagination = 3;
  optional string query = 4;
  optional bool membered_only = 5;
}

message ApiGatewayServiceGetChannelsResponse {
  repeated networknode.v1.Channel data = 1;
  int64 total = 2;
}

message ApiGatewayServiceGetChannelByIDRequest {
  string remote_mac_address = 1;
  string token = 2;
  int64 id = 3;
}

message ApiGatewayServiceGetChannelByIDResponse {
  networknode.v1.Channel data = 1;
}

message ApiGatewayServiceGetChannelPublicationsRequest {
  string remote_mac_address = 1;
  string token = 2;
  optional common.v1.Pagination pagination = 3;
  optional string query = 4;
}

message ApiGatewayServiceGetChannelPublicationsResponse {
  networknode.v1.Publication data = 1;
  int64 total = 2;
}

message ApiGatewayServiceGetPublicationByIDRequest {
  string remote_mac_address = 1;
  string token = 2;
  int64 id = 3;
}

message ApiGatewayServiceGetPublicationByIDResponse {
  networknode.v1.Publication data = 1;
  int64 total = 2;
}

message Cursor {
  string created_at = 1;
  int64 id = 2;
}

message ApiGatewayServiceGetFeedRequest {
  string remote_mac_address = 1;
  string token = 2;
  Cursor cursor = 3;
}

message ApiGatewayServiceGetFeedResponse {
  networknode.v1.Publication data = 1;
  Cursor next_cursor = 2;
}

service ApiGatewayService {
  rpc GetGroups(ApiGatewayServiceGetGroupsRequest) returns (ApiGatewayServiceGetGroupsResponse);
  rpc GetGroupByID(ApiGatewayServiceGetGroupByIDRequest) returns (ApiGatewayServiceGetGroupByIDResponse);
  rpc GetGroupPublications(ApiGatewayServiceGetGroupPublicationsRequest) returns (ApiGatewayServiceGetGroupPublicationsResponse);
  rpc GetChannels(ApiGatewayServiceGetChannelsRequest) returns (ApiGatewayServiceGetChannelsResponse);
  rpc GetChannelByID(ApiGatewayServiceGetChannelByIDRequest) returns (ApiGatewayServiceGetChannelByIDResponse);
  rpc GetChannelPublications(ApiGatewayServiceGetChannelPublicationsRequest) returns (ApiGatewayServiceGetChannelPublicationsResponse);
  rpc GetPublicationByID(ApiGatewayServiceGetPublicationByIDRequest) returns (ApiGatewayServiceGetPublicationByIDResponse);
  rpc GetFeed(ApiGatewayServiceGetFeedRequest) returns (ApiGatewayServiceGetFeedResponse);
}
