// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: networknode/v1/core.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CoreService_GetGroups_FullMethodName              = "/networknode.v1.CoreService/GetGroups"
	CoreService_GetGroupByID_FullMethodName           = "/networknode.v1.CoreService/GetGroupByID"
	CoreService_GetGroupPublications_FullMethodName   = "/networknode.v1.CoreService/GetGroupPublications"
	CoreService_GetChannels_FullMethodName            = "/networknode.v1.CoreService/GetChannels"
	CoreService_GetChannelByID_FullMethodName         = "/networknode.v1.CoreService/GetChannelByID"
	CoreService_GetChannelPublications_FullMethodName = "/networknode.v1.CoreService/GetChannelPublications"
	CoreService_GetPublicationByID_FullMethodName     = "/networknode.v1.CoreService/GetPublicationByID"
	CoreService_GetFeed_FullMethodName                = "/networknode.v1.CoreService/GetFeed"
	CoreService_RegisterGroup_FullMethodName          = "/networknode.v1.CoreService/RegisterGroup"
	CoreService_ModifyGroup_FullMethodName            = "/networknode.v1.CoreService/ModifyGroup"
	CoreService_JoinGroup_FullMethodName              = "/networknode.v1.CoreService/JoinGroup"
	CoreService_RequestJoinGroup_FullMethodName       = "/networknode.v1.CoreService/RequestJoinGroup"
	CoreService_RegisterChannel_FullMethodName        = "/networknode.v1.CoreService/RegisterChannel"
	CoreService_ModifyChannel_FullMethodName          = "/networknode.v1.CoreService/ModifyChannel"
	CoreService_FollowChannel_FullMethodName          = "/networknode.v1.CoreService/FollowChannel"
	CoreService_RequestFollowChannel_FullMethodName   = "/networknode.v1.CoreService/RequestFollowChannel"
	CoreService_InviteToChannel_FullMethodName        = "/networknode.v1.CoreService/InviteToChannel"
	CoreService_ReactOnPublication_FullMethodName     = "/networknode.v1.CoreService/ReactOnPublication"
)

// CoreServiceClient is the client API for CoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreServiceClient interface {
	GetGroups(ctx context.Context, in *CoreServiceGetGroupsRequest, opts ...grpc.CallOption) (*CoreServiceGetGroupsResponse, error)
	GetGroupByID(ctx context.Context, in *CoreServiceGetGroupByIDRequest, opts ...grpc.CallOption) (*CoreServiceGetGroupByIDResponse, error)
	GetGroupPublications(ctx context.Context, in *CoreServiceGetGroupPublicationsRequest, opts ...grpc.CallOption) (*CoreServiceGetGroupPublicationsResponse, error)
	GetChannels(ctx context.Context, in *CoreServiceGetChannelsRequest, opts ...grpc.CallOption) (*CoreServiceGetChannelsResponse, error)
	GetChannelByID(ctx context.Context, in *CoreServiceGetChannelByIDRequest, opts ...grpc.CallOption) (*CoreServiceGetChannelByIDResponse, error)
	GetChannelPublications(ctx context.Context, in *CoreServiceGetChannelPublicationsRequest, opts ...grpc.CallOption) (*CoreServiceGetChannelPublicationsResponse, error)
	GetPublicationByID(ctx context.Context, in *CoreServiceGetPublicationByIDRequest, opts ...grpc.CallOption) (*CoreServiceGetPublicationByIDResponse, error)
	GetFeed(ctx context.Context, in *CoreServiceGetFeedRequest, opts ...grpc.CallOption) (*CoreServiceGetFeedResponse, error)
	RegisterGroup(ctx context.Context, in *CoreServiceRegisterGroupRequest, opts ...grpc.CallOption) (*CoreServiceRegisterGroupResponse, error)
	ModifyGroup(ctx context.Context, in *CoreServiceModifyGroupRequest, opts ...grpc.CallOption) (*CoreServiceModifyGroupResponse, error)
	JoinGroup(ctx context.Context, in *CoreServiceJoinGroupRequest, opts ...grpc.CallOption) (*CoreServiceJoinGroupResponse, error)
	RequestJoinGroup(ctx context.Context, in *CoreServiceRequestJoinGroupRequest, opts ...grpc.CallOption) (*CoreServiceRequestJoinGroupResponse, error)
	RegisterChannel(ctx context.Context, in *CoreServiceRegisterChannelRequest, opts ...grpc.CallOption) (*CoreServiceRegisterChannelResponse, error)
	ModifyChannel(ctx context.Context, in *CoreServiceModifyChannelRequest, opts ...grpc.CallOption) (*CoreServiceModifyChannelResponse, error)
	FollowChannel(ctx context.Context, in *CoreServiceFollowChannelRequest, opts ...grpc.CallOption) (*CoreServiceFollowChannelResponse, error)
	RequestFollowChannel(ctx context.Context, in *CoreServiceRequestFollowChannelRequest, opts ...grpc.CallOption) (*CoreServiceRequestFollowChannelResponse, error)
	InviteToChannel(ctx context.Context, in *CoreServiceInviteToChannelRequest, opts ...grpc.CallOption) (*CoreServiceInviteToChannelResponse, error)
	ReactOnPublication(ctx context.Context, in *CoreServiceReactOnPublicationRequest, opts ...grpc.CallOption) (*CoreServiceReactOnPublicationResponse, error)
}

type coreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreServiceClient(cc grpc.ClientConnInterface) CoreServiceClient {
	return &coreServiceClient{cc}
}

func (c *coreServiceClient) GetGroups(ctx context.Context, in *CoreServiceGetGroupsRequest, opts ...grpc.CallOption) (*CoreServiceGetGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CoreServiceGetGroupsResponse)
	err := c.cc.Invoke(ctx, CoreService_GetGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) GetGroupByID(ctx context.Context, in *CoreServiceGetGroupByIDRequest, opts ...grpc.CallOption) (*CoreServiceGetGroupByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CoreServiceGetGroupByIDResponse)
	err := c.cc.Invoke(ctx, CoreService_GetGroupByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) GetGroupPublications(ctx context.Context, in *CoreServiceGetGroupPublicationsRequest, opts ...grpc.CallOption) (*CoreServiceGetGroupPublicationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CoreServiceGetGroupPublicationsResponse)
	err := c.cc.Invoke(ctx, CoreService_GetGroupPublications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) GetChannels(ctx context.Context, in *CoreServiceGetChannelsRequest, opts ...grpc.CallOption) (*CoreServiceGetChannelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CoreServiceGetChannelsResponse)
	err := c.cc.Invoke(ctx, CoreService_GetChannels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) GetChannelByID(ctx context.Context, in *CoreServiceGetChannelByIDRequest, opts ...grpc.CallOption) (*CoreServiceGetChannelByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CoreServiceGetChannelByIDResponse)
	err := c.cc.Invoke(ctx, CoreService_GetChannelByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) GetChannelPublications(ctx context.Context, in *CoreServiceGetChannelPublicationsRequest, opts ...grpc.CallOption) (*CoreServiceGetChannelPublicationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CoreServiceGetChannelPublicationsResponse)
	err := c.cc.Invoke(ctx, CoreService_GetChannelPublications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) GetPublicationByID(ctx context.Context, in *CoreServiceGetPublicationByIDRequest, opts ...grpc.CallOption) (*CoreServiceGetPublicationByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CoreServiceGetPublicationByIDResponse)
	err := c.cc.Invoke(ctx, CoreService_GetPublicationByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) GetFeed(ctx context.Context, in *CoreServiceGetFeedRequest, opts ...grpc.CallOption) (*CoreServiceGetFeedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CoreServiceGetFeedResponse)
	err := c.cc.Invoke(ctx, CoreService_GetFeed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) RegisterGroup(ctx context.Context, in *CoreServiceRegisterGroupRequest, opts ...grpc.CallOption) (*CoreServiceRegisterGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CoreServiceRegisterGroupResponse)
	err := c.cc.Invoke(ctx, CoreService_RegisterGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) ModifyGroup(ctx context.Context, in *CoreServiceModifyGroupRequest, opts ...grpc.CallOption) (*CoreServiceModifyGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CoreServiceModifyGroupResponse)
	err := c.cc.Invoke(ctx, CoreService_ModifyGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) JoinGroup(ctx context.Context, in *CoreServiceJoinGroupRequest, opts ...grpc.CallOption) (*CoreServiceJoinGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CoreServiceJoinGroupResponse)
	err := c.cc.Invoke(ctx, CoreService_JoinGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) RequestJoinGroup(ctx context.Context, in *CoreServiceRequestJoinGroupRequest, opts ...grpc.CallOption) (*CoreServiceRequestJoinGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CoreServiceRequestJoinGroupResponse)
	err := c.cc.Invoke(ctx, CoreService_RequestJoinGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) RegisterChannel(ctx context.Context, in *CoreServiceRegisterChannelRequest, opts ...grpc.CallOption) (*CoreServiceRegisterChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CoreServiceRegisterChannelResponse)
	err := c.cc.Invoke(ctx, CoreService_RegisterChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) ModifyChannel(ctx context.Context, in *CoreServiceModifyChannelRequest, opts ...grpc.CallOption) (*CoreServiceModifyChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CoreServiceModifyChannelResponse)
	err := c.cc.Invoke(ctx, CoreService_ModifyChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) FollowChannel(ctx context.Context, in *CoreServiceFollowChannelRequest, opts ...grpc.CallOption) (*CoreServiceFollowChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CoreServiceFollowChannelResponse)
	err := c.cc.Invoke(ctx, CoreService_FollowChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) RequestFollowChannel(ctx context.Context, in *CoreServiceRequestFollowChannelRequest, opts ...grpc.CallOption) (*CoreServiceRequestFollowChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CoreServiceRequestFollowChannelResponse)
	err := c.cc.Invoke(ctx, CoreService_RequestFollowChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) InviteToChannel(ctx context.Context, in *CoreServiceInviteToChannelRequest, opts ...grpc.CallOption) (*CoreServiceInviteToChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CoreServiceInviteToChannelResponse)
	err := c.cc.Invoke(ctx, CoreService_InviteToChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) ReactOnPublication(ctx context.Context, in *CoreServiceReactOnPublicationRequest, opts ...grpc.CallOption) (*CoreServiceReactOnPublicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CoreServiceReactOnPublicationResponse)
	err := c.cc.Invoke(ctx, CoreService_ReactOnPublication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreServiceServer is the server API for CoreService service.
// All implementations must embed UnimplementedCoreServiceServer
// for forward compatibility.
type CoreServiceServer interface {
	GetGroups(context.Context, *CoreServiceGetGroupsRequest) (*CoreServiceGetGroupsResponse, error)
	GetGroupByID(context.Context, *CoreServiceGetGroupByIDRequest) (*CoreServiceGetGroupByIDResponse, error)
	GetGroupPublications(context.Context, *CoreServiceGetGroupPublicationsRequest) (*CoreServiceGetGroupPublicationsResponse, error)
	GetChannels(context.Context, *CoreServiceGetChannelsRequest) (*CoreServiceGetChannelsResponse, error)
	GetChannelByID(context.Context, *CoreServiceGetChannelByIDRequest) (*CoreServiceGetChannelByIDResponse, error)
	GetChannelPublications(context.Context, *CoreServiceGetChannelPublicationsRequest) (*CoreServiceGetChannelPublicationsResponse, error)
	GetPublicationByID(context.Context, *CoreServiceGetPublicationByIDRequest) (*CoreServiceGetPublicationByIDResponse, error)
	GetFeed(context.Context, *CoreServiceGetFeedRequest) (*CoreServiceGetFeedResponse, error)
	RegisterGroup(context.Context, *CoreServiceRegisterGroupRequest) (*CoreServiceRegisterGroupResponse, error)
	ModifyGroup(context.Context, *CoreServiceModifyGroupRequest) (*CoreServiceModifyGroupResponse, error)
	JoinGroup(context.Context, *CoreServiceJoinGroupRequest) (*CoreServiceJoinGroupResponse, error)
	RequestJoinGroup(context.Context, *CoreServiceRequestJoinGroupRequest) (*CoreServiceRequestJoinGroupResponse, error)
	RegisterChannel(context.Context, *CoreServiceRegisterChannelRequest) (*CoreServiceRegisterChannelResponse, error)
	ModifyChannel(context.Context, *CoreServiceModifyChannelRequest) (*CoreServiceModifyChannelResponse, error)
	FollowChannel(context.Context, *CoreServiceFollowChannelRequest) (*CoreServiceFollowChannelResponse, error)
	RequestFollowChannel(context.Context, *CoreServiceRequestFollowChannelRequest) (*CoreServiceRequestFollowChannelResponse, error)
	InviteToChannel(context.Context, *CoreServiceInviteToChannelRequest) (*CoreServiceInviteToChannelResponse, error)
	ReactOnPublication(context.Context, *CoreServiceReactOnPublicationRequest) (*CoreServiceReactOnPublicationResponse, error)
	mustEmbedUnimplementedCoreServiceServer()
}

// UnimplementedCoreServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCoreServiceServer struct{}

func (UnimplementedCoreServiceServer) GetGroups(context.Context, *CoreServiceGetGroupsRequest) (*CoreServiceGetGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroups not implemented")
}
func (UnimplementedCoreServiceServer) GetGroupByID(context.Context, *CoreServiceGetGroupByIDRequest) (*CoreServiceGetGroupByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupByID not implemented")
}
func (UnimplementedCoreServiceServer) GetGroupPublications(context.Context, *CoreServiceGetGroupPublicationsRequest) (*CoreServiceGetGroupPublicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupPublications not implemented")
}
func (UnimplementedCoreServiceServer) GetChannels(context.Context, *CoreServiceGetChannelsRequest) (*CoreServiceGetChannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannels not implemented")
}
func (UnimplementedCoreServiceServer) GetChannelByID(context.Context, *CoreServiceGetChannelByIDRequest) (*CoreServiceGetChannelByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelByID not implemented")
}
func (UnimplementedCoreServiceServer) GetChannelPublications(context.Context, *CoreServiceGetChannelPublicationsRequest) (*CoreServiceGetChannelPublicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelPublications not implemented")
}
func (UnimplementedCoreServiceServer) GetPublicationByID(context.Context, *CoreServiceGetPublicationByIDRequest) (*CoreServiceGetPublicationByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicationByID not implemented")
}
func (UnimplementedCoreServiceServer) GetFeed(context.Context, *CoreServiceGetFeedRequest) (*CoreServiceGetFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeed not implemented")
}
func (UnimplementedCoreServiceServer) RegisterGroup(context.Context, *CoreServiceRegisterGroupRequest) (*CoreServiceRegisterGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterGroup not implemented")
}
func (UnimplementedCoreServiceServer) ModifyGroup(context.Context, *CoreServiceModifyGroupRequest) (*CoreServiceModifyGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyGroup not implemented")
}
func (UnimplementedCoreServiceServer) JoinGroup(context.Context, *CoreServiceJoinGroupRequest) (*CoreServiceJoinGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGroup not implemented")
}
func (UnimplementedCoreServiceServer) RequestJoinGroup(context.Context, *CoreServiceRequestJoinGroupRequest) (*CoreServiceRequestJoinGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestJoinGroup not implemented")
}
func (UnimplementedCoreServiceServer) RegisterChannel(context.Context, *CoreServiceRegisterChannelRequest) (*CoreServiceRegisterChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterChannel not implemented")
}
func (UnimplementedCoreServiceServer) ModifyChannel(context.Context, *CoreServiceModifyChannelRequest) (*CoreServiceModifyChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyChannel not implemented")
}
func (UnimplementedCoreServiceServer) FollowChannel(context.Context, *CoreServiceFollowChannelRequest) (*CoreServiceFollowChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowChannel not implemented")
}
func (UnimplementedCoreServiceServer) RequestFollowChannel(context.Context, *CoreServiceRequestFollowChannelRequest) (*CoreServiceRequestFollowChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestFollowChannel not implemented")
}
func (UnimplementedCoreServiceServer) InviteToChannel(context.Context, *CoreServiceInviteToChannelRequest) (*CoreServiceInviteToChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteToChannel not implemented")
}
func (UnimplementedCoreServiceServer) ReactOnPublication(context.Context, *CoreServiceReactOnPublicationRequest) (*CoreServiceReactOnPublicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactOnPublication not implemented")
}
func (UnimplementedCoreServiceServer) mustEmbedUnimplementedCoreServiceServer() {}
func (UnimplementedCoreServiceServer) testEmbeddedByValue()                     {}

// UnsafeCoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreServiceServer will
// result in compilation errors.
type UnsafeCoreServiceServer interface {
	mustEmbedUnimplementedCoreServiceServer()
}

func RegisterCoreServiceServer(s grpc.ServiceRegistrar, srv CoreServiceServer) {
	// If the following call pancis, it indicates UnimplementedCoreServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CoreService_ServiceDesc, srv)
}

func _CoreService_GetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceGetGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_GetGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetGroups(ctx, req.(*CoreServiceGetGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_GetGroupByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceGetGroupByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetGroupByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_GetGroupByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetGroupByID(ctx, req.(*CoreServiceGetGroupByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_GetGroupPublications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceGetGroupPublicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetGroupPublications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_GetGroupPublications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetGroupPublications(ctx, req.(*CoreServiceGetGroupPublicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_GetChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceGetChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_GetChannels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetChannels(ctx, req.(*CoreServiceGetChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_GetChannelByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceGetChannelByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetChannelByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_GetChannelByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetChannelByID(ctx, req.(*CoreServiceGetChannelByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_GetChannelPublications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceGetChannelPublicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetChannelPublications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_GetChannelPublications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetChannelPublications(ctx, req.(*CoreServiceGetChannelPublicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_GetPublicationByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceGetPublicationByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetPublicationByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_GetPublicationByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetPublicationByID(ctx, req.(*CoreServiceGetPublicationByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_GetFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceGetFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_GetFeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetFeed(ctx, req.(*CoreServiceGetFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_RegisterGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceRegisterGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).RegisterGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_RegisterGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).RegisterGroup(ctx, req.(*CoreServiceRegisterGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_ModifyGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceModifyGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).ModifyGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_ModifyGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).ModifyGroup(ctx, req.(*CoreServiceModifyGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_JoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceJoinGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).JoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_JoinGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).JoinGroup(ctx, req.(*CoreServiceJoinGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_RequestJoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceRequestJoinGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).RequestJoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_RequestJoinGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).RequestJoinGroup(ctx, req.(*CoreServiceRequestJoinGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_RegisterChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceRegisterChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).RegisterChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_RegisterChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).RegisterChannel(ctx, req.(*CoreServiceRegisterChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_ModifyChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceModifyChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).ModifyChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_ModifyChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).ModifyChannel(ctx, req.(*CoreServiceModifyChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_FollowChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceFollowChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).FollowChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_FollowChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).FollowChannel(ctx, req.(*CoreServiceFollowChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_RequestFollowChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceRequestFollowChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).RequestFollowChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_RequestFollowChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).RequestFollowChannel(ctx, req.(*CoreServiceRequestFollowChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_InviteToChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceInviteToChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).InviteToChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_InviteToChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).InviteToChannel(ctx, req.(*CoreServiceInviteToChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_ReactOnPublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceReactOnPublicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).ReactOnPublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_ReactOnPublication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).ReactOnPublication(ctx, req.(*CoreServiceReactOnPublicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoreService_ServiceDesc is the grpc.ServiceDesc for CoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "networknode.v1.CoreService",
	HandlerType: (*CoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGroups",
			Handler:    _CoreService_GetGroups_Handler,
		},
		{
			MethodName: "GetGroupByID",
			Handler:    _CoreService_GetGroupByID_Handler,
		},
		{
			MethodName: "GetGroupPublications",
			Handler:    _CoreService_GetGroupPublications_Handler,
		},
		{
			MethodName: "GetChannels",
			Handler:    _CoreService_GetChannels_Handler,
		},
		{
			MethodName: "GetChannelByID",
			Handler:    _CoreService_GetChannelByID_Handler,
		},
		{
			MethodName: "GetChannelPublications",
			Handler:    _CoreService_GetChannelPublications_Handler,
		},
		{
			MethodName: "GetPublicationByID",
			Handler:    _CoreService_GetPublicationByID_Handler,
		},
		{
			MethodName: "GetFeed",
			Handler:    _CoreService_GetFeed_Handler,
		},
		{
			MethodName: "RegisterGroup",
			Handler:    _CoreService_RegisterGroup_Handler,
		},
		{
			MethodName: "ModifyGroup",
			Handler:    _CoreService_ModifyGroup_Handler,
		},
		{
			MethodName: "JoinGroup",
			Handler:    _CoreService_JoinGroup_Handler,
		},
		{
			MethodName: "RequestJoinGroup",
			Handler:    _CoreService_RequestJoinGroup_Handler,
		},
		{
			MethodName: "RegisterChannel",
			Handler:    _CoreService_RegisterChannel_Handler,
		},
		{
			MethodName: "ModifyChannel",
			Handler:    _CoreService_ModifyChannel_Handler,
		},
		{
			MethodName: "FollowChannel",
			Handler:    _CoreService_FollowChannel_Handler,
		},
		{
			MethodName: "RequestFollowChannel",
			Handler:    _CoreService_RequestFollowChannel_Handler,
		},
		{
			MethodName: "InviteToChannel",
			Handler:    _CoreService_InviteToChannel_Handler,
		},
		{
			MethodName: "ReactOnPublication",
			Handler:    _CoreService_ReactOnPublication_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "networknode/v1/core.proto",
}
