// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: networknode/v1/core.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CoreServiceGetGroupsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CoreServiceGetGroupsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoreServiceGetGroupsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CoreServiceGetGroupsRequestMultiError, or nil if none found.
func (m *CoreServiceGetGroupsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreServiceGetGroupsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RemoteMacAddress

	// no validation rules for Token

	if m.Pagination != nil {

		if all {
			switch v := interface{}(m.GetPagination()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CoreServiceGetGroupsRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CoreServiceGetGroupsRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CoreServiceGetGroupsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Query != nil {
		// no validation rules for Query
	}

	if m.MemberedOnly != nil {
		// no validation rules for MemberedOnly
	}

	if len(errors) > 0 {
		return CoreServiceGetGroupsRequestMultiError(errors)
	}

	return nil
}

// CoreServiceGetGroupsRequestMultiError is an error wrapping multiple
// validation errors returned by CoreServiceGetGroupsRequest.ValidateAll() if
// the designated constraints aren't met.
type CoreServiceGetGroupsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreServiceGetGroupsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreServiceGetGroupsRequestMultiError) AllErrors() []error { return m }

// CoreServiceGetGroupsRequestValidationError is the validation error returned
// by CoreServiceGetGroupsRequest.Validate if the designated constraints
// aren't met.
type CoreServiceGetGroupsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreServiceGetGroupsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreServiceGetGroupsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreServiceGetGroupsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreServiceGetGroupsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreServiceGetGroupsRequestValidationError) ErrorName() string {
	return "CoreServiceGetGroupsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CoreServiceGetGroupsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreServiceGetGroupsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreServiceGetGroupsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreServiceGetGroupsRequestValidationError{}

// Validate checks the field values on CoreServiceGetGroupsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CoreServiceGetGroupsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoreServiceGetGroupsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CoreServiceGetGroupsResponseMultiError, or nil if none found.
func (m *CoreServiceGetGroupsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreServiceGetGroupsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CoreServiceGetGroupsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CoreServiceGetGroupsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CoreServiceGetGroupsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return CoreServiceGetGroupsResponseMultiError(errors)
	}

	return nil
}

// CoreServiceGetGroupsResponseMultiError is an error wrapping multiple
// validation errors returned by CoreServiceGetGroupsResponse.ValidateAll() if
// the designated constraints aren't met.
type CoreServiceGetGroupsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreServiceGetGroupsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreServiceGetGroupsResponseMultiError) AllErrors() []error { return m }

// CoreServiceGetGroupsResponseValidationError is the validation error returned
// by CoreServiceGetGroupsResponse.Validate if the designated constraints
// aren't met.
type CoreServiceGetGroupsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreServiceGetGroupsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreServiceGetGroupsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreServiceGetGroupsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreServiceGetGroupsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreServiceGetGroupsResponseValidationError) ErrorName() string {
	return "CoreServiceGetGroupsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CoreServiceGetGroupsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreServiceGetGroupsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreServiceGetGroupsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreServiceGetGroupsResponseValidationError{}

// Validate checks the field values on CoreServiceGetGroupByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CoreServiceGetGroupByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoreServiceGetGroupByIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CoreServiceGetGroupByIDRequestMultiError, or nil if none found.
func (m *CoreServiceGetGroupByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreServiceGetGroupByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RemoteMacAddress

	// no validation rules for Token

	// no validation rules for Id

	if len(errors) > 0 {
		return CoreServiceGetGroupByIDRequestMultiError(errors)
	}

	return nil
}

// CoreServiceGetGroupByIDRequestMultiError is an error wrapping multiple
// validation errors returned by CoreServiceGetGroupByIDRequest.ValidateAll()
// if the designated constraints aren't met.
type CoreServiceGetGroupByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreServiceGetGroupByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreServiceGetGroupByIDRequestMultiError) AllErrors() []error { return m }

// CoreServiceGetGroupByIDRequestValidationError is the validation error
// returned by CoreServiceGetGroupByIDRequest.Validate if the designated
// constraints aren't met.
type CoreServiceGetGroupByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreServiceGetGroupByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreServiceGetGroupByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreServiceGetGroupByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreServiceGetGroupByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreServiceGetGroupByIDRequestValidationError) ErrorName() string {
	return "CoreServiceGetGroupByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CoreServiceGetGroupByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreServiceGetGroupByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreServiceGetGroupByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreServiceGetGroupByIDRequestValidationError{}

// Validate checks the field values on CoreServiceGetGroupByIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CoreServiceGetGroupByIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoreServiceGetGroupByIDResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CoreServiceGetGroupByIDResponseMultiError, or nil if none found.
func (m *CoreServiceGetGroupByIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreServiceGetGroupByIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CoreServiceGetGroupByIDResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CoreServiceGetGroupByIDResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CoreServiceGetGroupByIDResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CoreServiceGetGroupByIDResponseMultiError(errors)
	}

	return nil
}

// CoreServiceGetGroupByIDResponseMultiError is an error wrapping multiple
// validation errors returned by CoreServiceGetGroupByIDResponse.ValidateAll()
// if the designated constraints aren't met.
type CoreServiceGetGroupByIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreServiceGetGroupByIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreServiceGetGroupByIDResponseMultiError) AllErrors() []error { return m }

// CoreServiceGetGroupByIDResponseValidationError is the validation error
// returned by CoreServiceGetGroupByIDResponse.Validate if the designated
// constraints aren't met.
type CoreServiceGetGroupByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreServiceGetGroupByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreServiceGetGroupByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreServiceGetGroupByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreServiceGetGroupByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreServiceGetGroupByIDResponseValidationError) ErrorName() string {
	return "CoreServiceGetGroupByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CoreServiceGetGroupByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreServiceGetGroupByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreServiceGetGroupByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreServiceGetGroupByIDResponseValidationError{}

// Validate checks the field values on CoreServiceGetGroupPublicationsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CoreServiceGetGroupPublicationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CoreServiceGetGroupPublicationsRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CoreServiceGetGroupPublicationsRequestMultiError, or nil if none found.
func (m *CoreServiceGetGroupPublicationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreServiceGetGroupPublicationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RemoteMacAddress

	// no validation rules for Token

	if m.Pagination != nil {

		if all {
			switch v := interface{}(m.GetPagination()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CoreServiceGetGroupPublicationsRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CoreServiceGetGroupPublicationsRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CoreServiceGetGroupPublicationsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Query != nil {
		// no validation rules for Query
	}

	if len(errors) > 0 {
		return CoreServiceGetGroupPublicationsRequestMultiError(errors)
	}

	return nil
}

// CoreServiceGetGroupPublicationsRequestMultiError is an error wrapping
// multiple validation errors returned by
// CoreServiceGetGroupPublicationsRequest.ValidateAll() if the designated
// constraints aren't met.
type CoreServiceGetGroupPublicationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreServiceGetGroupPublicationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreServiceGetGroupPublicationsRequestMultiError) AllErrors() []error { return m }

// CoreServiceGetGroupPublicationsRequestValidationError is the validation
// error returned by CoreServiceGetGroupPublicationsRequest.Validate if the
// designated constraints aren't met.
type CoreServiceGetGroupPublicationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreServiceGetGroupPublicationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreServiceGetGroupPublicationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreServiceGetGroupPublicationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreServiceGetGroupPublicationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreServiceGetGroupPublicationsRequestValidationError) ErrorName() string {
	return "CoreServiceGetGroupPublicationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CoreServiceGetGroupPublicationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreServiceGetGroupPublicationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreServiceGetGroupPublicationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreServiceGetGroupPublicationsRequestValidationError{}

// Validate checks the field values on CoreServiceGetGroupPublicationsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CoreServiceGetGroupPublicationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CoreServiceGetGroupPublicationsResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CoreServiceGetGroupPublicationsResponseMultiError, or nil if none found.
func (m *CoreServiceGetGroupPublicationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreServiceGetGroupPublicationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CoreServiceGetGroupPublicationsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CoreServiceGetGroupPublicationsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CoreServiceGetGroupPublicationsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Total

	if len(errors) > 0 {
		return CoreServiceGetGroupPublicationsResponseMultiError(errors)
	}

	return nil
}

// CoreServiceGetGroupPublicationsResponseMultiError is an error wrapping
// multiple validation errors returned by
// CoreServiceGetGroupPublicationsResponse.ValidateAll() if the designated
// constraints aren't met.
type CoreServiceGetGroupPublicationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreServiceGetGroupPublicationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreServiceGetGroupPublicationsResponseMultiError) AllErrors() []error { return m }

// CoreServiceGetGroupPublicationsResponseValidationError is the validation
// error returned by CoreServiceGetGroupPublicationsResponse.Validate if the
// designated constraints aren't met.
type CoreServiceGetGroupPublicationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreServiceGetGroupPublicationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreServiceGetGroupPublicationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreServiceGetGroupPublicationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreServiceGetGroupPublicationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreServiceGetGroupPublicationsResponseValidationError) ErrorName() string {
	return "CoreServiceGetGroupPublicationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CoreServiceGetGroupPublicationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreServiceGetGroupPublicationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreServiceGetGroupPublicationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreServiceGetGroupPublicationsResponseValidationError{}

// Validate checks the field values on CoreServiceGetChannelsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CoreServiceGetChannelsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoreServiceGetChannelsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CoreServiceGetChannelsRequestMultiError, or nil if none found.
func (m *CoreServiceGetChannelsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreServiceGetChannelsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RemoteMacAddress

	// no validation rules for Token

	if m.Pagination != nil {

		if all {
			switch v := interface{}(m.GetPagination()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CoreServiceGetChannelsRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CoreServiceGetChannelsRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CoreServiceGetChannelsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Query != nil {
		// no validation rules for Query
	}

	if m.MemberedOnly != nil {
		// no validation rules for MemberedOnly
	}

	if len(errors) > 0 {
		return CoreServiceGetChannelsRequestMultiError(errors)
	}

	return nil
}

// CoreServiceGetChannelsRequestMultiError is an error wrapping multiple
// validation errors returned by CoreServiceGetChannelsRequest.ValidateAll()
// if the designated constraints aren't met.
type CoreServiceGetChannelsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreServiceGetChannelsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreServiceGetChannelsRequestMultiError) AllErrors() []error { return m }

// CoreServiceGetChannelsRequestValidationError is the validation error
// returned by CoreServiceGetChannelsRequest.Validate if the designated
// constraints aren't met.
type CoreServiceGetChannelsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreServiceGetChannelsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreServiceGetChannelsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreServiceGetChannelsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreServiceGetChannelsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreServiceGetChannelsRequestValidationError) ErrorName() string {
	return "CoreServiceGetChannelsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CoreServiceGetChannelsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreServiceGetChannelsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreServiceGetChannelsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreServiceGetChannelsRequestValidationError{}

// Validate checks the field values on CoreServiceGetChannelsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CoreServiceGetChannelsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoreServiceGetChannelsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CoreServiceGetChannelsResponseMultiError, or nil if none found.
func (m *CoreServiceGetChannelsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreServiceGetChannelsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CoreServiceGetChannelsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CoreServiceGetChannelsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CoreServiceGetChannelsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return CoreServiceGetChannelsResponseMultiError(errors)
	}

	return nil
}

// CoreServiceGetChannelsResponseMultiError is an error wrapping multiple
// validation errors returned by CoreServiceGetChannelsResponse.ValidateAll()
// if the designated constraints aren't met.
type CoreServiceGetChannelsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreServiceGetChannelsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreServiceGetChannelsResponseMultiError) AllErrors() []error { return m }

// CoreServiceGetChannelsResponseValidationError is the validation error
// returned by CoreServiceGetChannelsResponse.Validate if the designated
// constraints aren't met.
type CoreServiceGetChannelsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreServiceGetChannelsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreServiceGetChannelsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreServiceGetChannelsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreServiceGetChannelsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreServiceGetChannelsResponseValidationError) ErrorName() string {
	return "CoreServiceGetChannelsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CoreServiceGetChannelsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreServiceGetChannelsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreServiceGetChannelsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreServiceGetChannelsResponseValidationError{}

// Validate checks the field values on CoreServiceGetChannelByIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CoreServiceGetChannelByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoreServiceGetChannelByIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CoreServiceGetChannelByIDRequestMultiError, or nil if none found.
func (m *CoreServiceGetChannelByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreServiceGetChannelByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RemoteMacAddress

	// no validation rules for Token

	// no validation rules for Id

	if len(errors) > 0 {
		return CoreServiceGetChannelByIDRequestMultiError(errors)
	}

	return nil
}

// CoreServiceGetChannelByIDRequestMultiError is an error wrapping multiple
// validation errors returned by
// CoreServiceGetChannelByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type CoreServiceGetChannelByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreServiceGetChannelByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreServiceGetChannelByIDRequestMultiError) AllErrors() []error { return m }

// CoreServiceGetChannelByIDRequestValidationError is the validation error
// returned by CoreServiceGetChannelByIDRequest.Validate if the designated
// constraints aren't met.
type CoreServiceGetChannelByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreServiceGetChannelByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreServiceGetChannelByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreServiceGetChannelByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreServiceGetChannelByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreServiceGetChannelByIDRequestValidationError) ErrorName() string {
	return "CoreServiceGetChannelByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CoreServiceGetChannelByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreServiceGetChannelByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreServiceGetChannelByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreServiceGetChannelByIDRequestValidationError{}

// Validate checks the field values on CoreServiceGetChannelByIDResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CoreServiceGetChannelByIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoreServiceGetChannelByIDResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CoreServiceGetChannelByIDResponseMultiError, or nil if none found.
func (m *CoreServiceGetChannelByIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreServiceGetChannelByIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CoreServiceGetChannelByIDResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CoreServiceGetChannelByIDResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CoreServiceGetChannelByIDResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CoreServiceGetChannelByIDResponseMultiError(errors)
	}

	return nil
}

// CoreServiceGetChannelByIDResponseMultiError is an error wrapping multiple
// validation errors returned by
// CoreServiceGetChannelByIDResponse.ValidateAll() if the designated
// constraints aren't met.
type CoreServiceGetChannelByIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreServiceGetChannelByIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreServiceGetChannelByIDResponseMultiError) AllErrors() []error { return m }

// CoreServiceGetChannelByIDResponseValidationError is the validation error
// returned by CoreServiceGetChannelByIDResponse.Validate if the designated
// constraints aren't met.
type CoreServiceGetChannelByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreServiceGetChannelByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreServiceGetChannelByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreServiceGetChannelByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreServiceGetChannelByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreServiceGetChannelByIDResponseValidationError) ErrorName() string {
	return "CoreServiceGetChannelByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CoreServiceGetChannelByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreServiceGetChannelByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreServiceGetChannelByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreServiceGetChannelByIDResponseValidationError{}

// Validate checks the field values on CoreServiceGetChannelPublicationsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CoreServiceGetChannelPublicationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CoreServiceGetChannelPublicationsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CoreServiceGetChannelPublicationsRequestMultiError, or nil if none found.
func (m *CoreServiceGetChannelPublicationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreServiceGetChannelPublicationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RemoteMacAddress

	// no validation rules for Token

	if m.Pagination != nil {

		if all {
			switch v := interface{}(m.GetPagination()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CoreServiceGetChannelPublicationsRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CoreServiceGetChannelPublicationsRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CoreServiceGetChannelPublicationsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Query != nil {
		// no validation rules for Query
	}

	if len(errors) > 0 {
		return CoreServiceGetChannelPublicationsRequestMultiError(errors)
	}

	return nil
}

// CoreServiceGetChannelPublicationsRequestMultiError is an error wrapping
// multiple validation errors returned by
// CoreServiceGetChannelPublicationsRequest.ValidateAll() if the designated
// constraints aren't met.
type CoreServiceGetChannelPublicationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreServiceGetChannelPublicationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreServiceGetChannelPublicationsRequestMultiError) AllErrors() []error { return m }

// CoreServiceGetChannelPublicationsRequestValidationError is the validation
// error returned by CoreServiceGetChannelPublicationsRequest.Validate if the
// designated constraints aren't met.
type CoreServiceGetChannelPublicationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreServiceGetChannelPublicationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreServiceGetChannelPublicationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreServiceGetChannelPublicationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreServiceGetChannelPublicationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreServiceGetChannelPublicationsRequestValidationError) ErrorName() string {
	return "CoreServiceGetChannelPublicationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CoreServiceGetChannelPublicationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreServiceGetChannelPublicationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreServiceGetChannelPublicationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreServiceGetChannelPublicationsRequestValidationError{}

// Validate checks the field values on
// CoreServiceGetChannelPublicationsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CoreServiceGetChannelPublicationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CoreServiceGetChannelPublicationsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CoreServiceGetChannelPublicationsResponseMultiError, or nil if none found.
func (m *CoreServiceGetChannelPublicationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreServiceGetChannelPublicationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CoreServiceGetChannelPublicationsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CoreServiceGetChannelPublicationsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CoreServiceGetChannelPublicationsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Total

	if len(errors) > 0 {
		return CoreServiceGetChannelPublicationsResponseMultiError(errors)
	}

	return nil
}

// CoreServiceGetChannelPublicationsResponseMultiError is an error wrapping
// multiple validation errors returned by
// CoreServiceGetChannelPublicationsResponse.ValidateAll() if the designated
// constraints aren't met.
type CoreServiceGetChannelPublicationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreServiceGetChannelPublicationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreServiceGetChannelPublicationsResponseMultiError) AllErrors() []error { return m }

// CoreServiceGetChannelPublicationsResponseValidationError is the validation
// error returned by CoreServiceGetChannelPublicationsResponse.Validate if the
// designated constraints aren't met.
type CoreServiceGetChannelPublicationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreServiceGetChannelPublicationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreServiceGetChannelPublicationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreServiceGetChannelPublicationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreServiceGetChannelPublicationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreServiceGetChannelPublicationsResponseValidationError) ErrorName() string {
	return "CoreServiceGetChannelPublicationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CoreServiceGetChannelPublicationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreServiceGetChannelPublicationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreServiceGetChannelPublicationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreServiceGetChannelPublicationsResponseValidationError{}

// Validate checks the field values on CoreServiceGetPublicationByIDRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CoreServiceGetPublicationByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoreServiceGetPublicationByIDRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CoreServiceGetPublicationByIDRequestMultiError, or nil if none found.
func (m *CoreServiceGetPublicationByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreServiceGetPublicationByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RemoteMacAddress

	// no validation rules for Token

	// no validation rules for Id

	if len(errors) > 0 {
		return CoreServiceGetPublicationByIDRequestMultiError(errors)
	}

	return nil
}

// CoreServiceGetPublicationByIDRequestMultiError is an error wrapping multiple
// validation errors returned by
// CoreServiceGetPublicationByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type CoreServiceGetPublicationByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreServiceGetPublicationByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreServiceGetPublicationByIDRequestMultiError) AllErrors() []error { return m }

// CoreServiceGetPublicationByIDRequestValidationError is the validation error
// returned by CoreServiceGetPublicationByIDRequest.Validate if the designated
// constraints aren't met.
type CoreServiceGetPublicationByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreServiceGetPublicationByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreServiceGetPublicationByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreServiceGetPublicationByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreServiceGetPublicationByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreServiceGetPublicationByIDRequestValidationError) ErrorName() string {
	return "CoreServiceGetPublicationByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CoreServiceGetPublicationByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreServiceGetPublicationByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreServiceGetPublicationByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreServiceGetPublicationByIDRequestValidationError{}

// Validate checks the field values on CoreServiceGetPublicationByIDResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CoreServiceGetPublicationByIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoreServiceGetPublicationByIDResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CoreServiceGetPublicationByIDResponseMultiError, or nil if none found.
func (m *CoreServiceGetPublicationByIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreServiceGetPublicationByIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CoreServiceGetPublicationByIDResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CoreServiceGetPublicationByIDResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CoreServiceGetPublicationByIDResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Total

	if len(errors) > 0 {
		return CoreServiceGetPublicationByIDResponseMultiError(errors)
	}

	return nil
}

// CoreServiceGetPublicationByIDResponseMultiError is an error wrapping
// multiple validation errors returned by
// CoreServiceGetPublicationByIDResponse.ValidateAll() if the designated
// constraints aren't met.
type CoreServiceGetPublicationByIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreServiceGetPublicationByIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreServiceGetPublicationByIDResponseMultiError) AllErrors() []error { return m }

// CoreServiceGetPublicationByIDResponseValidationError is the validation error
// returned by CoreServiceGetPublicationByIDResponse.Validate if the
// designated constraints aren't met.
type CoreServiceGetPublicationByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreServiceGetPublicationByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreServiceGetPublicationByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreServiceGetPublicationByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreServiceGetPublicationByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreServiceGetPublicationByIDResponseValidationError) ErrorName() string {
	return "CoreServiceGetPublicationByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CoreServiceGetPublicationByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreServiceGetPublicationByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreServiceGetPublicationByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreServiceGetPublicationByIDResponseValidationError{}

// Validate checks the field values on Cursor with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Cursor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Cursor with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CursorMultiError, or nil if none found.
func (m *Cursor) ValidateAll() error {
	return m.validate(true)
}

func (m *Cursor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreatedAt

	// no validation rules for Id

	if len(errors) > 0 {
		return CursorMultiError(errors)
	}

	return nil
}

// CursorMultiError is an error wrapping multiple validation errors returned by
// Cursor.ValidateAll() if the designated constraints aren't met.
type CursorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CursorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CursorMultiError) AllErrors() []error { return m }

// CursorValidationError is the validation error returned by Cursor.Validate if
// the designated constraints aren't met.
type CursorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CursorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CursorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CursorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CursorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CursorValidationError) ErrorName() string { return "CursorValidationError" }

// Error satisfies the builtin error interface
func (e CursorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCursor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CursorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CursorValidationError{}

// Validate checks the field values on CoreServiceGetFeedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CoreServiceGetFeedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoreServiceGetFeedRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CoreServiceGetFeedRequestMultiError, or nil if none found.
func (m *CoreServiceGetFeedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreServiceGetFeedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RemoteMacAddress

	// no validation rules for Token

	if all {
		switch v := interface{}(m.GetCursor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CoreServiceGetFeedRequestValidationError{
					field:  "Cursor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CoreServiceGetFeedRequestValidationError{
					field:  "Cursor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCursor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CoreServiceGetFeedRequestValidationError{
				field:  "Cursor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CoreServiceGetFeedRequestMultiError(errors)
	}

	return nil
}

// CoreServiceGetFeedRequestMultiError is an error wrapping multiple validation
// errors returned by CoreServiceGetFeedRequest.ValidateAll() if the
// designated constraints aren't met.
type CoreServiceGetFeedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreServiceGetFeedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreServiceGetFeedRequestMultiError) AllErrors() []error { return m }

// CoreServiceGetFeedRequestValidationError is the validation error returned by
// CoreServiceGetFeedRequest.Validate if the designated constraints aren't met.
type CoreServiceGetFeedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreServiceGetFeedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreServiceGetFeedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreServiceGetFeedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreServiceGetFeedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreServiceGetFeedRequestValidationError) ErrorName() string {
	return "CoreServiceGetFeedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CoreServiceGetFeedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreServiceGetFeedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreServiceGetFeedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreServiceGetFeedRequestValidationError{}

// Validate checks the field values on CoreServiceGetFeedResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CoreServiceGetFeedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoreServiceGetFeedResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CoreServiceGetFeedResponseMultiError, or nil if none found.
func (m *CoreServiceGetFeedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreServiceGetFeedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CoreServiceGetFeedResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CoreServiceGetFeedResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CoreServiceGetFeedResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNextCursor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CoreServiceGetFeedResponseValidationError{
					field:  "NextCursor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CoreServiceGetFeedResponseValidationError{
					field:  "NextCursor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNextCursor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CoreServiceGetFeedResponseValidationError{
				field:  "NextCursor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CoreServiceGetFeedResponseMultiError(errors)
	}

	return nil
}

// CoreServiceGetFeedResponseMultiError is an error wrapping multiple
// validation errors returned by CoreServiceGetFeedResponse.ValidateAll() if
// the designated constraints aren't met.
type CoreServiceGetFeedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreServiceGetFeedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreServiceGetFeedResponseMultiError) AllErrors() []error { return m }

// CoreServiceGetFeedResponseValidationError is the validation error returned
// by CoreServiceGetFeedResponse.Validate if the designated constraints aren't met.
type CoreServiceGetFeedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreServiceGetFeedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreServiceGetFeedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreServiceGetFeedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreServiceGetFeedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreServiceGetFeedResponseValidationError) ErrorName() string {
	return "CoreServiceGetFeedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CoreServiceGetFeedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreServiceGetFeedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreServiceGetFeedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreServiceGetFeedResponseValidationError{}

// Validate checks the field values on CoreServiceRegisterGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CoreServiceRegisterGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoreServiceRegisterGroupRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CoreServiceRegisterGroupRequestMultiError, or nil if none found.
func (m *CoreServiceRegisterGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreServiceRegisterGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CoreServiceRegisterGroupRequestMultiError(errors)
	}

	return nil
}

// CoreServiceRegisterGroupRequestMultiError is an error wrapping multiple
// validation errors returned by CoreServiceRegisterGroupRequest.ValidateAll()
// if the designated constraints aren't met.
type CoreServiceRegisterGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreServiceRegisterGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreServiceRegisterGroupRequestMultiError) AllErrors() []error { return m }

// CoreServiceRegisterGroupRequestValidationError is the validation error
// returned by CoreServiceRegisterGroupRequest.Validate if the designated
// constraints aren't met.
type CoreServiceRegisterGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreServiceRegisterGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreServiceRegisterGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreServiceRegisterGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreServiceRegisterGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreServiceRegisterGroupRequestValidationError) ErrorName() string {
	return "CoreServiceRegisterGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CoreServiceRegisterGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreServiceRegisterGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreServiceRegisterGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreServiceRegisterGroupRequestValidationError{}

// Validate checks the field values on CoreServiceRegisterGroupResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CoreServiceRegisterGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoreServiceRegisterGroupResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CoreServiceRegisterGroupResponseMultiError, or nil if none found.
func (m *CoreServiceRegisterGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreServiceRegisterGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CoreServiceRegisterGroupResponseMultiError(errors)
	}

	return nil
}

// CoreServiceRegisterGroupResponseMultiError is an error wrapping multiple
// validation errors returned by
// CoreServiceRegisterGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type CoreServiceRegisterGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreServiceRegisterGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreServiceRegisterGroupResponseMultiError) AllErrors() []error { return m }

// CoreServiceRegisterGroupResponseValidationError is the validation error
// returned by CoreServiceRegisterGroupResponse.Validate if the designated
// constraints aren't met.
type CoreServiceRegisterGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreServiceRegisterGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreServiceRegisterGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreServiceRegisterGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreServiceRegisterGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreServiceRegisterGroupResponseValidationError) ErrorName() string {
	return "CoreServiceRegisterGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CoreServiceRegisterGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreServiceRegisterGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreServiceRegisterGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreServiceRegisterGroupResponseValidationError{}

// Validate checks the field values on CoreServiceModifyGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CoreServiceModifyGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoreServiceModifyGroupRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CoreServiceModifyGroupRequestMultiError, or nil if none found.
func (m *CoreServiceModifyGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreServiceModifyGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CoreServiceModifyGroupRequestMultiError(errors)
	}

	return nil
}

// CoreServiceModifyGroupRequestMultiError is an error wrapping multiple
// validation errors returned by CoreServiceModifyGroupRequest.ValidateAll()
// if the designated constraints aren't met.
type CoreServiceModifyGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreServiceModifyGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreServiceModifyGroupRequestMultiError) AllErrors() []error { return m }

// CoreServiceModifyGroupRequestValidationError is the validation error
// returned by CoreServiceModifyGroupRequest.Validate if the designated
// constraints aren't met.
type CoreServiceModifyGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreServiceModifyGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreServiceModifyGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreServiceModifyGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreServiceModifyGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreServiceModifyGroupRequestValidationError) ErrorName() string {
	return "CoreServiceModifyGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CoreServiceModifyGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreServiceModifyGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreServiceModifyGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreServiceModifyGroupRequestValidationError{}

// Validate checks the field values on CoreServiceModifyGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CoreServiceModifyGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoreServiceModifyGroupResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CoreServiceModifyGroupResponseMultiError, or nil if none found.
func (m *CoreServiceModifyGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreServiceModifyGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CoreServiceModifyGroupResponseMultiError(errors)
	}

	return nil
}

// CoreServiceModifyGroupResponseMultiError is an error wrapping multiple
// validation errors returned by CoreServiceModifyGroupResponse.ValidateAll()
// if the designated constraints aren't met.
type CoreServiceModifyGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreServiceModifyGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreServiceModifyGroupResponseMultiError) AllErrors() []error { return m }

// CoreServiceModifyGroupResponseValidationError is the validation error
// returned by CoreServiceModifyGroupResponse.Validate if the designated
// constraints aren't met.
type CoreServiceModifyGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreServiceModifyGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreServiceModifyGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreServiceModifyGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreServiceModifyGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreServiceModifyGroupResponseValidationError) ErrorName() string {
	return "CoreServiceModifyGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CoreServiceModifyGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreServiceModifyGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreServiceModifyGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreServiceModifyGroupResponseValidationError{}

// Validate checks the field values on CoreServiceJoinGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CoreServiceJoinGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoreServiceJoinGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CoreServiceJoinGroupRequestMultiError, or nil if none found.
func (m *CoreServiceJoinGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreServiceJoinGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CoreServiceJoinGroupRequestMultiError(errors)
	}

	return nil
}

// CoreServiceJoinGroupRequestMultiError is an error wrapping multiple
// validation errors returned by CoreServiceJoinGroupRequest.ValidateAll() if
// the designated constraints aren't met.
type CoreServiceJoinGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreServiceJoinGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreServiceJoinGroupRequestMultiError) AllErrors() []error { return m }

// CoreServiceJoinGroupRequestValidationError is the validation error returned
// by CoreServiceJoinGroupRequest.Validate if the designated constraints
// aren't met.
type CoreServiceJoinGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreServiceJoinGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreServiceJoinGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreServiceJoinGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreServiceJoinGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreServiceJoinGroupRequestValidationError) ErrorName() string {
	return "CoreServiceJoinGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CoreServiceJoinGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreServiceJoinGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreServiceJoinGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreServiceJoinGroupRequestValidationError{}

// Validate checks the field values on CoreServiceJoinGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CoreServiceJoinGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoreServiceJoinGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CoreServiceJoinGroupResponseMultiError, or nil if none found.
func (m *CoreServiceJoinGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreServiceJoinGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CoreServiceJoinGroupResponseMultiError(errors)
	}

	return nil
}

// CoreServiceJoinGroupResponseMultiError is an error wrapping multiple
// validation errors returned by CoreServiceJoinGroupResponse.ValidateAll() if
// the designated constraints aren't met.
type CoreServiceJoinGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreServiceJoinGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreServiceJoinGroupResponseMultiError) AllErrors() []error { return m }

// CoreServiceJoinGroupResponseValidationError is the validation error returned
// by CoreServiceJoinGroupResponse.Validate if the designated constraints
// aren't met.
type CoreServiceJoinGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreServiceJoinGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreServiceJoinGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreServiceJoinGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreServiceJoinGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreServiceJoinGroupResponseValidationError) ErrorName() string {
	return "CoreServiceJoinGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CoreServiceJoinGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreServiceJoinGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreServiceJoinGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreServiceJoinGroupResponseValidationError{}

// Validate checks the field values on CoreServiceRequestJoinGroupRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CoreServiceRequestJoinGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoreServiceRequestJoinGroupRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CoreServiceRequestJoinGroupRequestMultiError, or nil if none found.
func (m *CoreServiceRequestJoinGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreServiceRequestJoinGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CoreServiceRequestJoinGroupRequestMultiError(errors)
	}

	return nil
}

// CoreServiceRequestJoinGroupRequestMultiError is an error wrapping multiple
// validation errors returned by
// CoreServiceRequestJoinGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type CoreServiceRequestJoinGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreServiceRequestJoinGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreServiceRequestJoinGroupRequestMultiError) AllErrors() []error { return m }

// CoreServiceRequestJoinGroupRequestValidationError is the validation error
// returned by CoreServiceRequestJoinGroupRequest.Validate if the designated
// constraints aren't met.
type CoreServiceRequestJoinGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreServiceRequestJoinGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreServiceRequestJoinGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreServiceRequestJoinGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreServiceRequestJoinGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreServiceRequestJoinGroupRequestValidationError) ErrorName() string {
	return "CoreServiceRequestJoinGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CoreServiceRequestJoinGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreServiceRequestJoinGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreServiceRequestJoinGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreServiceRequestJoinGroupRequestValidationError{}

// Validate checks the field values on CoreServiceRequestJoinGroupResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CoreServiceRequestJoinGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoreServiceRequestJoinGroupResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CoreServiceRequestJoinGroupResponseMultiError, or nil if none found.
func (m *CoreServiceRequestJoinGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreServiceRequestJoinGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CoreServiceRequestJoinGroupResponseMultiError(errors)
	}

	return nil
}

// CoreServiceRequestJoinGroupResponseMultiError is an error wrapping multiple
// validation errors returned by
// CoreServiceRequestJoinGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type CoreServiceRequestJoinGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreServiceRequestJoinGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreServiceRequestJoinGroupResponseMultiError) AllErrors() []error { return m }

// CoreServiceRequestJoinGroupResponseValidationError is the validation error
// returned by CoreServiceRequestJoinGroupResponse.Validate if the designated
// constraints aren't met.
type CoreServiceRequestJoinGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreServiceRequestJoinGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreServiceRequestJoinGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreServiceRequestJoinGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreServiceRequestJoinGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreServiceRequestJoinGroupResponseValidationError) ErrorName() string {
	return "CoreServiceRequestJoinGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CoreServiceRequestJoinGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreServiceRequestJoinGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreServiceRequestJoinGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreServiceRequestJoinGroupResponseValidationError{}

// Validate checks the field values on CoreServiceRegisterChannelRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CoreServiceRegisterChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoreServiceRegisterChannelRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CoreServiceRegisterChannelRequestMultiError, or nil if none found.
func (m *CoreServiceRegisterChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreServiceRegisterChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CoreServiceRegisterChannelRequestMultiError(errors)
	}

	return nil
}

// CoreServiceRegisterChannelRequestMultiError is an error wrapping multiple
// validation errors returned by
// CoreServiceRegisterChannelRequest.ValidateAll() if the designated
// constraints aren't met.
type CoreServiceRegisterChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreServiceRegisterChannelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreServiceRegisterChannelRequestMultiError) AllErrors() []error { return m }

// CoreServiceRegisterChannelRequestValidationError is the validation error
// returned by CoreServiceRegisterChannelRequest.Validate if the designated
// constraints aren't met.
type CoreServiceRegisterChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreServiceRegisterChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreServiceRegisterChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreServiceRegisterChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreServiceRegisterChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreServiceRegisterChannelRequestValidationError) ErrorName() string {
	return "CoreServiceRegisterChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CoreServiceRegisterChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreServiceRegisterChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreServiceRegisterChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreServiceRegisterChannelRequestValidationError{}

// Validate checks the field values on CoreServiceRegisterChannelResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CoreServiceRegisterChannelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoreServiceRegisterChannelResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CoreServiceRegisterChannelResponseMultiError, or nil if none found.
func (m *CoreServiceRegisterChannelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreServiceRegisterChannelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CoreServiceRegisterChannelResponseMultiError(errors)
	}

	return nil
}

// CoreServiceRegisterChannelResponseMultiError is an error wrapping multiple
// validation errors returned by
// CoreServiceRegisterChannelResponse.ValidateAll() if the designated
// constraints aren't met.
type CoreServiceRegisterChannelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreServiceRegisterChannelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreServiceRegisterChannelResponseMultiError) AllErrors() []error { return m }

// CoreServiceRegisterChannelResponseValidationError is the validation error
// returned by CoreServiceRegisterChannelResponse.Validate if the designated
// constraints aren't met.
type CoreServiceRegisterChannelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreServiceRegisterChannelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreServiceRegisterChannelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreServiceRegisterChannelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreServiceRegisterChannelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreServiceRegisterChannelResponseValidationError) ErrorName() string {
	return "CoreServiceRegisterChannelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CoreServiceRegisterChannelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreServiceRegisterChannelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreServiceRegisterChannelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreServiceRegisterChannelResponseValidationError{}

// Validate checks the field values on CoreServiceModifyChannelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CoreServiceModifyChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoreServiceModifyChannelRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CoreServiceModifyChannelRequestMultiError, or nil if none found.
func (m *CoreServiceModifyChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreServiceModifyChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CoreServiceModifyChannelRequestMultiError(errors)
	}

	return nil
}

// CoreServiceModifyChannelRequestMultiError is an error wrapping multiple
// validation errors returned by CoreServiceModifyChannelRequest.ValidateAll()
// if the designated constraints aren't met.
type CoreServiceModifyChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreServiceModifyChannelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreServiceModifyChannelRequestMultiError) AllErrors() []error { return m }

// CoreServiceModifyChannelRequestValidationError is the validation error
// returned by CoreServiceModifyChannelRequest.Validate if the designated
// constraints aren't met.
type CoreServiceModifyChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreServiceModifyChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreServiceModifyChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreServiceModifyChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreServiceModifyChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreServiceModifyChannelRequestValidationError) ErrorName() string {
	return "CoreServiceModifyChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CoreServiceModifyChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreServiceModifyChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreServiceModifyChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreServiceModifyChannelRequestValidationError{}

// Validate checks the field values on CoreServiceModifyChannelResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CoreServiceModifyChannelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoreServiceModifyChannelResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CoreServiceModifyChannelResponseMultiError, or nil if none found.
func (m *CoreServiceModifyChannelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreServiceModifyChannelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CoreServiceModifyChannelResponseMultiError(errors)
	}

	return nil
}

// CoreServiceModifyChannelResponseMultiError is an error wrapping multiple
// validation errors returned by
// CoreServiceModifyChannelResponse.ValidateAll() if the designated
// constraints aren't met.
type CoreServiceModifyChannelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreServiceModifyChannelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreServiceModifyChannelResponseMultiError) AllErrors() []error { return m }

// CoreServiceModifyChannelResponseValidationError is the validation error
// returned by CoreServiceModifyChannelResponse.Validate if the designated
// constraints aren't met.
type CoreServiceModifyChannelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreServiceModifyChannelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreServiceModifyChannelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreServiceModifyChannelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreServiceModifyChannelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreServiceModifyChannelResponseValidationError) ErrorName() string {
	return "CoreServiceModifyChannelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CoreServiceModifyChannelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreServiceModifyChannelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreServiceModifyChannelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreServiceModifyChannelResponseValidationError{}

// Validate checks the field values on CoreServiceFollowChannelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CoreServiceFollowChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoreServiceFollowChannelRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CoreServiceFollowChannelRequestMultiError, or nil if none found.
func (m *CoreServiceFollowChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreServiceFollowChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CoreServiceFollowChannelRequestMultiError(errors)
	}

	return nil
}

// CoreServiceFollowChannelRequestMultiError is an error wrapping multiple
// validation errors returned by CoreServiceFollowChannelRequest.ValidateAll()
// if the designated constraints aren't met.
type CoreServiceFollowChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreServiceFollowChannelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreServiceFollowChannelRequestMultiError) AllErrors() []error { return m }

// CoreServiceFollowChannelRequestValidationError is the validation error
// returned by CoreServiceFollowChannelRequest.Validate if the designated
// constraints aren't met.
type CoreServiceFollowChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreServiceFollowChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreServiceFollowChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreServiceFollowChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreServiceFollowChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreServiceFollowChannelRequestValidationError) ErrorName() string {
	return "CoreServiceFollowChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CoreServiceFollowChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreServiceFollowChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreServiceFollowChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreServiceFollowChannelRequestValidationError{}

// Validate checks the field values on CoreServiceFollowChannelResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CoreServiceFollowChannelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoreServiceFollowChannelResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CoreServiceFollowChannelResponseMultiError, or nil if none found.
func (m *CoreServiceFollowChannelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreServiceFollowChannelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CoreServiceFollowChannelResponseMultiError(errors)
	}

	return nil
}

// CoreServiceFollowChannelResponseMultiError is an error wrapping multiple
// validation errors returned by
// CoreServiceFollowChannelResponse.ValidateAll() if the designated
// constraints aren't met.
type CoreServiceFollowChannelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreServiceFollowChannelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreServiceFollowChannelResponseMultiError) AllErrors() []error { return m }

// CoreServiceFollowChannelResponseValidationError is the validation error
// returned by CoreServiceFollowChannelResponse.Validate if the designated
// constraints aren't met.
type CoreServiceFollowChannelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreServiceFollowChannelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreServiceFollowChannelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreServiceFollowChannelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreServiceFollowChannelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreServiceFollowChannelResponseValidationError) ErrorName() string {
	return "CoreServiceFollowChannelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CoreServiceFollowChannelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreServiceFollowChannelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreServiceFollowChannelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreServiceFollowChannelResponseValidationError{}

// Validate checks the field values on CoreServiceRequestFollowChannelRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CoreServiceRequestFollowChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CoreServiceRequestFollowChannelRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CoreServiceRequestFollowChannelRequestMultiError, or nil if none found.
func (m *CoreServiceRequestFollowChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreServiceRequestFollowChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CoreServiceRequestFollowChannelRequestMultiError(errors)
	}

	return nil
}

// CoreServiceRequestFollowChannelRequestMultiError is an error wrapping
// multiple validation errors returned by
// CoreServiceRequestFollowChannelRequest.ValidateAll() if the designated
// constraints aren't met.
type CoreServiceRequestFollowChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreServiceRequestFollowChannelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreServiceRequestFollowChannelRequestMultiError) AllErrors() []error { return m }

// CoreServiceRequestFollowChannelRequestValidationError is the validation
// error returned by CoreServiceRequestFollowChannelRequest.Validate if the
// designated constraints aren't met.
type CoreServiceRequestFollowChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreServiceRequestFollowChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreServiceRequestFollowChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreServiceRequestFollowChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreServiceRequestFollowChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreServiceRequestFollowChannelRequestValidationError) ErrorName() string {
	return "CoreServiceRequestFollowChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CoreServiceRequestFollowChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreServiceRequestFollowChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreServiceRequestFollowChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreServiceRequestFollowChannelRequestValidationError{}

// Validate checks the field values on CoreServiceRequestFollowChannelResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CoreServiceRequestFollowChannelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CoreServiceRequestFollowChannelResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CoreServiceRequestFollowChannelResponseMultiError, or nil if none found.
func (m *CoreServiceRequestFollowChannelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreServiceRequestFollowChannelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CoreServiceRequestFollowChannelResponseMultiError(errors)
	}

	return nil
}

// CoreServiceRequestFollowChannelResponseMultiError is an error wrapping
// multiple validation errors returned by
// CoreServiceRequestFollowChannelResponse.ValidateAll() if the designated
// constraints aren't met.
type CoreServiceRequestFollowChannelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreServiceRequestFollowChannelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreServiceRequestFollowChannelResponseMultiError) AllErrors() []error { return m }

// CoreServiceRequestFollowChannelResponseValidationError is the validation
// error returned by CoreServiceRequestFollowChannelResponse.Validate if the
// designated constraints aren't met.
type CoreServiceRequestFollowChannelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreServiceRequestFollowChannelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreServiceRequestFollowChannelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreServiceRequestFollowChannelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreServiceRequestFollowChannelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreServiceRequestFollowChannelResponseValidationError) ErrorName() string {
	return "CoreServiceRequestFollowChannelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CoreServiceRequestFollowChannelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreServiceRequestFollowChannelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreServiceRequestFollowChannelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreServiceRequestFollowChannelResponseValidationError{}

// Validate checks the field values on CoreServiceInviteToChannelRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CoreServiceInviteToChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoreServiceInviteToChannelRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CoreServiceInviteToChannelRequestMultiError, or nil if none found.
func (m *CoreServiceInviteToChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreServiceInviteToChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CoreServiceInviteToChannelRequestMultiError(errors)
	}

	return nil
}

// CoreServiceInviteToChannelRequestMultiError is an error wrapping multiple
// validation errors returned by
// CoreServiceInviteToChannelRequest.ValidateAll() if the designated
// constraints aren't met.
type CoreServiceInviteToChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreServiceInviteToChannelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreServiceInviteToChannelRequestMultiError) AllErrors() []error { return m }

// CoreServiceInviteToChannelRequestValidationError is the validation error
// returned by CoreServiceInviteToChannelRequest.Validate if the designated
// constraints aren't met.
type CoreServiceInviteToChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreServiceInviteToChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreServiceInviteToChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreServiceInviteToChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreServiceInviteToChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreServiceInviteToChannelRequestValidationError) ErrorName() string {
	return "CoreServiceInviteToChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CoreServiceInviteToChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreServiceInviteToChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreServiceInviteToChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreServiceInviteToChannelRequestValidationError{}

// Validate checks the field values on CoreServiceInviteToChannelResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CoreServiceInviteToChannelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoreServiceInviteToChannelResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CoreServiceInviteToChannelResponseMultiError, or nil if none found.
func (m *CoreServiceInviteToChannelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreServiceInviteToChannelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CoreServiceInviteToChannelResponseMultiError(errors)
	}

	return nil
}

// CoreServiceInviteToChannelResponseMultiError is an error wrapping multiple
// validation errors returned by
// CoreServiceInviteToChannelResponse.ValidateAll() if the designated
// constraints aren't met.
type CoreServiceInviteToChannelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreServiceInviteToChannelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreServiceInviteToChannelResponseMultiError) AllErrors() []error { return m }

// CoreServiceInviteToChannelResponseValidationError is the validation error
// returned by CoreServiceInviteToChannelResponse.Validate if the designated
// constraints aren't met.
type CoreServiceInviteToChannelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreServiceInviteToChannelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreServiceInviteToChannelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreServiceInviteToChannelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreServiceInviteToChannelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreServiceInviteToChannelResponseValidationError) ErrorName() string {
	return "CoreServiceInviteToChannelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CoreServiceInviteToChannelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreServiceInviteToChannelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreServiceInviteToChannelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreServiceInviteToChannelResponseValidationError{}

// Validate checks the field values on CoreServiceReactOnPublicationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CoreServiceReactOnPublicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoreServiceReactOnPublicationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CoreServiceReactOnPublicationRequestMultiError, or nil if none found.
func (m *CoreServiceReactOnPublicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreServiceReactOnPublicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CoreServiceReactOnPublicationRequestMultiError(errors)
	}

	return nil
}

// CoreServiceReactOnPublicationRequestMultiError is an error wrapping multiple
// validation errors returned by
// CoreServiceReactOnPublicationRequest.ValidateAll() if the designated
// constraints aren't met.
type CoreServiceReactOnPublicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreServiceReactOnPublicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreServiceReactOnPublicationRequestMultiError) AllErrors() []error { return m }

// CoreServiceReactOnPublicationRequestValidationError is the validation error
// returned by CoreServiceReactOnPublicationRequest.Validate if the designated
// constraints aren't met.
type CoreServiceReactOnPublicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreServiceReactOnPublicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreServiceReactOnPublicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreServiceReactOnPublicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreServiceReactOnPublicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreServiceReactOnPublicationRequestValidationError) ErrorName() string {
	return "CoreServiceReactOnPublicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CoreServiceReactOnPublicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreServiceReactOnPublicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreServiceReactOnPublicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreServiceReactOnPublicationRequestValidationError{}

// Validate checks the field values on CoreServiceReactOnPublicationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CoreServiceReactOnPublicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoreServiceReactOnPublicationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CoreServiceReactOnPublicationResponseMultiError, or nil if none found.
func (m *CoreServiceReactOnPublicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreServiceReactOnPublicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CoreServiceReactOnPublicationResponseMultiError(errors)
	}

	return nil
}

// CoreServiceReactOnPublicationResponseMultiError is an error wrapping
// multiple validation errors returned by
// CoreServiceReactOnPublicationResponse.ValidateAll() if the designated
// constraints aren't met.
type CoreServiceReactOnPublicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreServiceReactOnPublicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreServiceReactOnPublicationResponseMultiError) AllErrors() []error { return m }

// CoreServiceReactOnPublicationResponseValidationError is the validation error
// returned by CoreServiceReactOnPublicationResponse.Validate if the
// designated constraints aren't met.
type CoreServiceReactOnPublicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreServiceReactOnPublicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreServiceReactOnPublicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreServiceReactOnPublicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreServiceReactOnPublicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreServiceReactOnPublicationResponseValidationError) ErrorName() string {
	return "CoreServiceReactOnPublicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CoreServiceReactOnPublicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreServiceReactOnPublicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreServiceReactOnPublicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreServiceReactOnPublicationResponseValidationError{}
