// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: networknode/v1/ingress_service_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IngressService_RegisterGroup_FullMethodName        = "/networknode.v1.IngressService/RegisterGroup"
	IngressService_ModifyGroup_FullMethodName          = "/networknode.v1.IngressService/ModifyGroup"
	IngressService_JoinGroup_FullMethodName            = "/networknode.v1.IngressService/JoinGroup"
	IngressService_RequestJoinGroup_FullMethodName     = "/networknode.v1.IngressService/RequestJoinGroup"
	IngressService_RegisterChannel_FullMethodName      = "/networknode.v1.IngressService/RegisterChannel"
	IngressService_ModifyChannel_FullMethodName        = "/networknode.v1.IngressService/ModifyChannel"
	IngressService_FollowChannel_FullMethodName        = "/networknode.v1.IngressService/FollowChannel"
	IngressService_RequestFollowChannel_FullMethodName = "/networknode.v1.IngressService/RequestFollowChannel"
	IngressService_InviteToChannel_FullMethodName      = "/networknode.v1.IngressService/InviteToChannel"
	IngressService_ReactOnPublication_FullMethodName   = "/networknode.v1.IngressService/ReactOnPublication"
)

// IngressServiceClient is the client API for IngressService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IngressServiceClient interface {
	RegisterGroup(ctx context.Context, in *IngressServiceRegisterGroupRequest, opts ...grpc.CallOption) (*IngressServiceRegisterGroupResponse, error)
	ModifyGroup(ctx context.Context, in *IngressServiceModifyGroupRequest, opts ...grpc.CallOption) (*IngressServiceModifyGroupResponse, error)
	JoinGroup(ctx context.Context, in *IngressServiceJoinGroupRequest, opts ...grpc.CallOption) (*IngressServiceJoinGroupResponse, error)
	RequestJoinGroup(ctx context.Context, in *IngressServiceRequestJoinGroupRequest, opts ...grpc.CallOption) (*IngressServiceRequestJoinGroupResponse, error)
	RegisterChannel(ctx context.Context, in *IngressServiceRegisterChannelRequest, opts ...grpc.CallOption) (*IngressServiceRegisterChannelResponse, error)
	ModifyChannel(ctx context.Context, in *IngressServiceModifyChannelRequest, opts ...grpc.CallOption) (*IngressServiceModifyChannelResponse, error)
	FollowChannel(ctx context.Context, in *IngressServiceFollowChannelRequest, opts ...grpc.CallOption) (*IngressServiceFollowChannelResponse, error)
	RequestFollowChannel(ctx context.Context, in *IngressServiceRequestFollowChannelRequest, opts ...grpc.CallOption) (*IngressServiceRequestFollowChannelResponse, error)
	InviteToChannel(ctx context.Context, in *IngressServiceInviteToChannelRequest, opts ...grpc.CallOption) (*IngressServiceInviteToChannelResponse, error)
	ReactOnPublication(ctx context.Context, in *IngressServiceReactOnPublicationRequest, opts ...grpc.CallOption) (*IngressServiceReactOnPublicationResponse, error)
}

type ingressServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIngressServiceClient(cc grpc.ClientConnInterface) IngressServiceClient {
	return &ingressServiceClient{cc}
}

func (c *ingressServiceClient) RegisterGroup(ctx context.Context, in *IngressServiceRegisterGroupRequest, opts ...grpc.CallOption) (*IngressServiceRegisterGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IngressServiceRegisterGroupResponse)
	err := c.cc.Invoke(ctx, IngressService_RegisterGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingressServiceClient) ModifyGroup(ctx context.Context, in *IngressServiceModifyGroupRequest, opts ...grpc.CallOption) (*IngressServiceModifyGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IngressServiceModifyGroupResponse)
	err := c.cc.Invoke(ctx, IngressService_ModifyGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingressServiceClient) JoinGroup(ctx context.Context, in *IngressServiceJoinGroupRequest, opts ...grpc.CallOption) (*IngressServiceJoinGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IngressServiceJoinGroupResponse)
	err := c.cc.Invoke(ctx, IngressService_JoinGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingressServiceClient) RequestJoinGroup(ctx context.Context, in *IngressServiceRequestJoinGroupRequest, opts ...grpc.CallOption) (*IngressServiceRequestJoinGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IngressServiceRequestJoinGroupResponse)
	err := c.cc.Invoke(ctx, IngressService_RequestJoinGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingressServiceClient) RegisterChannel(ctx context.Context, in *IngressServiceRegisterChannelRequest, opts ...grpc.CallOption) (*IngressServiceRegisterChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IngressServiceRegisterChannelResponse)
	err := c.cc.Invoke(ctx, IngressService_RegisterChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingressServiceClient) ModifyChannel(ctx context.Context, in *IngressServiceModifyChannelRequest, opts ...grpc.CallOption) (*IngressServiceModifyChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IngressServiceModifyChannelResponse)
	err := c.cc.Invoke(ctx, IngressService_ModifyChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingressServiceClient) FollowChannel(ctx context.Context, in *IngressServiceFollowChannelRequest, opts ...grpc.CallOption) (*IngressServiceFollowChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IngressServiceFollowChannelResponse)
	err := c.cc.Invoke(ctx, IngressService_FollowChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingressServiceClient) RequestFollowChannel(ctx context.Context, in *IngressServiceRequestFollowChannelRequest, opts ...grpc.CallOption) (*IngressServiceRequestFollowChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IngressServiceRequestFollowChannelResponse)
	err := c.cc.Invoke(ctx, IngressService_RequestFollowChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingressServiceClient) InviteToChannel(ctx context.Context, in *IngressServiceInviteToChannelRequest, opts ...grpc.CallOption) (*IngressServiceInviteToChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IngressServiceInviteToChannelResponse)
	err := c.cc.Invoke(ctx, IngressService_InviteToChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingressServiceClient) ReactOnPublication(ctx context.Context, in *IngressServiceReactOnPublicationRequest, opts ...grpc.CallOption) (*IngressServiceReactOnPublicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IngressServiceReactOnPublicationResponse)
	err := c.cc.Invoke(ctx, IngressService_ReactOnPublication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IngressServiceServer is the server API for IngressService service.
// All implementations must embed UnimplementedIngressServiceServer
// for forward compatibility.
type IngressServiceServer interface {
	RegisterGroup(context.Context, *IngressServiceRegisterGroupRequest) (*IngressServiceRegisterGroupResponse, error)
	ModifyGroup(context.Context, *IngressServiceModifyGroupRequest) (*IngressServiceModifyGroupResponse, error)
	JoinGroup(context.Context, *IngressServiceJoinGroupRequest) (*IngressServiceJoinGroupResponse, error)
	RequestJoinGroup(context.Context, *IngressServiceRequestJoinGroupRequest) (*IngressServiceRequestJoinGroupResponse, error)
	RegisterChannel(context.Context, *IngressServiceRegisterChannelRequest) (*IngressServiceRegisterChannelResponse, error)
	ModifyChannel(context.Context, *IngressServiceModifyChannelRequest) (*IngressServiceModifyChannelResponse, error)
	FollowChannel(context.Context, *IngressServiceFollowChannelRequest) (*IngressServiceFollowChannelResponse, error)
	RequestFollowChannel(context.Context, *IngressServiceRequestFollowChannelRequest) (*IngressServiceRequestFollowChannelResponse, error)
	InviteToChannel(context.Context, *IngressServiceInviteToChannelRequest) (*IngressServiceInviteToChannelResponse, error)
	ReactOnPublication(context.Context, *IngressServiceReactOnPublicationRequest) (*IngressServiceReactOnPublicationResponse, error)
	mustEmbedUnimplementedIngressServiceServer()
}

// UnimplementedIngressServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIngressServiceServer struct{}

func (UnimplementedIngressServiceServer) RegisterGroup(context.Context, *IngressServiceRegisterGroupRequest) (*IngressServiceRegisterGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterGroup not implemented")
}
func (UnimplementedIngressServiceServer) ModifyGroup(context.Context, *IngressServiceModifyGroupRequest) (*IngressServiceModifyGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyGroup not implemented")
}
func (UnimplementedIngressServiceServer) JoinGroup(context.Context, *IngressServiceJoinGroupRequest) (*IngressServiceJoinGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGroup not implemented")
}
func (UnimplementedIngressServiceServer) RequestJoinGroup(context.Context, *IngressServiceRequestJoinGroupRequest) (*IngressServiceRequestJoinGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestJoinGroup not implemented")
}
func (UnimplementedIngressServiceServer) RegisterChannel(context.Context, *IngressServiceRegisterChannelRequest) (*IngressServiceRegisterChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterChannel not implemented")
}
func (UnimplementedIngressServiceServer) ModifyChannel(context.Context, *IngressServiceModifyChannelRequest) (*IngressServiceModifyChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyChannel not implemented")
}
func (UnimplementedIngressServiceServer) FollowChannel(context.Context, *IngressServiceFollowChannelRequest) (*IngressServiceFollowChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowChannel not implemented")
}
func (UnimplementedIngressServiceServer) RequestFollowChannel(context.Context, *IngressServiceRequestFollowChannelRequest) (*IngressServiceRequestFollowChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestFollowChannel not implemented")
}
func (UnimplementedIngressServiceServer) InviteToChannel(context.Context, *IngressServiceInviteToChannelRequest) (*IngressServiceInviteToChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteToChannel not implemented")
}
func (UnimplementedIngressServiceServer) ReactOnPublication(context.Context, *IngressServiceReactOnPublicationRequest) (*IngressServiceReactOnPublicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactOnPublication not implemented")
}
func (UnimplementedIngressServiceServer) mustEmbedUnimplementedIngressServiceServer() {}
func (UnimplementedIngressServiceServer) testEmbeddedByValue()                        {}

// UnsafeIngressServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IngressServiceServer will
// result in compilation errors.
type UnsafeIngressServiceServer interface {
	mustEmbedUnimplementedIngressServiceServer()
}

func RegisterIngressServiceServer(s grpc.ServiceRegistrar, srv IngressServiceServer) {
	// If the following call pancis, it indicates UnimplementedIngressServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IngressService_ServiceDesc, srv)
}

func _IngressService_RegisterGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngressServiceRegisterGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngressServiceServer).RegisterGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngressService_RegisterGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngressServiceServer).RegisterGroup(ctx, req.(*IngressServiceRegisterGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngressService_ModifyGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngressServiceModifyGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngressServiceServer).ModifyGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngressService_ModifyGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngressServiceServer).ModifyGroup(ctx, req.(*IngressServiceModifyGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngressService_JoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngressServiceJoinGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngressServiceServer).JoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngressService_JoinGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngressServiceServer).JoinGroup(ctx, req.(*IngressServiceJoinGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngressService_RequestJoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngressServiceRequestJoinGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngressServiceServer).RequestJoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngressService_RequestJoinGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngressServiceServer).RequestJoinGroup(ctx, req.(*IngressServiceRequestJoinGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngressService_RegisterChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngressServiceRegisterChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngressServiceServer).RegisterChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngressService_RegisterChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngressServiceServer).RegisterChannel(ctx, req.(*IngressServiceRegisterChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngressService_ModifyChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngressServiceModifyChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngressServiceServer).ModifyChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngressService_ModifyChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngressServiceServer).ModifyChannel(ctx, req.(*IngressServiceModifyChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngressService_FollowChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngressServiceFollowChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngressServiceServer).FollowChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngressService_FollowChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngressServiceServer).FollowChannel(ctx, req.(*IngressServiceFollowChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngressService_RequestFollowChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngressServiceRequestFollowChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngressServiceServer).RequestFollowChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngressService_RequestFollowChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngressServiceServer).RequestFollowChannel(ctx, req.(*IngressServiceRequestFollowChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngressService_InviteToChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngressServiceInviteToChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngressServiceServer).InviteToChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngressService_InviteToChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngressServiceServer).InviteToChannel(ctx, req.(*IngressServiceInviteToChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngressService_ReactOnPublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngressServiceReactOnPublicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngressServiceServer).ReactOnPublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngressService_ReactOnPublication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngressServiceServer).ReactOnPublication(ctx, req.(*IngressServiceReactOnPublicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IngressService_ServiceDesc is the grpc.ServiceDesc for IngressService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IngressService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "networknode.v1.IngressService",
	HandlerType: (*IngressServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterGroup",
			Handler:    _IngressService_RegisterGroup_Handler,
		},
		{
			MethodName: "ModifyGroup",
			Handler:    _IngressService_ModifyGroup_Handler,
		},
		{
			MethodName: "JoinGroup",
			Handler:    _IngressService_JoinGroup_Handler,
		},
		{
			MethodName: "RequestJoinGroup",
			Handler:    _IngressService_RequestJoinGroup_Handler,
		},
		{
			MethodName: "RegisterChannel",
			Handler:    _IngressService_RegisterChannel_Handler,
		},
		{
			MethodName: "ModifyChannel",
			Handler:    _IngressService_ModifyChannel_Handler,
		},
		{
			MethodName: "FollowChannel",
			Handler:    _IngressService_FollowChannel_Handler,
		},
		{
			MethodName: "RequestFollowChannel",
			Handler:    _IngressService_RequestFollowChannel_Handler,
		},
		{
			MethodName: "InviteToChannel",
			Handler:    _IngressService_InviteToChannel_Handler,
		},
		{
			MethodName: "ReactOnPublication",
			Handler:    _IngressService_ReactOnPublication_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "networknode/v1/ingress_service_service.proto",
}
