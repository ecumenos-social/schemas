// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: networknode/v1/publication.proto

package v1

import (
	v1 "github.com/ecumenos-social/schemas/proto/gen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Publication_Type int32

const (
	Publication_TYPE_UNKNOWN_UNSPECIFIED Publication_Type = 0
	Publication_TYPE_POST                Publication_Type = 1
	Publication_TYPE_ALBUM               Publication_Type = 2
	Publication_TYPE_VIDEO               Publication_Type = 3
	Publication_TYPE_SHORT_VIDEO         Publication_Type = 4
	Publication_TYPE_QPOST               Publication_Type = 5
	Publication_TYPE_POLL                Publication_Type = 6
	Publication_TYPE_EVENT               Publication_Type = 7
	Publication_TYPE_OFFERING            Publication_Type = 8
)

// Enum value maps for Publication_Type.
var (
	Publication_Type_name = map[int32]string{
		0: "TYPE_UNKNOWN_UNSPECIFIED",
		1: "TYPE_POST",
		2: "TYPE_ALBUM",
		3: "TYPE_VIDEO",
		4: "TYPE_SHORT_VIDEO",
		5: "TYPE_QPOST",
		6: "TYPE_POLL",
		7: "TYPE_EVENT",
		8: "TYPE_OFFERING",
	}
	Publication_Type_value = map[string]int32{
		"TYPE_UNKNOWN_UNSPECIFIED": 0,
		"TYPE_POST":                1,
		"TYPE_ALBUM":               2,
		"TYPE_VIDEO":               3,
		"TYPE_SHORT_VIDEO":         4,
		"TYPE_QPOST":               5,
		"TYPE_POLL":                6,
		"TYPE_EVENT":               7,
		"TYPE_OFFERING":            8,
	}
)

func (x Publication_Type) Enum() *Publication_Type {
	p := new(Publication_Type)
	*p = x
	return p
}

func (x Publication_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Publication_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_networknode_v1_publication_proto_enumTypes[0].Descriptor()
}

func (Publication_Type) Type() protoreflect.EnumType {
	return &file_networknode_v1_publication_proto_enumTypes[0]
}

func (x Publication_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Publication_Type.Descriptor instead.
func (Publication_Type) EnumDescriptor() ([]byte, []int) {
	return file_networknode_v1_publication_proto_rawDescGZIP(), []int{0, 0}
}

type Publication_OfferingUnit int32

const (
	Publication_OFFERING_UNIT_UNKNOWN_UNSPECIFIED Publication_OfferingUnit = 0
	Publication_OFFERING_UNIT_UNIT                Publication_OfferingUnit = 1
	Publication_OFFERING_UNIT_MINUTE              Publication_OfferingUnit = 2
	Publication_OFFERING_UNIT_KILOGRAM            Publication_OfferingUnit = 3
	Publication_OFFERING_UNIT_POUND               Publication_OfferingUnit = 4
)

// Enum value maps for Publication_OfferingUnit.
var (
	Publication_OfferingUnit_name = map[int32]string{
		0: "OFFERING_UNIT_UNKNOWN_UNSPECIFIED",
		1: "OFFERING_UNIT_UNIT",
		2: "OFFERING_UNIT_MINUTE",
		3: "OFFERING_UNIT_KILOGRAM",
		4: "OFFERING_UNIT_POUND",
	}
	Publication_OfferingUnit_value = map[string]int32{
		"OFFERING_UNIT_UNKNOWN_UNSPECIFIED": 0,
		"OFFERING_UNIT_UNIT":                1,
		"OFFERING_UNIT_MINUTE":              2,
		"OFFERING_UNIT_KILOGRAM":            3,
		"OFFERING_UNIT_POUND":               4,
	}
)

func (x Publication_OfferingUnit) Enum() *Publication_OfferingUnit {
	p := new(Publication_OfferingUnit)
	*p = x
	return p
}

func (x Publication_OfferingUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Publication_OfferingUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_networknode_v1_publication_proto_enumTypes[1].Descriptor()
}

func (Publication_OfferingUnit) Type() protoreflect.EnumType {
	return &file_networknode_v1_publication_proto_enumTypes[1]
}

func (x Publication_OfferingUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Publication_OfferingUnit.Descriptor instead.
func (Publication_OfferingUnit) EnumDescriptor() ([]byte, []int) {
	return file_networknode_v1_publication_proto_rawDescGZIP(), []int{0, 1}
}

type Publication_OfferingType int32

const (
	Publication_OFFERING_TYPE_UNKNOWN_UNSPECIFIED Publication_OfferingType = 0
	Publication_OFFERING_TYPE_SERVICE             Publication_OfferingType = 1
	Publication_OFFERING_TYPE_COMMODITY           Publication_OfferingType = 2
)

// Enum value maps for Publication_OfferingType.
var (
	Publication_OfferingType_name = map[int32]string{
		0: "OFFERING_TYPE_UNKNOWN_UNSPECIFIED",
		1: "OFFERING_TYPE_SERVICE",
		2: "OFFERING_TYPE_COMMODITY",
	}
	Publication_OfferingType_value = map[string]int32{
		"OFFERING_TYPE_UNKNOWN_UNSPECIFIED": 0,
		"OFFERING_TYPE_SERVICE":             1,
		"OFFERING_TYPE_COMMODITY":           2,
	}
)

func (x Publication_OfferingType) Enum() *Publication_OfferingType {
	p := new(Publication_OfferingType)
	*p = x
	return p
}

func (x Publication_OfferingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Publication_OfferingType) Descriptor() protoreflect.EnumDescriptor {
	return file_networknode_v1_publication_proto_enumTypes[2].Descriptor()
}

func (Publication_OfferingType) Type() protoreflect.EnumType {
	return &file_networknode_v1_publication_proto_enumTypes[2]
}

func (x Publication_OfferingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Publication_OfferingType.Descriptor instead.
func (Publication_OfferingType) EnumDescriptor() ([]byte, []int) {
	return file_networknode_v1_publication_proto_rawDescGZIP(), []int{0, 2}
}

type Publication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                           string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt                    string                    `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	LastModifiedAt               *string                   `protobuf:"bytes,3,opt,name=last_modified_at,json=lastModifiedAt,proto3,oneof" json:"last_modified_at,omitempty"`
	TitleLanguage                *string                   `protobuf:"bytes,4,opt,name=title_language,json=titleLanguage,proto3,oneof" json:"title_language,omitempty"`
	AccountId                    int64                     `protobuf:"varint,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	GroupId                      *int64                    `protobuf:"varint,6,opt,name=group_id,json=groupId,proto3,oneof" json:"group_id,omitempty"`
	Type                         Publication_Type          `protobuf:"varint,7,opt,name=type,proto3,enum=networknode.v1.Publication_Type" json:"type,omitempty"`
	Title                        *string                   `protobuf:"bytes,8,opt,name=title,proto3,oneof" json:"title,omitempty"`
	TextContext                  *string                   `protobuf:"bytes,9,opt,name=text_context,json=textContext,proto3,oneof" json:"text_context,omitempty"`
	TextContentLanguage          *string                   `protobuf:"bytes,10,opt,name=text_content_language,json=textContentLanguage,proto3,oneof" json:"text_content_language,omitempty"`
	Language                     *string                   `protobuf:"bytes,11,opt,name=language,proto3,oneof" json:"language,omitempty"`
	OfferingPrice                *float64                  `protobuf:"fixed64,12,opt,name=offering_price,json=offeringPrice,proto3,oneof" json:"offering_price,omitempty"`
	OfferingUnit                 *Publication_OfferingUnit `protobuf:"varint,13,opt,name=offering_unit,json=offeringUnit,proto3,enum=networknode.v1.Publication_OfferingUnit,oneof" json:"offering_unit,omitempty"`
	OfferingOriginalCurrency     *string                   `protobuf:"bytes,14,opt,name=offering_original_currency,json=offeringOriginalCurrency,proto3,oneof" json:"offering_original_currency,omitempty"`
	OfferingDiscountInPercentage *float64                  `protobuf:"fixed64,15,opt,name=offering_discount_in_percentage,json=offeringDiscountInPercentage,proto3,oneof" json:"offering_discount_in_percentage,omitempty"`
	OfferingDiscountInAmount     *float64                  `protobuf:"fixed64,16,opt,name=offering_discount_in_amount,json=offeringDiscountInAmount,proto3,oneof" json:"offering_discount_in_amount,omitempty"`
	OfferingDiscountExpiredAt    *string                   `protobuf:"bytes,17,opt,name=offering_discount_expired_at,json=offeringDiscountExpiredAt,proto3,oneof" json:"offering_discount_expired_at,omitempty"`
	OfferingType                 *Publication_OfferingType `protobuf:"varint,18,opt,name=offering_type,json=offeringType,proto3,enum=networknode.v1.Publication_OfferingType,oneof" json:"offering_type,omitempty"`
	VideoUrl                     *string                   `protobuf:"bytes,19,opt,name=video_url,json=videoUrl,proto3,oneof" json:"video_url,omitempty"`
	ShortVideoUrl                *string                   `protobuf:"bytes,20,opt,name=short_video_url,json=shortVideoUrl,proto3,oneof" json:"short_video_url,omitempty"`
	Tags                         []string                  `protobuf:"bytes,21,rep,name=tags,proto3" json:"tags,omitempty"`
	MentionedPublications        []int64                   `protobuf:"varint,22,rep,packed,name=mentioned_publications,json=mentionedPublications,proto3" json:"mentioned_publications,omitempty"`
	MentionedAccounts            []int64                   `protobuf:"varint,23,rep,packed,name=mentioned_accounts,json=mentionedAccounts,proto3" json:"mentioned_accounts,omitempty"`
	MentionedGroups              []int64                   `protobuf:"varint,24,rep,packed,name=mentioned_groups,json=mentionedGroups,proto3" json:"mentioned_groups,omitempty"`
	MentionedChannels            []int64                   `protobuf:"varint,25,rep,packed,name=mentioned_channels,json=mentionedChannels,proto3" json:"mentioned_channels,omitempty"`
	PollOptions                  []*Publication_PollOption `protobuf:"bytes,26,rep,name=poll_options,json=pollOptions,proto3" json:"poll_options,omitempty"`
	IsPollAnonymous              *bool                     `protobuf:"varint,27,opt,name=is_poll_anonymous,json=isPollAnonymous,proto3,oneof" json:"is_poll_anonymous,omitempty"`
	Location                     *v1.Geolocation           `protobuf:"bytes,28,opt,name=location,proto3,oneof" json:"location,omitempty"`
	EventScheduledAt             *string                   `protobuf:"bytes,29,opt,name=event_scheduled_at,json=eventScheduledAt,proto3,oneof" json:"event_scheduled_at,omitempty"`
}

func (x *Publication) Reset() {
	*x = Publication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networknode_v1_publication_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Publication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Publication) ProtoMessage() {}

func (x *Publication) ProtoReflect() protoreflect.Message {
	mi := &file_networknode_v1_publication_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Publication.ProtoReflect.Descriptor instead.
func (*Publication) Descriptor() ([]byte, []int) {
	return file_networknode_v1_publication_proto_rawDescGZIP(), []int{0}
}

func (x *Publication) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Publication) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Publication) GetLastModifiedAt() string {
	if x != nil && x.LastModifiedAt != nil {
		return *x.LastModifiedAt
	}
	return ""
}

func (x *Publication) GetTitleLanguage() string {
	if x != nil && x.TitleLanguage != nil {
		return *x.TitleLanguage
	}
	return ""
}

func (x *Publication) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *Publication) GetGroupId() int64 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

func (x *Publication) GetType() Publication_Type {
	if x != nil {
		return x.Type
	}
	return Publication_TYPE_UNKNOWN_UNSPECIFIED
}

func (x *Publication) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Publication) GetTextContext() string {
	if x != nil && x.TextContext != nil {
		return *x.TextContext
	}
	return ""
}

func (x *Publication) GetTextContentLanguage() string {
	if x != nil && x.TextContentLanguage != nil {
		return *x.TextContentLanguage
	}
	return ""
}

func (x *Publication) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *Publication) GetOfferingPrice() float64 {
	if x != nil && x.OfferingPrice != nil {
		return *x.OfferingPrice
	}
	return 0
}

func (x *Publication) GetOfferingUnit() Publication_OfferingUnit {
	if x != nil && x.OfferingUnit != nil {
		return *x.OfferingUnit
	}
	return Publication_OFFERING_UNIT_UNKNOWN_UNSPECIFIED
}

func (x *Publication) GetOfferingOriginalCurrency() string {
	if x != nil && x.OfferingOriginalCurrency != nil {
		return *x.OfferingOriginalCurrency
	}
	return ""
}

func (x *Publication) GetOfferingDiscountInPercentage() float64 {
	if x != nil && x.OfferingDiscountInPercentage != nil {
		return *x.OfferingDiscountInPercentage
	}
	return 0
}

func (x *Publication) GetOfferingDiscountInAmount() float64 {
	if x != nil && x.OfferingDiscountInAmount != nil {
		return *x.OfferingDiscountInAmount
	}
	return 0
}

func (x *Publication) GetOfferingDiscountExpiredAt() string {
	if x != nil && x.OfferingDiscountExpiredAt != nil {
		return *x.OfferingDiscountExpiredAt
	}
	return ""
}

func (x *Publication) GetOfferingType() Publication_OfferingType {
	if x != nil && x.OfferingType != nil {
		return *x.OfferingType
	}
	return Publication_OFFERING_TYPE_UNKNOWN_UNSPECIFIED
}

func (x *Publication) GetVideoUrl() string {
	if x != nil && x.VideoUrl != nil {
		return *x.VideoUrl
	}
	return ""
}

func (x *Publication) GetShortVideoUrl() string {
	if x != nil && x.ShortVideoUrl != nil {
		return *x.ShortVideoUrl
	}
	return ""
}

func (x *Publication) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Publication) GetMentionedPublications() []int64 {
	if x != nil {
		return x.MentionedPublications
	}
	return nil
}

func (x *Publication) GetMentionedAccounts() []int64 {
	if x != nil {
		return x.MentionedAccounts
	}
	return nil
}

func (x *Publication) GetMentionedGroups() []int64 {
	if x != nil {
		return x.MentionedGroups
	}
	return nil
}

func (x *Publication) GetMentionedChannels() []int64 {
	if x != nil {
		return x.MentionedChannels
	}
	return nil
}

func (x *Publication) GetPollOptions() []*Publication_PollOption {
	if x != nil {
		return x.PollOptions
	}
	return nil
}

func (x *Publication) GetIsPollAnonymous() bool {
	if x != nil && x.IsPollAnonymous != nil {
		return *x.IsPollAnonymous
	}
	return false
}

func (x *Publication) GetLocation() *v1.Geolocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Publication) GetEventScheduledAt() string {
	if x != nil && x.EventScheduledAt != nil {
		return *x.EventScheduledAt
	}
	return ""
}

type Publication_PollOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OptionName     string  `protobuf:"bytes,2,opt,name=option_name,json=optionName,proto3" json:"option_name,omitempty"`
	PollId         int64   `protobuf:"varint,3,opt,name=poll_id,json=pollId,proto3" json:"poll_id,omitempty"`
	VotesCount     int64   `protobuf:"varint,4,opt,name=votes_count,json=votesCount,proto3" json:"votes_count,omitempty"`
	CreatedAt      string  `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	LastModifiedAt *string `protobuf:"bytes,6,opt,name=last_modified_at,json=lastModifiedAt,proto3,oneof" json:"last_modified_at,omitempty"`
}

func (x *Publication_PollOption) Reset() {
	*x = Publication_PollOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networknode_v1_publication_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Publication_PollOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Publication_PollOption) ProtoMessage() {}

func (x *Publication_PollOption) ProtoReflect() protoreflect.Message {
	mi := &file_networknode_v1_publication_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Publication_PollOption.ProtoReflect.Descriptor instead.
func (*Publication_PollOption) Descriptor() ([]byte, []int) {
	return file_networknode_v1_publication_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Publication_PollOption) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Publication_PollOption) GetOptionName() string {
	if x != nil {
		return x.OptionName
	}
	return ""
}

func (x *Publication_PollOption) GetPollId() int64 {
	if x != nil {
		return x.PollId
	}
	return 0
}

func (x *Publication_PollOption) GetVotesCount() int64 {
	if x != nil {
		return x.VotesCount
	}
	return 0
}

func (x *Publication_PollOption) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Publication_PollOption) GetLastModifiedAt() string {
	if x != nil && x.LastModifiedAt != nil {
		return *x.LastModifiedAt
	}
	return ""
}

var File_networknode_v1_publication_proto protoreflect.FileDescriptor

var file_networknode_v1_publication_proto_rawDesc = []byte{
	0x0a, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x76, 0x31, 0x1a, 0x1b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65,
	0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xc8, 0x13, 0x0a, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2d,
	0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x37, 0x0a, 0x15, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x05, 0x52, 0x13, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x07, 0x52, 0x0d, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x08, 0x52, 0x0c, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x1a, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x09, 0x52, 0x18, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x4a,
	0x0a, 0x1f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0a, 0x52, 0x1c, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x1b, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x0b, 0x52, 0x18, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44,
	0x0a, 0x1c, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x19, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x48, 0x0d, 0x52, 0x0c, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x08, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x16, 0x6d,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x03, 0x52, 0x15, 0x6d, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x03, 0x52, 0x11,
	0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x2d, 0x0a, 0x12,
	0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x03, 0x52, 0x11, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x49, 0x0a, 0x0c, 0x70,
	0x6f, 0x6c, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50,
	0x6f, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x6c, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x70, 0x6f, 0x6c,
	0x6c, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x10, 0x52, 0x0f, 0x69, 0x73, 0x50, 0x6f, 0x6c, 0x6c, 0x41, 0x6e, 0x6f, 0x6e, 0x79,
	0x6d, 0x6f, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x11, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x10,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x1a, 0xda, 0x01, 0x0a, 0x0a, 0x50, 0x6f, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x76, 0x6f, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x10,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x22, 0xab, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x4c, 0x42, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56,
	0x49, 0x44, 0x45, 0x4f, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x48, 0x4f, 0x52, 0x54, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x4c, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x22, 0x9c,
	0x01, 0x0a, 0x0c, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x25, 0x0a, 0x21, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x49,
	0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x01, 0x12, 0x18,
	0x0a, 0x14, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f,
	0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x46, 0x46, 0x45,
	0x52, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4b, 0x49, 0x4c, 0x4f, 0x47, 0x52,
	0x41, 0x4d, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x49, 0x4e, 0x47,
	0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x50, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x22, 0x6d, 0x0a,
	0x0c, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a,
	0x21, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x49, 0x4e, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12,
	0x1b, 0x0a, 0x17, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x44, 0x49, 0x54, 0x59, 0x10, 0x02, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x42, 0x1e, 0x0a, 0x1c, 0x5f,
	0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x1f, 0x0a, 0x1d, 0x5f,
	0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x75, 0x72, 0x6c,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x69, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x61, 0x6e, 0x6f,
	0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0xbc, 0x01, 0x0a, 0x12, 0x63,
	0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76,
	0x31, 0x42, 0x10, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x65, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x6f, 0x73, 0x2d, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x6e, 0x6f, 0x64, 0x65, 0x2f,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x4e, 0x58, 0x58, 0xaa, 0x02, 0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x6e, 0x6f, 0x64, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1a, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x6e, 0x6f, 0x64, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x6e, 0x6f, 0x64, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_networknode_v1_publication_proto_rawDescOnce sync.Once
	file_networknode_v1_publication_proto_rawDescData = file_networknode_v1_publication_proto_rawDesc
)

func file_networknode_v1_publication_proto_rawDescGZIP() []byte {
	file_networknode_v1_publication_proto_rawDescOnce.Do(func() {
		file_networknode_v1_publication_proto_rawDescData = protoimpl.X.CompressGZIP(file_networknode_v1_publication_proto_rawDescData)
	})
	return file_networknode_v1_publication_proto_rawDescData
}

var file_networknode_v1_publication_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_networknode_v1_publication_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_networknode_v1_publication_proto_goTypes = []any{
	(Publication_Type)(0),          // 0: networknode.v1.Publication.Type
	(Publication_OfferingUnit)(0),  // 1: networknode.v1.Publication.OfferingUnit
	(Publication_OfferingType)(0),  // 2: networknode.v1.Publication.OfferingType
	(*Publication)(nil),            // 3: networknode.v1.Publication
	(*Publication_PollOption)(nil), // 4: networknode.v1.Publication.PollOption
	(*v1.Geolocation)(nil),         // 5: common.v1.Geolocation
}
var file_networknode_v1_publication_proto_depIdxs = []int32{
	0, // 0: networknode.v1.Publication.type:type_name -> networknode.v1.Publication.Type
	1, // 1: networknode.v1.Publication.offering_unit:type_name -> networknode.v1.Publication.OfferingUnit
	2, // 2: networknode.v1.Publication.offering_type:type_name -> networknode.v1.Publication.OfferingType
	4, // 3: networknode.v1.Publication.poll_options:type_name -> networknode.v1.Publication.PollOption
	5, // 4: networknode.v1.Publication.location:type_name -> common.v1.Geolocation
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_networknode_v1_publication_proto_init() }
func file_networknode_v1_publication_proto_init() {
	if File_networknode_v1_publication_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_networknode_v1_publication_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Publication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networknode_v1_publication_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Publication_PollOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_networknode_v1_publication_proto_msgTypes[0].OneofWrappers = []any{}
	file_networknode_v1_publication_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_networknode_v1_publication_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_networknode_v1_publication_proto_goTypes,
		DependencyIndexes: file_networknode_v1_publication_proto_depIdxs,
		EnumInfos:         file_networknode_v1_publication_proto_enumTypes,
		MessageInfos:      file_networknode_v1_publication_proto_msgTypes,
	}.Build()
	File_networknode_v1_publication_proto = out.File
	file_networknode_v1_publication_proto_rawDesc = nil
	file_networknode_v1_publication_proto_goTypes = nil
	file_networknode_v1_publication_proto_depIdxs = nil
}
