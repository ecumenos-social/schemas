// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: networkwarden/v1/network_warden_service.proto

package v1

import (
	v1 "github.com/ecumenos-social/schemas/proto/gen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NetworkWardenServiceConfirmationApproach int32

const (
	NetworkWardenServiceConfirmationApproach_NETWORK_WARDEN_SERVICE_CONFIRMATION_APPROACH_UNKNOWN_UNSPECIFIED NetworkWardenServiceConfirmationApproach = 0
	NetworkWardenServiceConfirmationApproach_NETWORK_WARDEN_SERVICE_CONFIRMATION_APPROACH_PHONE_NUMBER        NetworkWardenServiceConfirmationApproach = 1
	NetworkWardenServiceConfirmationApproach_NETWORK_WARDEN_SERVICE_CONFIRMATION_APPROACH_EMAIL               NetworkWardenServiceConfirmationApproach = 2
)

// Enum value maps for NetworkWardenServiceConfirmationApproach.
var (
	NetworkWardenServiceConfirmationApproach_name = map[int32]string{
		0: "NETWORK_WARDEN_SERVICE_CONFIRMATION_APPROACH_UNKNOWN_UNSPECIFIED",
		1: "NETWORK_WARDEN_SERVICE_CONFIRMATION_APPROACH_PHONE_NUMBER",
		2: "NETWORK_WARDEN_SERVICE_CONFIRMATION_APPROACH_EMAIL",
	}
	NetworkWardenServiceConfirmationApproach_value = map[string]int32{
		"NETWORK_WARDEN_SERVICE_CONFIRMATION_APPROACH_UNKNOWN_UNSPECIFIED": 0,
		"NETWORK_WARDEN_SERVICE_CONFIRMATION_APPROACH_PHONE_NUMBER":        1,
		"NETWORK_WARDEN_SERVICE_CONFIRMATION_APPROACH_EMAIL":               2,
	}
)

func (x NetworkWardenServiceConfirmationApproach) Enum() *NetworkWardenServiceConfirmationApproach {
	p := new(NetworkWardenServiceConfirmationApproach)
	*p = x
	return p
}

func (x NetworkWardenServiceConfirmationApproach) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkWardenServiceConfirmationApproach) Descriptor() protoreflect.EnumDescriptor {
	return file_networkwarden_v1_network_warden_service_proto_enumTypes[0].Descriptor()
}

func (NetworkWardenServiceConfirmationApproach) Type() protoreflect.EnumType {
	return &file_networkwarden_v1_network_warden_service_proto_enumTypes[0]
}

func (x NetworkWardenServiceConfirmationApproach) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkWardenServiceConfirmationApproach.Descriptor instead.
func (NetworkWardenServiceConfirmationApproach) EnumDescriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{0}
}

type NetworkWardenServiceCheckEmailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Emails []string `protobuf:"bytes,1,rep,name=emails,proto3" json:"emails,omitempty"`
}

func (x *NetworkWardenServiceCheckEmailsRequest) Reset() {
	*x = NetworkWardenServiceCheckEmailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceCheckEmailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceCheckEmailsRequest) ProtoMessage() {}

func (x *NetworkWardenServiceCheckEmailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceCheckEmailsRequest.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceCheckEmailsRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{0}
}

func (x *NetworkWardenServiceCheckEmailsRequest) GetEmails() []string {
	if x != nil {
		return x.Emails
	}
	return nil
}

type NetworkWardenServiceCheckEmailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid   bool     `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Results []string `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *NetworkWardenServiceCheckEmailsResponse) Reset() {
	*x = NetworkWardenServiceCheckEmailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceCheckEmailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceCheckEmailsResponse) ProtoMessage() {}

func (x *NetworkWardenServiceCheckEmailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceCheckEmailsResponse.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceCheckEmailsResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{1}
}

func (x *NetworkWardenServiceCheckEmailsResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *NetworkWardenServiceCheckEmailsResponse) GetResults() []string {
	if x != nil {
		return x.Results
	}
	return nil
}

type NetworkWardenServiceCheckPhoneNumbersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumbers []string `protobuf:"bytes,1,rep,name=phone_numbers,json=phoneNumbers,proto3" json:"phone_numbers,omitempty"`
}

func (x *NetworkWardenServiceCheckPhoneNumbersRequest) Reset() {
	*x = NetworkWardenServiceCheckPhoneNumbersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceCheckPhoneNumbersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceCheckPhoneNumbersRequest) ProtoMessage() {}

func (x *NetworkWardenServiceCheckPhoneNumbersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceCheckPhoneNumbersRequest.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceCheckPhoneNumbersRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{2}
}

func (x *NetworkWardenServiceCheckPhoneNumbersRequest) GetPhoneNumbers() []string {
	if x != nil {
		return x.PhoneNumbers
	}
	return nil
}

type NetworkWardenServiceCheckPhoneNumbersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid   bool     `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Results []string `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *NetworkWardenServiceCheckPhoneNumbersResponse) Reset() {
	*x = NetworkWardenServiceCheckPhoneNumbersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceCheckPhoneNumbersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceCheckPhoneNumbersResponse) ProtoMessage() {}

func (x *NetworkWardenServiceCheckPhoneNumbersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceCheckPhoneNumbersResponse.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceCheckPhoneNumbersResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{3}
}

func (x *NetworkWardenServiceCheckPhoneNumbersResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *NetworkWardenServiceCheckPhoneNumbersResponse) GetResults() []string {
	if x != nil {
		return x.Results
	}
	return nil
}

type NetworkWardenServiceRegisterHolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteMacAddress *string  `protobuf:"bytes,1,opt,name=remote_mac_address,json=remoteMacAddress,proto3,oneof" json:"remote_mac_address,omitempty"`
	Emails           []string `protobuf:"bytes,2,rep,name=emails,proto3" json:"emails,omitempty"`
	PhoneNumbers     []string `protobuf:"bytes,3,rep,name=phone_numbers,json=phoneNumbers,proto3" json:"phone_numbers,omitempty"`
	AvatarImageUrl   *string  `protobuf:"bytes,4,opt,name=avatar_image_url,json=avatarImageUrl,proto3,oneof" json:"avatar_image_url,omitempty"`
	Countries        []string `protobuf:"bytes,5,rep,name=countries,proto3" json:"countries,omitempty"`
	Languages        []string `protobuf:"bytes,6,rep,name=languages,proto3" json:"languages,omitempty"`
	Password         string   `protobuf:"bytes,7,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *NetworkWardenServiceRegisterHolderRequest) Reset() {
	*x = NetworkWardenServiceRegisterHolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceRegisterHolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceRegisterHolderRequest) ProtoMessage() {}

func (x *NetworkWardenServiceRegisterHolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceRegisterHolderRequest.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceRegisterHolderRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{4}
}

func (x *NetworkWardenServiceRegisterHolderRequest) GetRemoteMacAddress() string {
	if x != nil && x.RemoteMacAddress != nil {
		return *x.RemoteMacAddress
	}
	return ""
}

func (x *NetworkWardenServiceRegisterHolderRequest) GetEmails() []string {
	if x != nil {
		return x.Emails
	}
	return nil
}

func (x *NetworkWardenServiceRegisterHolderRequest) GetPhoneNumbers() []string {
	if x != nil {
		return x.PhoneNumbers
	}
	return nil
}

func (x *NetworkWardenServiceRegisterHolderRequest) GetAvatarImageUrl() string {
	if x != nil && x.AvatarImageUrl != nil {
		return *x.AvatarImageUrl
	}
	return ""
}

func (x *NetworkWardenServiceRegisterHolderRequest) GetCountries() []string {
	if x != nil {
		return x.Countries
	}
	return nil
}

func (x *NetworkWardenServiceRegisterHolderRequest) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *NetworkWardenServiceRegisterHolderRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type NetworkWardenServiceRegisterHolderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token                string                                   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	RefreshToken         string                                   `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	ConfirmationApproach NetworkWardenServiceConfirmationApproach `protobuf:"varint,3,opt,name=confirmation_approach,json=confirmationApproach,proto3,enum=networkwarden.v1.NetworkWardenServiceConfirmationApproach" json:"confirmation_approach,omitempty"`
}

func (x *NetworkWardenServiceRegisterHolderResponse) Reset() {
	*x = NetworkWardenServiceRegisterHolderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceRegisterHolderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceRegisterHolderResponse) ProtoMessage() {}

func (x *NetworkWardenServiceRegisterHolderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceRegisterHolderResponse.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceRegisterHolderResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{5}
}

func (x *NetworkWardenServiceRegisterHolderResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *NetworkWardenServiceRegisterHolderResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *NetworkWardenServiceRegisterHolderResponse) GetConfirmationApproach() NetworkWardenServiceConfirmationApproach {
	if x != nil {
		return x.ConfirmationApproach
	}
	return NetworkWardenServiceConfirmationApproach_NETWORK_WARDEN_SERVICE_CONFIRMATION_APPROACH_UNKNOWN_UNSPECIFIED
}

type NetworkWardenServiceConfirmHolderRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteMacAddress *string `protobuf:"bytes,1,opt,name=remote_mac_address,json=remoteMacAddress,proto3,oneof" json:"remote_mac_address,omitempty"`
	Token            string  `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	ConfirmationCode string  `protobuf:"bytes,3,opt,name=confirmation_code,json=confirmationCode,proto3" json:"confirmation_code,omitempty"`
}

func (x *NetworkWardenServiceConfirmHolderRegistrationRequest) Reset() {
	*x = NetworkWardenServiceConfirmHolderRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceConfirmHolderRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceConfirmHolderRegistrationRequest) ProtoMessage() {}

func (x *NetworkWardenServiceConfirmHolderRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceConfirmHolderRegistrationRequest.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceConfirmHolderRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{6}
}

func (x *NetworkWardenServiceConfirmHolderRegistrationRequest) GetRemoteMacAddress() string {
	if x != nil && x.RemoteMacAddress != nil {
		return *x.RemoteMacAddress
	}
	return ""
}

func (x *NetworkWardenServiceConfirmHolderRegistrationRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *NetworkWardenServiceConfirmHolderRegistrationRequest) GetConfirmationCode() string {
	if x != nil {
		return x.ConfirmationCode
	}
	return ""
}

type NetworkWardenServiceConfirmHolderRegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *NetworkWardenServiceConfirmHolderRegistrationResponse) Reset() {
	*x = NetworkWardenServiceConfirmHolderRegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceConfirmHolderRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceConfirmHolderRegistrationResponse) ProtoMessage() {}

func (x *NetworkWardenServiceConfirmHolderRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceConfirmHolderRegistrationResponse.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceConfirmHolderRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{7}
}

func (x *NetworkWardenServiceConfirmHolderRegistrationResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type NetworkWardenServiceResendConfirmationCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteMacAddress     *string                                  `protobuf:"bytes,1,opt,name=remote_mac_address,json=remoteMacAddress,proto3,oneof" json:"remote_mac_address,omitempty"`
	Token                string                                   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	ConfirmationApproach NetworkWardenServiceConfirmationApproach `protobuf:"varint,3,opt,name=confirmation_approach,json=confirmationApproach,proto3,enum=networkwarden.v1.NetworkWardenServiceConfirmationApproach" json:"confirmation_approach,omitempty"`
}

func (x *NetworkWardenServiceResendConfirmationCodeRequest) Reset() {
	*x = NetworkWardenServiceResendConfirmationCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceResendConfirmationCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceResendConfirmationCodeRequest) ProtoMessage() {}

func (x *NetworkWardenServiceResendConfirmationCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceResendConfirmationCodeRequest.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceResendConfirmationCodeRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{8}
}

func (x *NetworkWardenServiceResendConfirmationCodeRequest) GetRemoteMacAddress() string {
	if x != nil && x.RemoteMacAddress != nil {
		return *x.RemoteMacAddress
	}
	return ""
}

func (x *NetworkWardenServiceResendConfirmationCodeRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *NetworkWardenServiceResendConfirmationCodeRequest) GetConfirmationApproach() NetworkWardenServiceConfirmationApproach {
	if x != nil {
		return x.ConfirmationApproach
	}
	return NetworkWardenServiceConfirmationApproach_NETWORK_WARDEN_SERVICE_CONFIRMATION_APPROACH_UNKNOWN_UNSPECIFIED
}

type NetworkWardenServiceResendConfirmationCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *NetworkWardenServiceResendConfirmationCodeResponse) Reset() {
	*x = NetworkWardenServiceResendConfirmationCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceResendConfirmationCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceResendConfirmationCodeResponse) ProtoMessage() {}

func (x *NetworkWardenServiceResendConfirmationCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceResendConfirmationCodeResponse.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceResendConfirmationCodeResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{9}
}

func (x *NetworkWardenServiceResendConfirmationCodeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type NetworkWardenServiceLoginHolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteMacAddress *string `protobuf:"bytes,1,opt,name=remote_mac_address,json=remoteMacAddress,proto3,oneof" json:"remote_mac_address,omitempty"`
	Email            string  `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	PhoneNumber      string  `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Password         string  `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *NetworkWardenServiceLoginHolderRequest) Reset() {
	*x = NetworkWardenServiceLoginHolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceLoginHolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceLoginHolderRequest) ProtoMessage() {}

func (x *NetworkWardenServiceLoginHolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceLoginHolderRequest.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceLoginHolderRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{10}
}

func (x *NetworkWardenServiceLoginHolderRequest) GetRemoteMacAddress() string {
	if x != nil && x.RemoteMacAddress != nil {
		return *x.RemoteMacAddress
	}
	return ""
}

func (x *NetworkWardenServiceLoginHolderRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *NetworkWardenServiceLoginHolderRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *NetworkWardenServiceLoginHolderRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type NetworkWardenServiceLoginHolderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token        string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	RefreshToken string `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
}

func (x *NetworkWardenServiceLoginHolderResponse) Reset() {
	*x = NetworkWardenServiceLoginHolderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceLoginHolderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceLoginHolderResponse) ProtoMessage() {}

func (x *NetworkWardenServiceLoginHolderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceLoginHolderResponse.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceLoginHolderResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{11}
}

func (x *NetworkWardenServiceLoginHolderResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *NetworkWardenServiceLoginHolderResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type NetworkWardenServiceLogoutHolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteMacAddress *string `protobuf:"bytes,1,opt,name=remote_mac_address,json=remoteMacAddress,proto3,oneof" json:"remote_mac_address,omitempty"`
	Token            string  `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *NetworkWardenServiceLogoutHolderRequest) Reset() {
	*x = NetworkWardenServiceLogoutHolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceLogoutHolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceLogoutHolderRequest) ProtoMessage() {}

func (x *NetworkWardenServiceLogoutHolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceLogoutHolderRequest.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceLogoutHolderRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{12}
}

func (x *NetworkWardenServiceLogoutHolderRequest) GetRemoteMacAddress() string {
	if x != nil && x.RemoteMacAddress != nil {
		return *x.RemoteMacAddress
	}
	return ""
}

func (x *NetworkWardenServiceLogoutHolderRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type NetworkWardenServiceLogoutHolderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *NetworkWardenServiceLogoutHolderResponse) Reset() {
	*x = NetworkWardenServiceLogoutHolderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceLogoutHolderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceLogoutHolderResponse) ProtoMessage() {}

func (x *NetworkWardenServiceLogoutHolderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceLogoutHolderResponse.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceLogoutHolderResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{13}
}

func (x *NetworkWardenServiceLogoutHolderResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type NetworkWardenServiceRefreshHolderTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteMacAddress *string `protobuf:"bytes,1,opt,name=remote_mac_address,json=remoteMacAddress,proto3,oneof" json:"remote_mac_address,omitempty"`
	RefreshToken     string  `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
}

func (x *NetworkWardenServiceRefreshHolderTokenRequest) Reset() {
	*x = NetworkWardenServiceRefreshHolderTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceRefreshHolderTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceRefreshHolderTokenRequest) ProtoMessage() {}

func (x *NetworkWardenServiceRefreshHolderTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceRefreshHolderTokenRequest.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceRefreshHolderTokenRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{14}
}

func (x *NetworkWardenServiceRefreshHolderTokenRequest) GetRemoteMacAddress() string {
	if x != nil && x.RemoteMacAddress != nil {
		return *x.RemoteMacAddress
	}
	return ""
}

func (x *NetworkWardenServiceRefreshHolderTokenRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type NetworkWardenServiceRefreshHolderTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token        string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	RefreshToken string `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
}

func (x *NetworkWardenServiceRefreshHolderTokenResponse) Reset() {
	*x = NetworkWardenServiceRefreshHolderTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceRefreshHolderTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceRefreshHolderTokenResponse) ProtoMessage() {}

func (x *NetworkWardenServiceRefreshHolderTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceRefreshHolderTokenResponse.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceRefreshHolderTokenResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{15}
}

func (x *NetworkWardenServiceRefreshHolderTokenResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *NetworkWardenServiceRefreshHolderTokenResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type NetworkWardenServiceChangeHolderPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteMacAddress *string `protobuf:"bytes,1,opt,name=remote_mac_address,json=remoteMacAddress,proto3,oneof" json:"remote_mac_address,omitempty"`
	Token            string  `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Password         string  `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	NewPassword      string  `protobuf:"bytes,4,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"`
}

func (x *NetworkWardenServiceChangeHolderPasswordRequest) Reset() {
	*x = NetworkWardenServiceChangeHolderPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceChangeHolderPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceChangeHolderPasswordRequest) ProtoMessage() {}

func (x *NetworkWardenServiceChangeHolderPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceChangeHolderPasswordRequest.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceChangeHolderPasswordRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{16}
}

func (x *NetworkWardenServiceChangeHolderPasswordRequest) GetRemoteMacAddress() string {
	if x != nil && x.RemoteMacAddress != nil {
		return *x.RemoteMacAddress
	}
	return ""
}

func (x *NetworkWardenServiceChangeHolderPasswordRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *NetworkWardenServiceChangeHolderPasswordRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *NetworkWardenServiceChangeHolderPasswordRequest) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

type NetworkWardenServiceChangeHolderPasswordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *NetworkWardenServiceChangeHolderPasswordResponse) Reset() {
	*x = NetworkWardenServiceChangeHolderPasswordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceChangeHolderPasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceChangeHolderPasswordResponse) ProtoMessage() {}

func (x *NetworkWardenServiceChangeHolderPasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceChangeHolderPasswordResponse.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceChangeHolderPasswordResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{17}
}

func (x *NetworkWardenServiceChangeHolderPasswordResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type NetworkWardenServiceModifyHolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteMacAddress *string  `protobuf:"bytes,1,opt,name=remote_mac_address,json=remoteMacAddress,proto3,oneof" json:"remote_mac_address,omitempty"`
	Token            string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	AvatarImageUrl   *string  `protobuf:"bytes,3,opt,name=avatar_image_url,json=avatarImageUrl,proto3,oneof" json:"avatar_image_url,omitempty"`
	Countries        []string `protobuf:"bytes,4,rep,name=countries,proto3" json:"countries,omitempty"`
	Languages        []string `protobuf:"bytes,5,rep,name=languages,proto3" json:"languages,omitempty"`
}

func (x *NetworkWardenServiceModifyHolderRequest) Reset() {
	*x = NetworkWardenServiceModifyHolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceModifyHolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceModifyHolderRequest) ProtoMessage() {}

func (x *NetworkWardenServiceModifyHolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceModifyHolderRequest.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceModifyHolderRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{18}
}

func (x *NetworkWardenServiceModifyHolderRequest) GetRemoteMacAddress() string {
	if x != nil && x.RemoteMacAddress != nil {
		return *x.RemoteMacAddress
	}
	return ""
}

func (x *NetworkWardenServiceModifyHolderRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *NetworkWardenServiceModifyHolderRequest) GetAvatarImageUrl() string {
	if x != nil && x.AvatarImageUrl != nil {
		return *x.AvatarImageUrl
	}
	return ""
}

func (x *NetworkWardenServiceModifyHolderRequest) GetCountries() []string {
	if x != nil {
		return x.Countries
	}
	return nil
}

func (x *NetworkWardenServiceModifyHolderRequest) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

type NetworkWardenServiceModifyHolderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *NetworkWardenServiceModifyHolderResponse) Reset() {
	*x = NetworkWardenServiceModifyHolderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceModifyHolderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceModifyHolderResponse) ProtoMessage() {}

func (x *NetworkWardenServiceModifyHolderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceModifyHolderResponse.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceModifyHolderResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{19}
}

func (x *NetworkWardenServiceModifyHolderResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type NetworkWardenServiceGetHolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteMacAddress *string `protobuf:"bytes,1,opt,name=remote_mac_address,json=remoteMacAddress,proto3,oneof" json:"remote_mac_address,omitempty"`
	Token            string  `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	HolderId         string  `protobuf:"bytes,3,opt,name=holder_id,json=holderId,proto3" json:"holder_id,omitempty"`
}

func (x *NetworkWardenServiceGetHolderRequest) Reset() {
	*x = NetworkWardenServiceGetHolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceGetHolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceGetHolderRequest) ProtoMessage() {}

func (x *NetworkWardenServiceGetHolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceGetHolderRequest.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceGetHolderRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{20}
}

func (x *NetworkWardenServiceGetHolderRequest) GetRemoteMacAddress() string {
	if x != nil && x.RemoteMacAddress != nil {
		return *x.RemoteMacAddress
	}
	return ""
}

func (x *NetworkWardenServiceGetHolderRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *NetworkWardenServiceGetHolderRequest) GetHolderId() string {
	if x != nil {
		return x.HolderId
	}
	return ""
}

type NetworkWardenServiceGetHolderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Holder `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *NetworkWardenServiceGetHolderResponse) Reset() {
	*x = NetworkWardenServiceGetHolderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceGetHolderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceGetHolderResponse) ProtoMessage() {}

func (x *NetworkWardenServiceGetHolderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceGetHolderResponse.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceGetHolderResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{21}
}

func (x *NetworkWardenServiceGetHolderResponse) GetData() *Holder {
	if x != nil {
		return x.Data
	}
	return nil
}

type NetworkWardenServiceDeleteHolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteMacAddress *string `protobuf:"bytes,1,opt,name=remote_mac_address,json=remoteMacAddress,proto3,oneof" json:"remote_mac_address,omitempty"`
	Token            string  `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Password         string  `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *NetworkWardenServiceDeleteHolderRequest) Reset() {
	*x = NetworkWardenServiceDeleteHolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceDeleteHolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceDeleteHolderRequest) ProtoMessage() {}

func (x *NetworkWardenServiceDeleteHolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceDeleteHolderRequest.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceDeleteHolderRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{22}
}

func (x *NetworkWardenServiceDeleteHolderRequest) GetRemoteMacAddress() string {
	if x != nil && x.RemoteMacAddress != nil {
		return *x.RemoteMacAddress
	}
	return ""
}

func (x *NetworkWardenServiceDeleteHolderRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *NetworkWardenServiceDeleteHolderRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type NetworkWardenServiceDeleteHolderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *NetworkWardenServiceDeleteHolderResponse) Reset() {
	*x = NetworkWardenServiceDeleteHolderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceDeleteHolderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceDeleteHolderResponse) ProtoMessage() {}

func (x *NetworkWardenServiceDeleteHolderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceDeleteHolderResponse.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceDeleteHolderResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{23}
}

func (x *NetworkWardenServiceDeleteHolderResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type NetworkWardenServiceGetPersonalDataNodesListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteMacAddress *string        `protobuf:"bytes,1,opt,name=remote_mac_address,json=remoteMacAddress,proto3,oneof" json:"remote_mac_address,omitempty"`
	Token            *string        `protobuf:"bytes,2,opt,name=token,proto3,oneof" json:"token,omitempty"`
	OnlyMy           *bool          `protobuf:"varint,3,opt,name=only_my,json=onlyMy,proto3,oneof" json:"only_my,omitempty"`
	Pagination       *v1.Pagination `protobuf:"bytes,4,opt,name=pagination,proto3,oneof" json:"pagination,omitempty"`
}

func (x *NetworkWardenServiceGetPersonalDataNodesListRequest) Reset() {
	*x = NetworkWardenServiceGetPersonalDataNodesListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceGetPersonalDataNodesListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceGetPersonalDataNodesListRequest) ProtoMessage() {}

func (x *NetworkWardenServiceGetPersonalDataNodesListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceGetPersonalDataNodesListRequest.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceGetPersonalDataNodesListRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{24}
}

func (x *NetworkWardenServiceGetPersonalDataNodesListRequest) GetRemoteMacAddress() string {
	if x != nil && x.RemoteMacAddress != nil {
		return *x.RemoteMacAddress
	}
	return ""
}

func (x *NetworkWardenServiceGetPersonalDataNodesListRequest) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *NetworkWardenServiceGetPersonalDataNodesListRequest) GetOnlyMy() bool {
	if x != nil && x.OnlyMy != nil {
		return *x.OnlyMy
	}
	return false
}

func (x *NetworkWardenServiceGetPersonalDataNodesListRequest) GetPagination() *v1.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type NetworkWardenServiceGetPersonalDataNodesListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*PersonalDataNode `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *NetworkWardenServiceGetPersonalDataNodesListResponse) Reset() {
	*x = NetworkWardenServiceGetPersonalDataNodesListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceGetPersonalDataNodesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceGetPersonalDataNodesListResponse) ProtoMessage() {}

func (x *NetworkWardenServiceGetPersonalDataNodesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceGetPersonalDataNodesListResponse.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceGetPersonalDataNodesListResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{25}
}

func (x *NetworkWardenServiceGetPersonalDataNodesListResponse) GetData() []*PersonalDataNode {
	if x != nil {
		return x.Data
	}
	return nil
}

type NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteMacAddress string          `protobuf:"bytes,1,opt,name=remote_mac_address,json=remoteMacAddress,proto3" json:"remote_mac_address,omitempty"`
	Token            string          `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Url              string          `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Name             string          `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Label            string          `protobuf:"bytes,5,opt,name=label,proto3" json:"label,omitempty"`
	Description      string          `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Location         *v1.Geolocation `protobuf:"bytes,7,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequest) Reset() {
	*x = NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequest) ProtoMessage() {}

func (x *NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequest.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{26}
}

func (x *NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequest) GetRemoteMacAddress() string {
	if x != nil {
		return x.RemoteMacAddress
	}
	return ""
}

func (x *NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequest) GetLocation() *v1.Geolocation {
	if x != nil {
		return x.Location
	}
	return nil
}

type NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponse) Reset() {
	*x = NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponse) ProtoMessage() {}

func (x *NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponse.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{27}
}

func (x *NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type NetworkWardenServiceActivatePersonalDataNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteMacAddress string `protobuf:"bytes,1,opt,name=remote_mac_address,json=remoteMacAddress,proto3" json:"remote_mac_address,omitempty"`
	Token            string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Id               string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NetworkWardenServiceActivatePersonalDataNodeRequest) Reset() {
	*x = NetworkWardenServiceActivatePersonalDataNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceActivatePersonalDataNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceActivatePersonalDataNodeRequest) ProtoMessage() {}

func (x *NetworkWardenServiceActivatePersonalDataNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceActivatePersonalDataNodeRequest.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceActivatePersonalDataNodeRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{28}
}

func (x *NetworkWardenServiceActivatePersonalDataNodeRequest) GetRemoteMacAddress() string {
	if x != nil {
		return x.RemoteMacAddress
	}
	return ""
}

func (x *NetworkWardenServiceActivatePersonalDataNodeRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *NetworkWardenServiceActivatePersonalDataNodeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type NetworkWardenServiceActivatePersonalDataNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ApiKey  string `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *NetworkWardenServiceActivatePersonalDataNodeResponse) Reset() {
	*x = NetworkWardenServiceActivatePersonalDataNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceActivatePersonalDataNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceActivatePersonalDataNodeResponse) ProtoMessage() {}

func (x *NetworkWardenServiceActivatePersonalDataNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceActivatePersonalDataNodeResponse.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceActivatePersonalDataNodeResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{29}
}

func (x *NetworkWardenServiceActivatePersonalDataNodeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *NetworkWardenServiceActivatePersonalDataNodeResponse) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

type NetworkWardenServiceInitiatePersonalDataNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKey               string        `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	AccountsCapacity     int64         `protobuf:"varint,2,opt,name=accounts_capacity,json=accountsCapacity,proto3" json:"accounts_capacity,omitempty"`
	IsOpen               bool          `protobuf:"varint,3,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	IsInviteCodeRequired bool          `protobuf:"varint,4,opt,name=is_invite_code_required,json=isInviteCodeRequired,proto3" json:"is_invite_code_required,omitempty"`
	Version              string        `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	RateLimit            *v1.RateLimit `protobuf:"bytes,6,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
	CrawlRateLimit       *v1.RateLimit `protobuf:"bytes,7,opt,name=crawl_rate_limit,json=crawlRateLimit,proto3" json:"crawl_rate_limit,omitempty"`
	IdGenNode            int64         `protobuf:"varint,8,opt,name=id_gen_node,json=idGenNode,proto3" json:"id_gen_node,omitempty"`
}

func (x *NetworkWardenServiceInitiatePersonalDataNodeRequest) Reset() {
	*x = NetworkWardenServiceInitiatePersonalDataNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceInitiatePersonalDataNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceInitiatePersonalDataNodeRequest) ProtoMessage() {}

func (x *NetworkWardenServiceInitiatePersonalDataNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceInitiatePersonalDataNodeRequest.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceInitiatePersonalDataNodeRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{30}
}

func (x *NetworkWardenServiceInitiatePersonalDataNodeRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *NetworkWardenServiceInitiatePersonalDataNodeRequest) GetAccountsCapacity() int64 {
	if x != nil {
		return x.AccountsCapacity
	}
	return 0
}

func (x *NetworkWardenServiceInitiatePersonalDataNodeRequest) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *NetworkWardenServiceInitiatePersonalDataNodeRequest) GetIsInviteCodeRequired() bool {
	if x != nil {
		return x.IsInviteCodeRequired
	}
	return false
}

func (x *NetworkWardenServiceInitiatePersonalDataNodeRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *NetworkWardenServiceInitiatePersonalDataNodeRequest) GetRateLimit() *v1.RateLimit {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

func (x *NetworkWardenServiceInitiatePersonalDataNodeRequest) GetCrawlRateLimit() *v1.RateLimit {
	if x != nil {
		return x.CrawlRateLimit
	}
	return nil
}

func (x *NetworkWardenServiceInitiatePersonalDataNodeRequest) GetIdGenNode() int64 {
	if x != nil {
		return x.IdGenNode
	}
	return 0
}

type NetworkWardenServiceInitiatePersonalDataNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *NetworkWardenServiceInitiatePersonalDataNodeResponse) Reset() {
	*x = NetworkWardenServiceInitiatePersonalDataNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceInitiatePersonalDataNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceInitiatePersonalDataNodeResponse) ProtoMessage() {}

func (x *NetworkWardenServiceInitiatePersonalDataNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceInitiatePersonalDataNodeResponse.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceInitiatePersonalDataNodeResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{31}
}

func (x *NetworkWardenServiceInitiatePersonalDataNodeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type NetworkWardenServiceGetNetworkNodesListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteMacAddress *string        `protobuf:"bytes,1,opt,name=remote_mac_address,json=remoteMacAddress,proto3,oneof" json:"remote_mac_address,omitempty"`
	Token            *string        `protobuf:"bytes,2,opt,name=token,proto3,oneof" json:"token,omitempty"`
	OnlyMy           *bool          `protobuf:"varint,3,opt,name=only_my,json=onlyMy,proto3,oneof" json:"only_my,omitempty"`
	Pagination       *v1.Pagination `protobuf:"bytes,4,opt,name=pagination,proto3,oneof" json:"pagination,omitempty"`
}

func (x *NetworkWardenServiceGetNetworkNodesListRequest) Reset() {
	*x = NetworkWardenServiceGetNetworkNodesListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceGetNetworkNodesListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceGetNetworkNodesListRequest) ProtoMessage() {}

func (x *NetworkWardenServiceGetNetworkNodesListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceGetNetworkNodesListRequest.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceGetNetworkNodesListRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{32}
}

func (x *NetworkWardenServiceGetNetworkNodesListRequest) GetRemoteMacAddress() string {
	if x != nil && x.RemoteMacAddress != nil {
		return *x.RemoteMacAddress
	}
	return ""
}

func (x *NetworkWardenServiceGetNetworkNodesListRequest) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *NetworkWardenServiceGetNetworkNodesListRequest) GetOnlyMy() bool {
	if x != nil && x.OnlyMy != nil {
		return *x.OnlyMy
	}
	return false
}

func (x *NetworkWardenServiceGetNetworkNodesListRequest) GetPagination() *v1.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type NetworkWardenServiceGetNetworkNodesListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*NetworkNode `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *NetworkWardenServiceGetNetworkNodesListResponse) Reset() {
	*x = NetworkWardenServiceGetNetworkNodesListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceGetNetworkNodesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceGetNetworkNodesListResponse) ProtoMessage() {}

func (x *NetworkWardenServiceGetNetworkNodesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceGetNetworkNodesListResponse.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceGetNetworkNodesListResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{33}
}

func (x *NetworkWardenServiceGetNetworkNodesListResponse) GetData() []*NetworkNode {
	if x != nil {
		return x.Data
	}
	return nil
}

type NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteMacAddress string          `protobuf:"bytes,1,opt,name=remote_mac_address,json=remoteMacAddress,proto3" json:"remote_mac_address,omitempty"`
	Token            string          `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Url              string          `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Name             string          `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description      string          `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Location         *v1.Geolocation `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	DomainName       string          `protobuf:"bytes,7,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
}

func (x *NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequest) Reset() {
	*x = NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequest) ProtoMessage() {}

func (x *NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequest.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{34}
}

func (x *NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequest) GetRemoteMacAddress() string {
	if x != nil {
		return x.RemoteMacAddress
	}
	return ""
}

func (x *NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequest) GetLocation() *v1.Geolocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequest) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

type NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponse) Reset() {
	*x = NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponse) ProtoMessage() {}

func (x *NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponse.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{35}
}

func (x *NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type NetworkWardenServiceActivateNetworkNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteMacAddress string `protobuf:"bytes,1,opt,name=remote_mac_address,json=remoteMacAddress,proto3" json:"remote_mac_address,omitempty"`
	Token            string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Id               string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NetworkWardenServiceActivateNetworkNodeRequest) Reset() {
	*x = NetworkWardenServiceActivateNetworkNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceActivateNetworkNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceActivateNetworkNodeRequest) ProtoMessage() {}

func (x *NetworkWardenServiceActivateNetworkNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceActivateNetworkNodeRequest.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceActivateNetworkNodeRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{36}
}

func (x *NetworkWardenServiceActivateNetworkNodeRequest) GetRemoteMacAddress() string {
	if x != nil {
		return x.RemoteMacAddress
	}
	return ""
}

func (x *NetworkWardenServiceActivateNetworkNodeRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *NetworkWardenServiceActivateNetworkNodeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type NetworkWardenServiceActivateNetworkNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ApiKey  string `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *NetworkWardenServiceActivateNetworkNodeResponse) Reset() {
	*x = NetworkWardenServiceActivateNetworkNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceActivateNetworkNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceActivateNetworkNodeResponse) ProtoMessage() {}

func (x *NetworkWardenServiceActivateNetworkNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceActivateNetworkNodeResponse.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceActivateNetworkNodeResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{37}
}

func (x *NetworkWardenServiceActivateNetworkNodeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *NetworkWardenServiceActivateNetworkNodeResponse) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

type NetworkWardenServiceInitiateNetworkNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKey               string        `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	AccountsCapacity     int64         `protobuf:"varint,2,opt,name=accounts_capacity,json=accountsCapacity,proto3" json:"accounts_capacity,omitempty"`
	IsOpen               bool          `protobuf:"varint,3,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	IsInviteCodeRequired bool          `protobuf:"varint,4,opt,name=is_invite_code_required,json=isInviteCodeRequired,proto3" json:"is_invite_code_required,omitempty"`
	Version              string        `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	RateLimit            *v1.RateLimit `protobuf:"bytes,6,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
	CrawlRateLimit       *v1.RateLimit `protobuf:"bytes,7,opt,name=crawl_rate_limit,json=crawlRateLimit,proto3" json:"crawl_rate_limit,omitempty"`
	IdGenNode            int64         `protobuf:"varint,8,opt,name=id_gen_node,json=idGenNode,proto3" json:"id_gen_node,omitempty"`
}

func (x *NetworkWardenServiceInitiateNetworkNodeRequest) Reset() {
	*x = NetworkWardenServiceInitiateNetworkNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceInitiateNetworkNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceInitiateNetworkNodeRequest) ProtoMessage() {}

func (x *NetworkWardenServiceInitiateNetworkNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceInitiateNetworkNodeRequest.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceInitiateNetworkNodeRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{38}
}

func (x *NetworkWardenServiceInitiateNetworkNodeRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *NetworkWardenServiceInitiateNetworkNodeRequest) GetAccountsCapacity() int64 {
	if x != nil {
		return x.AccountsCapacity
	}
	return 0
}

func (x *NetworkWardenServiceInitiateNetworkNodeRequest) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *NetworkWardenServiceInitiateNetworkNodeRequest) GetIsInviteCodeRequired() bool {
	if x != nil {
		return x.IsInviteCodeRequired
	}
	return false
}

func (x *NetworkWardenServiceInitiateNetworkNodeRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *NetworkWardenServiceInitiateNetworkNodeRequest) GetRateLimit() *v1.RateLimit {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

func (x *NetworkWardenServiceInitiateNetworkNodeRequest) GetCrawlRateLimit() *v1.RateLimit {
	if x != nil {
		return x.CrawlRateLimit
	}
	return nil
}

func (x *NetworkWardenServiceInitiateNetworkNodeRequest) GetIdGenNode() int64 {
	if x != nil {
		return x.IdGenNode
	}
	return 0
}

type NetworkWardenServiceInitiateNetworkNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *NetworkWardenServiceInitiateNetworkNodeResponse) Reset() {
	*x = NetworkWardenServiceInitiateNetworkNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceInitiateNetworkNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceInitiateNetworkNodeResponse) ProtoMessage() {}

func (x *NetworkWardenServiceInitiateNetworkNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceInitiateNetworkNodeResponse.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceInitiateNetworkNodeResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{39}
}

func (x *NetworkWardenServiceInitiateNetworkNodeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type NetworkWardenServiceGetNetworkWardensListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteMacAddress *string        `protobuf:"bytes,1,opt,name=remote_mac_address,json=remoteMacAddress,proto3,oneof" json:"remote_mac_address,omitempty"`
	Pagination       *v1.Pagination `protobuf:"bytes,2,opt,name=pagination,proto3,oneof" json:"pagination,omitempty"`
}

func (x *NetworkWardenServiceGetNetworkWardensListRequest) Reset() {
	*x = NetworkWardenServiceGetNetworkWardensListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceGetNetworkWardensListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceGetNetworkWardensListRequest) ProtoMessage() {}

func (x *NetworkWardenServiceGetNetworkWardensListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceGetNetworkWardensListRequest.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceGetNetworkWardensListRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{40}
}

func (x *NetworkWardenServiceGetNetworkWardensListRequest) GetRemoteMacAddress() string {
	if x != nil && x.RemoteMacAddress != nil {
		return *x.RemoteMacAddress
	}
	return ""
}

func (x *NetworkWardenServiceGetNetworkWardensListRequest) GetPagination() *v1.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type NetworkWardenServiceGetNetworkWardensListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*NetworkWarden `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *NetworkWardenServiceGetNetworkWardensListResponse) Reset() {
	*x = NetworkWardenServiceGetNetworkWardensListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceGetNetworkWardensListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceGetNetworkWardensListResponse) ProtoMessage() {}

func (x *NetworkWardenServiceGetNetworkWardensListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceGetNetworkWardensListResponse.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceGetNetworkWardensListResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{41}
}

func (x *NetworkWardenServiceGetNetworkWardensListResponse) GetData() []*NetworkWarden {
	if x != nil {
		return x.Data
	}
	return nil
}

type NetworkWardenServiceRegisterNetworkWardenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string          `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Label       string          `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	PdnCapacity uint64          `protobuf:"varint,4,opt,name=pdn_capacity,json=pdnCapacity,proto3" json:"pdn_capacity,omitempty"`
	NnCapacity  uint64          `protobuf:"varint,5,opt,name=nn_capacity,json=nnCapacity,proto3" json:"nn_capacity,omitempty"`
	Location    *v1.Geolocation `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	IsOpen      bool            `protobuf:"varint,7,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	IdGenNode   int64           `protobuf:"varint,8,opt,name=id_gen_node,json=idGenNode,proto3" json:"id_gen_node,omitempty"`
	Url         string          `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`
	Version     string          `protobuf:"bytes,10,opt,name=version,proto3" json:"version,omitempty"`
	RateLimit   *v1.RateLimit   `protobuf:"bytes,11,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *NetworkWardenServiceRegisterNetworkWardenRequest) Reset() {
	*x = NetworkWardenServiceRegisterNetworkWardenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceRegisterNetworkWardenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceRegisterNetworkWardenRequest) ProtoMessage() {}

func (x *NetworkWardenServiceRegisterNetworkWardenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceRegisterNetworkWardenRequest.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceRegisterNetworkWardenRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{42}
}

func (x *NetworkWardenServiceRegisterNetworkWardenRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkWardenServiceRegisterNetworkWardenRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NetworkWardenServiceRegisterNetworkWardenRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *NetworkWardenServiceRegisterNetworkWardenRequest) GetPdnCapacity() uint64 {
	if x != nil {
		return x.PdnCapacity
	}
	return 0
}

func (x *NetworkWardenServiceRegisterNetworkWardenRequest) GetNnCapacity() uint64 {
	if x != nil {
		return x.NnCapacity
	}
	return 0
}

func (x *NetworkWardenServiceRegisterNetworkWardenRequest) GetLocation() *v1.Geolocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *NetworkWardenServiceRegisterNetworkWardenRequest) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *NetworkWardenServiceRegisterNetworkWardenRequest) GetIdGenNode() int64 {
	if x != nil {
		return x.IdGenNode
	}
	return 0
}

func (x *NetworkWardenServiceRegisterNetworkWardenRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *NetworkWardenServiceRegisterNetworkWardenRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *NetworkWardenServiceRegisterNetworkWardenRequest) GetRateLimit() *v1.RateLimit {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

type NetworkWardenServiceRegisterNetworkWardenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *NetworkWardenServiceRegisterNetworkWardenResponse) Reset() {
	*x = NetworkWardenServiceRegisterNetworkWardenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWardenServiceRegisterNetworkWardenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWardenServiceRegisterNetworkWardenResponse) ProtoMessage() {}

func (x *NetworkWardenServiceRegisterNetworkWardenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWardenServiceRegisterNetworkWardenResponse.ProtoReflect.Descriptor instead.
func (*NetworkWardenServiceRegisterNetworkWardenResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{43}
}

func (x *NetworkWardenServiceRegisterNetworkWardenResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_networkwarden_v1_network_warden_service_proto protoreflect.FileDescriptor

var file_networkwarden_v1_network_warden_service_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2f,
	0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x1a, 0x1b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x29, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x40, 0x0a, 0x26,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x59,
	0x0a, 0x27, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x53, 0x0a, 0x2c, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x5f,
	0x0a, 0x2d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22,
	0xce, 0x02, 0x0a, 0x29, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a,
	0x10, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x22, 0xd8, 0x01, 0x0a, 0x2a, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64,
	0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x6f, 0x0a, 0x15, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x61, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x61, 0x63, 0x68, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x22, 0xc3, 0x01, 0x0a, 0x34,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x48, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2b, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x51, 0x0a, 0x35, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64,
	0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x84, 0x02, 0x0a, 0x31, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x12, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x6f, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72,
	0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x52, 0x14,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x61, 0x63, 0x68, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x4e, 0x0a, 0x32, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x26,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x64, 0x0a, 0x27, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x27,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x44, 0x0a, 0x28, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x6f, 0x67, 0x6f, 0x75, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x9e, 0x01,
	0x0a, 0x2d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x48, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x6b,
	0x0a, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x48, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xd0, 0x01, 0x0a, 0x2f,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x4c,
	0x0a, 0x30, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x89, 0x02, 0x0a,
	0x27, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x48, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0x44, 0x0a, 0x28, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xa3,
	0x01, 0x0a, 0x24, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x55, 0x0a, 0x25, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57,
	0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x48,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x48,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa5, 0x01, 0x0a, 0x27,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x44, 0x0a, 0x28, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61,
	0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x99, 0x02, 0x0a, 0x33, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x07, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6d, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x02, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x79, 0x4d, 0x79, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f,
	0x6e, 0x6c, 0x79, 0x5f, 0x6d, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6e, 0x0a, 0x34, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9b, 0x02, 0x0a, 0x43, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4a, 0x6f,
	0x69, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61,
	0x69, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x32, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x70, 0x0a, 0x44, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61,
	0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x69, 0x74, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x33, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x69, 0x0a, 0x34, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64,
	0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0xfa, 0x02, 0x0a,
	0x33, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x2b, 0x0a,
	0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f,
	0x70, 0x65, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x09,
	0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3e, 0x0a, 0x10, 0x63, 0x72, 0x61,
	0x77, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0e, 0x63, 0x72, 0x61, 0x77, 0x6c,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x64, 0x5f,
	0x67, 0x65, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x69, 0x64, 0x47, 0x65, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x50, 0x0a, 0x34, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x94, 0x02, 0x0a, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07,
	0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6d, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52,
	0x06, 0x6f, 0x6e, 0x6c, 0x79, 0x4d, 0x79, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x5f, 0x6d, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x64, 0x0a, 0x2f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72,
	0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa1, 0x02, 0x0a, 0x3e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x69, 0x74,
	0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d,
	0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6b, 0x0a, 0x3f,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x61, 0x69, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x64, 0x0a, 0x2f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0xf5, 0x02, 0x0a, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b,
	0x65, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0a, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3e,
	0x0a, 0x10, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0e,
	0x63, 0x72, 0x61, 0x77, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1e,
	0x0a, 0x0b, 0x69, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x64, 0x47, 0x65, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x4b,
	0x0a, 0x2f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x30,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61,
	0x72, 0x64, 0x65, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x68, 0x0a, 0x31, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x90, 0x03, 0x0a, 0x30, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x64, 0x6e, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x64, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6e, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6e, 0x6e, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65,
	0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x64, 0x47, 0x65, 0x6e, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a,
	0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x4d, 0x0a, 0x31, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72,
	0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2a, 0xe7, 0x01, 0x0a, 0x28, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72,
	0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x12, 0x44,
	0x0a, 0x40, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x57, 0x41, 0x52, 0x44, 0x45, 0x4e,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x41, 0x43, 0x48, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x3d, 0x0a, 0x39, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x57, 0x41, 0x52, 0x44, 0x45, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x52,
	0x4f, 0x41, 0x43, 0x48, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x36, 0x0a, 0x32, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x57,
	0x41, 0x52, 0x44, 0x45, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f,
	0x41, 0x43, 0x48, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x02, 0x32, 0xb4, 0x1b, 0x0a, 0x14,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x38, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57,
	0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x11, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x3e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x8b, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x48, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x12, 0x3b, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61,
	0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xac,
	0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x48, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57,
	0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa3, 0x01,
	0x0a, 0x16, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x48, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x12, 0x38, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61,
	0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x0c, 0x4c, 0x6f, 0x67,
	0x6f, 0x75, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x39, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57,
	0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x6f,
	0x75, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x97, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x48, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x14, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x41, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61,
	0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x0c, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x39, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x7c, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12,
	0x36, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47,
	0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x85, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x12, 0x39, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64,
	0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa9, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0xd9, 0x01, 0x0a, 0x28, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x69, 0x74, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x55, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64,
	0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x69, 0x74, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x56, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x57, 0x61, 0x69, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0xa9, 0x01, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57,
	0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa9, 0x01, 0x0a,
	0x18, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x46, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x40, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x41, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72,
	0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xca, 0x01, 0x0a, 0x23, 0x4a, 0x6f, 0x69, 0x6e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x69, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x50, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x57, 0x61, 0x69, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x51, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x61, 0x69, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x13, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x9a, 0x01, 0x0a, 0x13, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa0, 0x01, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65,
	0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64,
	0x65, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0xa0, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x12, 0x42, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0xd1, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x42, 0x19, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x6f, 0x73, 0x2d, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x6e, 0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x4e, 0x58, 0x58, 0xaa, 0x02, 0x10,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e,
	0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x6e, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_networkwarden_v1_network_warden_service_proto_rawDescOnce sync.Once
	file_networkwarden_v1_network_warden_service_proto_rawDescData = file_networkwarden_v1_network_warden_service_proto_rawDesc
)

func file_networkwarden_v1_network_warden_service_proto_rawDescGZIP() []byte {
	file_networkwarden_v1_network_warden_service_proto_rawDescOnce.Do(func() {
		file_networkwarden_v1_network_warden_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_networkwarden_v1_network_warden_service_proto_rawDescData)
	})
	return file_networkwarden_v1_network_warden_service_proto_rawDescData
}

var file_networkwarden_v1_network_warden_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_networkwarden_v1_network_warden_service_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_networkwarden_v1_network_warden_service_proto_goTypes = []any{
	(NetworkWardenServiceConfirmationApproach)(0),                                // 0: networkwarden.v1.NetworkWardenServiceConfirmationApproach
	(*NetworkWardenServiceCheckEmailsRequest)(nil),                               // 1: networkwarden.v1.NetworkWardenServiceCheckEmailsRequest
	(*NetworkWardenServiceCheckEmailsResponse)(nil),                              // 2: networkwarden.v1.NetworkWardenServiceCheckEmailsResponse
	(*NetworkWardenServiceCheckPhoneNumbersRequest)(nil),                         // 3: networkwarden.v1.NetworkWardenServiceCheckPhoneNumbersRequest
	(*NetworkWardenServiceCheckPhoneNumbersResponse)(nil),                        // 4: networkwarden.v1.NetworkWardenServiceCheckPhoneNumbersResponse
	(*NetworkWardenServiceRegisterHolderRequest)(nil),                            // 5: networkwarden.v1.NetworkWardenServiceRegisterHolderRequest
	(*NetworkWardenServiceRegisterHolderResponse)(nil),                           // 6: networkwarden.v1.NetworkWardenServiceRegisterHolderResponse
	(*NetworkWardenServiceConfirmHolderRegistrationRequest)(nil),                 // 7: networkwarden.v1.NetworkWardenServiceConfirmHolderRegistrationRequest
	(*NetworkWardenServiceConfirmHolderRegistrationResponse)(nil),                // 8: networkwarden.v1.NetworkWardenServiceConfirmHolderRegistrationResponse
	(*NetworkWardenServiceResendConfirmationCodeRequest)(nil),                    // 9: networkwarden.v1.NetworkWardenServiceResendConfirmationCodeRequest
	(*NetworkWardenServiceResendConfirmationCodeResponse)(nil),                   // 10: networkwarden.v1.NetworkWardenServiceResendConfirmationCodeResponse
	(*NetworkWardenServiceLoginHolderRequest)(nil),                               // 11: networkwarden.v1.NetworkWardenServiceLoginHolderRequest
	(*NetworkWardenServiceLoginHolderResponse)(nil),                              // 12: networkwarden.v1.NetworkWardenServiceLoginHolderResponse
	(*NetworkWardenServiceLogoutHolderRequest)(nil),                              // 13: networkwarden.v1.NetworkWardenServiceLogoutHolderRequest
	(*NetworkWardenServiceLogoutHolderResponse)(nil),                             // 14: networkwarden.v1.NetworkWardenServiceLogoutHolderResponse
	(*NetworkWardenServiceRefreshHolderTokenRequest)(nil),                        // 15: networkwarden.v1.NetworkWardenServiceRefreshHolderTokenRequest
	(*NetworkWardenServiceRefreshHolderTokenResponse)(nil),                       // 16: networkwarden.v1.NetworkWardenServiceRefreshHolderTokenResponse
	(*NetworkWardenServiceChangeHolderPasswordRequest)(nil),                      // 17: networkwarden.v1.NetworkWardenServiceChangeHolderPasswordRequest
	(*NetworkWardenServiceChangeHolderPasswordResponse)(nil),                     // 18: networkwarden.v1.NetworkWardenServiceChangeHolderPasswordResponse
	(*NetworkWardenServiceModifyHolderRequest)(nil),                              // 19: networkwarden.v1.NetworkWardenServiceModifyHolderRequest
	(*NetworkWardenServiceModifyHolderResponse)(nil),                             // 20: networkwarden.v1.NetworkWardenServiceModifyHolderResponse
	(*NetworkWardenServiceGetHolderRequest)(nil),                                 // 21: networkwarden.v1.NetworkWardenServiceGetHolderRequest
	(*NetworkWardenServiceGetHolderResponse)(nil),                                // 22: networkwarden.v1.NetworkWardenServiceGetHolderResponse
	(*NetworkWardenServiceDeleteHolderRequest)(nil),                              // 23: networkwarden.v1.NetworkWardenServiceDeleteHolderRequest
	(*NetworkWardenServiceDeleteHolderResponse)(nil),                             // 24: networkwarden.v1.NetworkWardenServiceDeleteHolderResponse
	(*NetworkWardenServiceGetPersonalDataNodesListRequest)(nil),                  // 25: networkwarden.v1.NetworkWardenServiceGetPersonalDataNodesListRequest
	(*NetworkWardenServiceGetPersonalDataNodesListResponse)(nil),                 // 26: networkwarden.v1.NetworkWardenServiceGetPersonalDataNodesListResponse
	(*NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequest)(nil),  // 27: networkwarden.v1.NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequest
	(*NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponse)(nil), // 28: networkwarden.v1.NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponse
	(*NetworkWardenServiceActivatePersonalDataNodeRequest)(nil),                  // 29: networkwarden.v1.NetworkWardenServiceActivatePersonalDataNodeRequest
	(*NetworkWardenServiceActivatePersonalDataNodeResponse)(nil),                 // 30: networkwarden.v1.NetworkWardenServiceActivatePersonalDataNodeResponse
	(*NetworkWardenServiceInitiatePersonalDataNodeRequest)(nil),                  // 31: networkwarden.v1.NetworkWardenServiceInitiatePersonalDataNodeRequest
	(*NetworkWardenServiceInitiatePersonalDataNodeResponse)(nil),                 // 32: networkwarden.v1.NetworkWardenServiceInitiatePersonalDataNodeResponse
	(*NetworkWardenServiceGetNetworkNodesListRequest)(nil),                       // 33: networkwarden.v1.NetworkWardenServiceGetNetworkNodesListRequest
	(*NetworkWardenServiceGetNetworkNodesListResponse)(nil),                      // 34: networkwarden.v1.NetworkWardenServiceGetNetworkNodesListResponse
	(*NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequest)(nil),       // 35: networkwarden.v1.NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequest
	(*NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponse)(nil),      // 36: networkwarden.v1.NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponse
	(*NetworkWardenServiceActivateNetworkNodeRequest)(nil),                       // 37: networkwarden.v1.NetworkWardenServiceActivateNetworkNodeRequest
	(*NetworkWardenServiceActivateNetworkNodeResponse)(nil),                      // 38: networkwarden.v1.NetworkWardenServiceActivateNetworkNodeResponse
	(*NetworkWardenServiceInitiateNetworkNodeRequest)(nil),                       // 39: networkwarden.v1.NetworkWardenServiceInitiateNetworkNodeRequest
	(*NetworkWardenServiceInitiateNetworkNodeResponse)(nil),                      // 40: networkwarden.v1.NetworkWardenServiceInitiateNetworkNodeResponse
	(*NetworkWardenServiceGetNetworkWardensListRequest)(nil),                     // 41: networkwarden.v1.NetworkWardenServiceGetNetworkWardensListRequest
	(*NetworkWardenServiceGetNetworkWardensListResponse)(nil),                    // 42: networkwarden.v1.NetworkWardenServiceGetNetworkWardensListResponse
	(*NetworkWardenServiceRegisterNetworkWardenRequest)(nil),                     // 43: networkwarden.v1.NetworkWardenServiceRegisterNetworkWardenRequest
	(*NetworkWardenServiceRegisterNetworkWardenResponse)(nil),                    // 44: networkwarden.v1.NetworkWardenServiceRegisterNetworkWardenResponse
	(*Holder)(nil),           // 45: networkwarden.v1.Holder
	(*v1.Pagination)(nil),    // 46: common.v1.Pagination
	(*PersonalDataNode)(nil), // 47: networkwarden.v1.PersonalDataNode
	(*v1.Geolocation)(nil),   // 48: common.v1.Geolocation
	(*v1.RateLimit)(nil),     // 49: common.v1.RateLimit
	(*NetworkNode)(nil),      // 50: networkwarden.v1.NetworkNode
	(*NetworkWarden)(nil),    // 51: networkwarden.v1.NetworkWarden
}
var file_networkwarden_v1_network_warden_service_proto_depIdxs = []int32{
	0,  // 0: networkwarden.v1.NetworkWardenServiceRegisterHolderResponse.confirmation_approach:type_name -> networkwarden.v1.NetworkWardenServiceConfirmationApproach
	0,  // 1: networkwarden.v1.NetworkWardenServiceResendConfirmationCodeRequest.confirmation_approach:type_name -> networkwarden.v1.NetworkWardenServiceConfirmationApproach
	45, // 2: networkwarden.v1.NetworkWardenServiceGetHolderResponse.data:type_name -> networkwarden.v1.Holder
	46, // 3: networkwarden.v1.NetworkWardenServiceGetPersonalDataNodesListRequest.pagination:type_name -> common.v1.Pagination
	47, // 4: networkwarden.v1.NetworkWardenServiceGetPersonalDataNodesListResponse.data:type_name -> networkwarden.v1.PersonalDataNode
	48, // 5: networkwarden.v1.NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequest.location:type_name -> common.v1.Geolocation
	49, // 6: networkwarden.v1.NetworkWardenServiceInitiatePersonalDataNodeRequest.rate_limit:type_name -> common.v1.RateLimit
	49, // 7: networkwarden.v1.NetworkWardenServiceInitiatePersonalDataNodeRequest.crawl_rate_limit:type_name -> common.v1.RateLimit
	46, // 8: networkwarden.v1.NetworkWardenServiceGetNetworkNodesListRequest.pagination:type_name -> common.v1.Pagination
	50, // 9: networkwarden.v1.NetworkWardenServiceGetNetworkNodesListResponse.data:type_name -> networkwarden.v1.NetworkNode
	48, // 10: networkwarden.v1.NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequest.location:type_name -> common.v1.Geolocation
	49, // 11: networkwarden.v1.NetworkWardenServiceInitiateNetworkNodeRequest.rate_limit:type_name -> common.v1.RateLimit
	49, // 12: networkwarden.v1.NetworkWardenServiceInitiateNetworkNodeRequest.crawl_rate_limit:type_name -> common.v1.RateLimit
	46, // 13: networkwarden.v1.NetworkWardenServiceGetNetworkWardensListRequest.pagination:type_name -> common.v1.Pagination
	51, // 14: networkwarden.v1.NetworkWardenServiceGetNetworkWardensListResponse.data:type_name -> networkwarden.v1.NetworkWarden
	48, // 15: networkwarden.v1.NetworkWardenServiceRegisterNetworkWardenRequest.location:type_name -> common.v1.Geolocation
	49, // 16: networkwarden.v1.NetworkWardenServiceRegisterNetworkWardenRequest.rate_limit:type_name -> common.v1.RateLimit
	1,  // 17: networkwarden.v1.NetworkWardenService.CheckEmails:input_type -> networkwarden.v1.NetworkWardenServiceCheckEmailsRequest
	3,  // 18: networkwarden.v1.NetworkWardenService.CheckPhoneNumbers:input_type -> networkwarden.v1.NetworkWardenServiceCheckPhoneNumbersRequest
	5,  // 19: networkwarden.v1.NetworkWardenService.RegisterHolder:input_type -> networkwarden.v1.NetworkWardenServiceRegisterHolderRequest
	7,  // 20: networkwarden.v1.NetworkWardenService.ConfirmHolderRegistration:input_type -> networkwarden.v1.NetworkWardenServiceConfirmHolderRegistrationRequest
	9,  // 21: networkwarden.v1.NetworkWardenService.ResendConfirmationCode:input_type -> networkwarden.v1.NetworkWardenServiceResendConfirmationCodeRequest
	11, // 22: networkwarden.v1.NetworkWardenService.LoginHolder:input_type -> networkwarden.v1.NetworkWardenServiceLoginHolderRequest
	13, // 23: networkwarden.v1.NetworkWardenService.LogoutHolder:input_type -> networkwarden.v1.NetworkWardenServiceLogoutHolderRequest
	15, // 24: networkwarden.v1.NetworkWardenService.RefreshHolderToken:input_type -> networkwarden.v1.NetworkWardenServiceRefreshHolderTokenRequest
	17, // 25: networkwarden.v1.NetworkWardenService.ChangeHolderPassword:input_type -> networkwarden.v1.NetworkWardenServiceChangeHolderPasswordRequest
	19, // 26: networkwarden.v1.NetworkWardenService.ModifyHolder:input_type -> networkwarden.v1.NetworkWardenServiceModifyHolderRequest
	21, // 27: networkwarden.v1.NetworkWardenService.GetHolder:input_type -> networkwarden.v1.NetworkWardenServiceGetHolderRequest
	23, // 28: networkwarden.v1.NetworkWardenService.DeleteHolder:input_type -> networkwarden.v1.NetworkWardenServiceDeleteHolderRequest
	25, // 29: networkwarden.v1.NetworkWardenService.GetPersonalDataNodesList:input_type -> networkwarden.v1.NetworkWardenServiceGetPersonalDataNodesListRequest
	27, // 30: networkwarden.v1.NetworkWardenService.JoinPersonalDataNodeRegistrationWaitlist:input_type -> networkwarden.v1.NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequest
	29, // 31: networkwarden.v1.NetworkWardenService.ActivatePersonalDataNode:input_type -> networkwarden.v1.NetworkWardenServiceActivatePersonalDataNodeRequest
	31, // 32: networkwarden.v1.NetworkWardenService.InitiatePersonalDataNode:input_type -> networkwarden.v1.NetworkWardenServiceInitiatePersonalDataNodeRequest
	33, // 33: networkwarden.v1.NetworkWardenService.GetNetworkNodesList:input_type -> networkwarden.v1.NetworkWardenServiceGetNetworkNodesListRequest
	35, // 34: networkwarden.v1.NetworkWardenService.JoinNetworkNodeRegistrationWaitlist:input_type -> networkwarden.v1.NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequest
	37, // 35: networkwarden.v1.NetworkWardenService.ActivateNetworkNode:input_type -> networkwarden.v1.NetworkWardenServiceActivateNetworkNodeRequest
	39, // 36: networkwarden.v1.NetworkWardenService.InitiateNetworkNode:input_type -> networkwarden.v1.NetworkWardenServiceInitiateNetworkNodeRequest
	41, // 37: networkwarden.v1.NetworkWardenService.GetNetworkWardensList:input_type -> networkwarden.v1.NetworkWardenServiceGetNetworkWardensListRequest
	43, // 38: networkwarden.v1.NetworkWardenService.RegisterNetworkWarden:input_type -> networkwarden.v1.NetworkWardenServiceRegisterNetworkWardenRequest
	2,  // 39: networkwarden.v1.NetworkWardenService.CheckEmails:output_type -> networkwarden.v1.NetworkWardenServiceCheckEmailsResponse
	4,  // 40: networkwarden.v1.NetworkWardenService.CheckPhoneNumbers:output_type -> networkwarden.v1.NetworkWardenServiceCheckPhoneNumbersResponse
	6,  // 41: networkwarden.v1.NetworkWardenService.RegisterHolder:output_type -> networkwarden.v1.NetworkWardenServiceRegisterHolderResponse
	8,  // 42: networkwarden.v1.NetworkWardenService.ConfirmHolderRegistration:output_type -> networkwarden.v1.NetworkWardenServiceConfirmHolderRegistrationResponse
	10, // 43: networkwarden.v1.NetworkWardenService.ResendConfirmationCode:output_type -> networkwarden.v1.NetworkWardenServiceResendConfirmationCodeResponse
	12, // 44: networkwarden.v1.NetworkWardenService.LoginHolder:output_type -> networkwarden.v1.NetworkWardenServiceLoginHolderResponse
	14, // 45: networkwarden.v1.NetworkWardenService.LogoutHolder:output_type -> networkwarden.v1.NetworkWardenServiceLogoutHolderResponse
	16, // 46: networkwarden.v1.NetworkWardenService.RefreshHolderToken:output_type -> networkwarden.v1.NetworkWardenServiceRefreshHolderTokenResponse
	18, // 47: networkwarden.v1.NetworkWardenService.ChangeHolderPassword:output_type -> networkwarden.v1.NetworkWardenServiceChangeHolderPasswordResponse
	20, // 48: networkwarden.v1.NetworkWardenService.ModifyHolder:output_type -> networkwarden.v1.NetworkWardenServiceModifyHolderResponse
	22, // 49: networkwarden.v1.NetworkWardenService.GetHolder:output_type -> networkwarden.v1.NetworkWardenServiceGetHolderResponse
	24, // 50: networkwarden.v1.NetworkWardenService.DeleteHolder:output_type -> networkwarden.v1.NetworkWardenServiceDeleteHolderResponse
	26, // 51: networkwarden.v1.NetworkWardenService.GetPersonalDataNodesList:output_type -> networkwarden.v1.NetworkWardenServiceGetPersonalDataNodesListResponse
	28, // 52: networkwarden.v1.NetworkWardenService.JoinPersonalDataNodeRegistrationWaitlist:output_type -> networkwarden.v1.NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponse
	30, // 53: networkwarden.v1.NetworkWardenService.ActivatePersonalDataNode:output_type -> networkwarden.v1.NetworkWardenServiceActivatePersonalDataNodeResponse
	32, // 54: networkwarden.v1.NetworkWardenService.InitiatePersonalDataNode:output_type -> networkwarden.v1.NetworkWardenServiceInitiatePersonalDataNodeResponse
	34, // 55: networkwarden.v1.NetworkWardenService.GetNetworkNodesList:output_type -> networkwarden.v1.NetworkWardenServiceGetNetworkNodesListResponse
	36, // 56: networkwarden.v1.NetworkWardenService.JoinNetworkNodeRegistrationWaitlist:output_type -> networkwarden.v1.NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponse
	38, // 57: networkwarden.v1.NetworkWardenService.ActivateNetworkNode:output_type -> networkwarden.v1.NetworkWardenServiceActivateNetworkNodeResponse
	40, // 58: networkwarden.v1.NetworkWardenService.InitiateNetworkNode:output_type -> networkwarden.v1.NetworkWardenServiceInitiateNetworkNodeResponse
	42, // 59: networkwarden.v1.NetworkWardenService.GetNetworkWardensList:output_type -> networkwarden.v1.NetworkWardenServiceGetNetworkWardensListResponse
	44, // 60: networkwarden.v1.NetworkWardenService.RegisterNetworkWarden:output_type -> networkwarden.v1.NetworkWardenServiceRegisterNetworkWardenResponse
	39, // [39:61] is the sub-list for method output_type
	17, // [17:39] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_networkwarden_v1_network_warden_service_proto_init() }
func file_networkwarden_v1_network_warden_service_proto_init() {
	if File_networkwarden_v1_network_warden_service_proto != nil {
		return
	}
	file_networkwarden_v1_holder_proto_init()
	file_networkwarden_v1_network_node_proto_init()
	file_networkwarden_v1_network_warden_proto_init()
	file_networkwarden_v1_personal_data_node_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_networkwarden_v1_network_warden_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceCheckEmailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceCheckEmailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceCheckPhoneNumbersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceCheckPhoneNumbersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceRegisterHolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceRegisterHolderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceConfirmHolderRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceConfirmHolderRegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceResendConfirmationCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceResendConfirmationCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceLoginHolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceLoginHolderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceLogoutHolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceLogoutHolderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceRefreshHolderTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceRefreshHolderTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceChangeHolderPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceChangeHolderPasswordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceModifyHolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceModifyHolderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceGetHolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceGetHolderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceDeleteHolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceDeleteHolderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceGetPersonalDataNodesListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceGetPersonalDataNodesListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceActivatePersonalDataNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceActivatePersonalDataNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceInitiatePersonalDataNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceInitiatePersonalDataNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceGetNetworkNodesListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceGetNetworkNodesListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceActivateNetworkNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceActivateNetworkNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceInitiateNetworkNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceInitiateNetworkNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceGetNetworkWardensListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceGetNetworkWardensListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceRegisterNetworkWardenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkWardenServiceRegisterNetworkWardenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_networkwarden_v1_network_warden_service_proto_msgTypes[4].OneofWrappers = []any{}
	file_networkwarden_v1_network_warden_service_proto_msgTypes[6].OneofWrappers = []any{}
	file_networkwarden_v1_network_warden_service_proto_msgTypes[8].OneofWrappers = []any{}
	file_networkwarden_v1_network_warden_service_proto_msgTypes[10].OneofWrappers = []any{}
	file_networkwarden_v1_network_warden_service_proto_msgTypes[12].OneofWrappers = []any{}
	file_networkwarden_v1_network_warden_service_proto_msgTypes[14].OneofWrappers = []any{}
	file_networkwarden_v1_network_warden_service_proto_msgTypes[16].OneofWrappers = []any{}
	file_networkwarden_v1_network_warden_service_proto_msgTypes[18].OneofWrappers = []any{}
	file_networkwarden_v1_network_warden_service_proto_msgTypes[20].OneofWrappers = []any{}
	file_networkwarden_v1_network_warden_service_proto_msgTypes[22].OneofWrappers = []any{}
	file_networkwarden_v1_network_warden_service_proto_msgTypes[24].OneofWrappers = []any{}
	file_networkwarden_v1_network_warden_service_proto_msgTypes[32].OneofWrappers = []any{}
	file_networkwarden_v1_network_warden_service_proto_msgTypes[40].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_networkwarden_v1_network_warden_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_networkwarden_v1_network_warden_service_proto_goTypes,
		DependencyIndexes: file_networkwarden_v1_network_warden_service_proto_depIdxs,
		EnumInfos:         file_networkwarden_v1_network_warden_service_proto_enumTypes,
		MessageInfos:      file_networkwarden_v1_network_warden_service_proto_msgTypes,
	}.Build()
	File_networkwarden_v1_network_warden_service_proto = out.File
	file_networkwarden_v1_network_warden_service_proto_rawDesc = nil
	file_networkwarden_v1_network_warden_service_proto_goTypes = nil
	file_networkwarden_v1_network_warden_service_proto_depIdxs = nil
}
