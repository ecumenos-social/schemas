// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: networkwarden/v1/network_warden_service.proto

package v1

import (
	v1 "github.com/ecumenos-social/schemas/proto/gen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConfirmationApproach int32

const (
	ConfirmationApproach_CONFIRMATION_APPROACH_UNKNOWN_UNSPECIFIED ConfirmationApproach = 0
	ConfirmationApproach_CONFIRMATION_APPROACH_PHONE_NUMBER        ConfirmationApproach = 1
	ConfirmationApproach_CONFIRMATION_APPROACH_EMAIL               ConfirmationApproach = 2
)

// Enum value maps for ConfirmationApproach.
var (
	ConfirmationApproach_name = map[int32]string{
		0: "CONFIRMATION_APPROACH_UNKNOWN_UNSPECIFIED",
		1: "CONFIRMATION_APPROACH_PHONE_NUMBER",
		2: "CONFIRMATION_APPROACH_EMAIL",
	}
	ConfirmationApproach_value = map[string]int32{
		"CONFIRMATION_APPROACH_UNKNOWN_UNSPECIFIED": 0,
		"CONFIRMATION_APPROACH_PHONE_NUMBER":        1,
		"CONFIRMATION_APPROACH_EMAIL":               2,
	}
)

func (x ConfirmationApproach) Enum() *ConfirmationApproach {
	p := new(ConfirmationApproach)
	*p = x
	return p
}

func (x ConfirmationApproach) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfirmationApproach) Descriptor() protoreflect.EnumDescriptor {
	return file_networkwarden_v1_network_warden_service_proto_enumTypes[0].Descriptor()
}

func (ConfirmationApproach) Type() protoreflect.EnumType {
	return &file_networkwarden_v1_network_warden_service_proto_enumTypes[0]
}

func (x ConfirmationApproach) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfirmationApproach.Descriptor instead.
func (ConfirmationApproach) EnumDescriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{0}
}

type NetworkWarden struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt      string  `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	LastModifiedAt string  `protobuf:"bytes,3,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	IdGenNode      int64   `protobuf:"varint,4,opt,name=id_gen_node,json=idGenNode,proto3" json:"id_gen_node,omitempty"`
	Name           string  `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Description    string  `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	AddressSuffix  string  `protobuf:"bytes,7,opt,name=address_suffix,json=addressSuffix,proto3" json:"address_suffix,omitempty"`
	PdnCapacity    uint64  `protobuf:"varint,8,opt,name=pdn_capacity,json=pdnCapacity,proto3" json:"pdn_capacity,omitempty"`
	NnCapacity     uint64  `protobuf:"varint,9,opt,name=nn_capacity,json=nnCapacity,proto3" json:"nn_capacity,omitempty"`
	Url            string  `protobuf:"bytes,10,opt,name=url,proto3" json:"url,omitempty"`
	Alive          bool    `protobuf:"varint,11,opt,name=alive,proto3" json:"alive,omitempty"`
	LastPingedAt   string  `protobuf:"bytes,12,opt,name=last_pinged_at,json=lastPingedAt,proto3" json:"last_pinged_at,omitempty"`
	Version        string  `protobuf:"bytes,13,opt,name=version,proto3" json:"version,omitempty"`
	RateLimit      float64 `protobuf:"fixed64,14,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *NetworkWarden) Reset() {
	*x = NetworkWarden{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWarden) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWarden) ProtoMessage() {}

func (x *NetworkWarden) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWarden.ProtoReflect.Descriptor instead.
func (*NetworkWarden) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{0}
}

func (x *NetworkWarden) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NetworkWarden) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *NetworkWarden) GetLastModifiedAt() string {
	if x != nil {
		return x.LastModifiedAt
	}
	return ""
}

func (x *NetworkWarden) GetIdGenNode() int64 {
	if x != nil {
		return x.IdGenNode
	}
	return 0
}

func (x *NetworkWarden) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkWarden) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NetworkWarden) GetAddressSuffix() string {
	if x != nil {
		return x.AddressSuffix
	}
	return ""
}

func (x *NetworkWarden) GetPdnCapacity() uint64 {
	if x != nil {
		return x.PdnCapacity
	}
	return 0
}

func (x *NetworkWarden) GetNnCapacity() uint64 {
	if x != nil {
		return x.NnCapacity
	}
	return 0
}

func (x *NetworkWarden) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *NetworkWarden) GetAlive() bool {
	if x != nil {
		return x.Alive
	}
	return false
}

func (x *NetworkWarden) GetLastPingedAt() string {
	if x != nil {
		return x.LastPingedAt
	}
	return ""
}

func (x *NetworkWarden) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *NetworkWarden) GetRateLimit() float64 {
	if x != nil {
		return x.RateLimit
	}
	return 0
}

type CheckEmailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Emails []string `protobuf:"bytes,1,rep,name=emails,proto3" json:"emails,omitempty"`
}

func (x *CheckEmailsRequest) Reset() {
	*x = CheckEmailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckEmailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckEmailsRequest) ProtoMessage() {}

func (x *CheckEmailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckEmailsRequest.ProtoReflect.Descriptor instead.
func (*CheckEmailsRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{1}
}

func (x *CheckEmailsRequest) GetEmails() []string {
	if x != nil {
		return x.Emails
	}
	return nil
}

type CheckEmailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid   bool     `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Results []string `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *CheckEmailsResponse) Reset() {
	*x = CheckEmailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckEmailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckEmailsResponse) ProtoMessage() {}

func (x *CheckEmailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckEmailsResponse.ProtoReflect.Descriptor instead.
func (*CheckEmailsResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{2}
}

func (x *CheckEmailsResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *CheckEmailsResponse) GetResults() []string {
	if x != nil {
		return x.Results
	}
	return nil
}

type CheckPhoneNumbersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumbers []string `protobuf:"bytes,1,rep,name=phone_numbers,json=phoneNumbers,proto3" json:"phone_numbers,omitempty"`
}

func (x *CheckPhoneNumbersRequest) Reset() {
	*x = CheckPhoneNumbersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPhoneNumbersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPhoneNumbersRequest) ProtoMessage() {}

func (x *CheckPhoneNumbersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPhoneNumbersRequest.ProtoReflect.Descriptor instead.
func (*CheckPhoneNumbersRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{3}
}

func (x *CheckPhoneNumbersRequest) GetPhoneNumbers() []string {
	if x != nil {
		return x.PhoneNumbers
	}
	return nil
}

type CheckPhoneNumbersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid   bool     `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Results []string `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *CheckPhoneNumbersResponse) Reset() {
	*x = CheckPhoneNumbersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPhoneNumbersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPhoneNumbersResponse) ProtoMessage() {}

func (x *CheckPhoneNumbersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPhoneNumbersResponse.ProtoReflect.Descriptor instead.
func (*CheckPhoneNumbersResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{4}
}

func (x *CheckPhoneNumbersResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *CheckPhoneNumbersResponse) GetResults() []string {
	if x != nil {
		return x.Results
	}
	return nil
}

type RegisterHolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Emails           []string `protobuf:"bytes,1,rep,name=emails,proto3" json:"emails,omitempty"`
	PhoneNumbers     []string `protobuf:"bytes,2,rep,name=phone_numbers,json=phoneNumbers,proto3" json:"phone_numbers,omitempty"`
	AvatarImageUrl   string   `protobuf:"bytes,3,opt,name=avatar_image_url,json=avatarImageUrl,proto3" json:"avatar_image_url,omitempty"`
	Countries        []string `protobuf:"bytes,4,rep,name=countries,proto3" json:"countries,omitempty"`
	Languages        []string `protobuf:"bytes,5,rep,name=languages,proto3" json:"languages,omitempty"`
	Password         string   `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	RemoteMacAddress string   `protobuf:"bytes,7,opt,name=remote_mac_address,json=remoteMacAddress,proto3" json:"remote_mac_address,omitempty"`
}

func (x *RegisterHolderRequest) Reset() {
	*x = RegisterHolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterHolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterHolderRequest) ProtoMessage() {}

func (x *RegisterHolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterHolderRequest.ProtoReflect.Descriptor instead.
func (*RegisterHolderRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{5}
}

func (x *RegisterHolderRequest) GetEmails() []string {
	if x != nil {
		return x.Emails
	}
	return nil
}

func (x *RegisterHolderRequest) GetPhoneNumbers() []string {
	if x != nil {
		return x.PhoneNumbers
	}
	return nil
}

func (x *RegisterHolderRequest) GetAvatarImageUrl() string {
	if x != nil {
		return x.AvatarImageUrl
	}
	return ""
}

func (x *RegisterHolderRequest) GetCountries() []string {
	if x != nil {
		return x.Countries
	}
	return nil
}

func (x *RegisterHolderRequest) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *RegisterHolderRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RegisterHolderRequest) GetRemoteMacAddress() string {
	if x != nil {
		return x.RemoteMacAddress
	}
	return ""
}

type RegisterHolderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token                string               `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	RefreshToken         string               `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	ConfirmationApproach ConfirmationApproach `protobuf:"varint,3,opt,name=confirmation_approach,json=confirmationApproach,proto3,enum=networkwarden.v1.ConfirmationApproach" json:"confirmation_approach,omitempty"`
}

func (x *RegisterHolderResponse) Reset() {
	*x = RegisterHolderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterHolderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterHolderResponse) ProtoMessage() {}

func (x *RegisterHolderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterHolderResponse.ProtoReflect.Descriptor instead.
func (*RegisterHolderResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{6}
}

func (x *RegisterHolderResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RegisterHolderResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *RegisterHolderResponse) GetConfirmationApproach() ConfirmationApproach {
	if x != nil {
		return x.ConfirmationApproach
	}
	return ConfirmationApproach_CONFIRMATION_APPROACH_UNKNOWN_UNSPECIFIED
}

type ConfirmHolderRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token            string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	ConfirmationCode string `protobuf:"bytes,2,opt,name=confirmation_code,json=confirmationCode,proto3" json:"confirmation_code,omitempty"`
	RemoteMacAddress string `protobuf:"bytes,3,opt,name=remote_mac_address,json=remoteMacAddress,proto3" json:"remote_mac_address,omitempty"`
}

func (x *ConfirmHolderRegistrationRequest) Reset() {
	*x = ConfirmHolderRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmHolderRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmHolderRegistrationRequest) ProtoMessage() {}

func (x *ConfirmHolderRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmHolderRegistrationRequest.ProtoReflect.Descriptor instead.
func (*ConfirmHolderRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{7}
}

func (x *ConfirmHolderRegistrationRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ConfirmHolderRegistrationRequest) GetConfirmationCode() string {
	if x != nil {
		return x.ConfirmationCode
	}
	return ""
}

func (x *ConfirmHolderRegistrationRequest) GetRemoteMacAddress() string {
	if x != nil {
		return x.RemoteMacAddress
	}
	return ""
}

type ConfirmHolderRegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ConfirmHolderRegistrationResponse) Reset() {
	*x = ConfirmHolderRegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmHolderRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmHolderRegistrationResponse) ProtoMessage() {}

func (x *ConfirmHolderRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmHolderRegistrationResponse.ProtoReflect.Descriptor instead.
func (*ConfirmHolderRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{8}
}

func (x *ConfirmHolderRegistrationResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ResendConfirmationCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token                string               `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	ConfirmationApproach ConfirmationApproach `protobuf:"varint,2,opt,name=confirmation_approach,json=confirmationApproach,proto3,enum=networkwarden.v1.ConfirmationApproach" json:"confirmation_approach,omitempty"`
	RemoteMacAddress     string               `protobuf:"bytes,3,opt,name=remote_mac_address,json=remoteMacAddress,proto3" json:"remote_mac_address,omitempty"`
}

func (x *ResendConfirmationCodeRequest) Reset() {
	*x = ResendConfirmationCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResendConfirmationCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResendConfirmationCodeRequest) ProtoMessage() {}

func (x *ResendConfirmationCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResendConfirmationCodeRequest.ProtoReflect.Descriptor instead.
func (*ResendConfirmationCodeRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{9}
}

func (x *ResendConfirmationCodeRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ResendConfirmationCodeRequest) GetConfirmationApproach() ConfirmationApproach {
	if x != nil {
		return x.ConfirmationApproach
	}
	return ConfirmationApproach_CONFIRMATION_APPROACH_UNKNOWN_UNSPECIFIED
}

func (x *ResendConfirmationCodeRequest) GetRemoteMacAddress() string {
	if x != nil {
		return x.RemoteMacAddress
	}
	return ""
}

type ResendConfirmationCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ResendConfirmationCodeResponse) Reset() {
	*x = ResendConfirmationCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResendConfirmationCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResendConfirmationCodeResponse) ProtoMessage() {}

func (x *ResendConfirmationCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResendConfirmationCodeResponse.ProtoReflect.Descriptor instead.
func (*ResendConfirmationCodeResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{10}
}

func (x *ResendConfirmationCodeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type LoginHolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email            string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	PhoneNumber      string `protobuf:"bytes,2,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Password         string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	RemoteMacAddress string `protobuf:"bytes,4,opt,name=remote_mac_address,json=remoteMacAddress,proto3" json:"remote_mac_address,omitempty"`
}

func (x *LoginHolderRequest) Reset() {
	*x = LoginHolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginHolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginHolderRequest) ProtoMessage() {}

func (x *LoginHolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginHolderRequest.ProtoReflect.Descriptor instead.
func (*LoginHolderRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{11}
}

func (x *LoginHolderRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *LoginHolderRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *LoginHolderRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *LoginHolderRequest) GetRemoteMacAddress() string {
	if x != nil {
		return x.RemoteMacAddress
	}
	return ""
}

type LoginHolderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token        string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	RefreshToken string `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
}

func (x *LoginHolderResponse) Reset() {
	*x = LoginHolderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginHolderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginHolderResponse) ProtoMessage() {}

func (x *LoginHolderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginHolderResponse.ProtoReflect.Descriptor instead.
func (*LoginHolderResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{12}
}

func (x *LoginHolderResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *LoginHolderResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type LogoutHolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token            string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	RemoteMacAddress string `protobuf:"bytes,2,opt,name=remote_mac_address,json=remoteMacAddress,proto3" json:"remote_mac_address,omitempty"`
}

func (x *LogoutHolderRequest) Reset() {
	*x = LogoutHolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutHolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutHolderRequest) ProtoMessage() {}

func (x *LogoutHolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutHolderRequest.ProtoReflect.Descriptor instead.
func (*LogoutHolderRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{13}
}

func (x *LogoutHolderRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *LogoutHolderRequest) GetRemoteMacAddress() string {
	if x != nil {
		return x.RemoteMacAddress
	}
	return ""
}

type LogoutHolderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *LogoutHolderResponse) Reset() {
	*x = LogoutHolderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutHolderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutHolderResponse) ProtoMessage() {}

func (x *LogoutHolderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutHolderResponse.ProtoReflect.Descriptor instead.
func (*LogoutHolderResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{14}
}

func (x *LogoutHolderResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type RefreshHolderTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshToken     string `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	RemoteMacAddress string `protobuf:"bytes,2,opt,name=remote_mac_address,json=remoteMacAddress,proto3" json:"remote_mac_address,omitempty"`
}

func (x *RefreshHolderTokenRequest) Reset() {
	*x = RefreshHolderTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshHolderTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshHolderTokenRequest) ProtoMessage() {}

func (x *RefreshHolderTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshHolderTokenRequest.ProtoReflect.Descriptor instead.
func (*RefreshHolderTokenRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{15}
}

func (x *RefreshHolderTokenRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *RefreshHolderTokenRequest) GetRemoteMacAddress() string {
	if x != nil {
		return x.RemoteMacAddress
	}
	return ""
}

type RefreshHolderTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token        string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	RefreshToken string `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
}

func (x *RefreshHolderTokenResponse) Reset() {
	*x = RefreshHolderTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshHolderTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshHolderTokenResponse) ProtoMessage() {}

func (x *RefreshHolderTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshHolderTokenResponse.ProtoReflect.Descriptor instead.
func (*RefreshHolderTokenResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{16}
}

func (x *RefreshHolderTokenResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RefreshHolderTokenResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type ChangeHolderPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token            string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Password         string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	NewPassword      string `protobuf:"bytes,3,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"`
	RemoteMacAddress string `protobuf:"bytes,4,opt,name=remote_mac_address,json=remoteMacAddress,proto3" json:"remote_mac_address,omitempty"`
}

func (x *ChangeHolderPasswordRequest) Reset() {
	*x = ChangeHolderPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeHolderPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeHolderPasswordRequest) ProtoMessage() {}

func (x *ChangeHolderPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeHolderPasswordRequest.ProtoReflect.Descriptor instead.
func (*ChangeHolderPasswordRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{17}
}

func (x *ChangeHolderPasswordRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ChangeHolderPasswordRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ChangeHolderPasswordRequest) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

func (x *ChangeHolderPasswordRequest) GetRemoteMacAddress() string {
	if x != nil {
		return x.RemoteMacAddress
	}
	return ""
}

type ChangeHolderPasswordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ChangeHolderPasswordResponse) Reset() {
	*x = ChangeHolderPasswordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeHolderPasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeHolderPasswordResponse) ProtoMessage() {}

func (x *ChangeHolderPasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeHolderPasswordResponse.ProtoReflect.Descriptor instead.
func (*ChangeHolderPasswordResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{18}
}

func (x *ChangeHolderPasswordResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ModifyHolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token            string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	AvatarImageUrl   string   `protobuf:"bytes,2,opt,name=avatar_image_url,json=avatarImageUrl,proto3" json:"avatar_image_url,omitempty"`
	Countries        []string `protobuf:"bytes,3,rep,name=countries,proto3" json:"countries,omitempty"`
	Languages        []string `protobuf:"bytes,4,rep,name=languages,proto3" json:"languages,omitempty"`
	RemoteMacAddress string   `protobuf:"bytes,5,opt,name=remote_mac_address,json=remoteMacAddress,proto3" json:"remote_mac_address,omitempty"`
}

func (x *ModifyHolderRequest) Reset() {
	*x = ModifyHolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyHolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyHolderRequest) ProtoMessage() {}

func (x *ModifyHolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyHolderRequest.ProtoReflect.Descriptor instead.
func (*ModifyHolderRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{19}
}

func (x *ModifyHolderRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ModifyHolderRequest) GetAvatarImageUrl() string {
	if x != nil {
		return x.AvatarImageUrl
	}
	return ""
}

func (x *ModifyHolderRequest) GetCountries() []string {
	if x != nil {
		return x.Countries
	}
	return nil
}

func (x *ModifyHolderRequest) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *ModifyHolderRequest) GetRemoteMacAddress() string {
	if x != nil {
		return x.RemoteMacAddress
	}
	return ""
}

type ModifyHolderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ModifyHolderResponse) Reset() {
	*x = ModifyHolderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyHolderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyHolderResponse) ProtoMessage() {}

func (x *ModifyHolderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyHolderResponse.ProtoReflect.Descriptor instead.
func (*ModifyHolderResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{20}
}

func (x *ModifyHolderResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetHolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token            string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	HolderId         string `protobuf:"bytes,2,opt,name=holder_id,json=holderId,proto3" json:"holder_id,omitempty"`
	RemoteMacAddress string `protobuf:"bytes,3,opt,name=remote_mac_address,json=remoteMacAddress,proto3" json:"remote_mac_address,omitempty"`
}

func (x *GetHolderRequest) Reset() {
	*x = GetHolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHolderRequest) ProtoMessage() {}

func (x *GetHolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHolderRequest.ProtoReflect.Descriptor instead.
func (*GetHolderRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{21}
}

func (x *GetHolderRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *GetHolderRequest) GetHolderId() string {
	if x != nil {
		return x.HolderId
	}
	return ""
}

func (x *GetHolderRequest) GetRemoteMacAddress() string {
	if x != nil {
		return x.RemoteMacAddress
	}
	return ""
}

type GetHolderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Holder `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetHolderResponse) Reset() {
	*x = GetHolderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHolderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHolderResponse) ProtoMessage() {}

func (x *GetHolderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHolderResponse.ProtoReflect.Descriptor instead.
func (*GetHolderResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{22}
}

func (x *GetHolderResponse) GetData() *Holder {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteHolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token            string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Password         string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	RemoteMacAddress string `protobuf:"bytes,3,opt,name=remote_mac_address,json=remoteMacAddress,proto3" json:"remote_mac_address,omitempty"`
}

func (x *DeleteHolderRequest) Reset() {
	*x = DeleteHolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHolderRequest) ProtoMessage() {}

func (x *DeleteHolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHolderRequest.ProtoReflect.Descriptor instead.
func (*DeleteHolderRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteHolderRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *DeleteHolderRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *DeleteHolderRequest) GetRemoteMacAddress() string {
	if x != nil {
		return x.RemoteMacAddress
	}
	return ""
}

type DeleteHolderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteHolderResponse) Reset() {
	*x = DeleteHolderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHolderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHolderResponse) ProtoMessage() {}

func (x *DeleteHolderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHolderResponse.ProtoReflect.Descriptor instead.
func (*DeleteHolderResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteHolderResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetPersonalDataNodesListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token            string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	OnlyMy           bool   `protobuf:"varint,2,opt,name=only_my,json=onlyMy,proto3" json:"only_my,omitempty"`
	Offset           int64  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit            int64  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	RemoteMacAddress string `protobuf:"bytes,5,opt,name=remote_mac_address,json=remoteMacAddress,proto3" json:"remote_mac_address,omitempty"`
}

func (x *GetPersonalDataNodesListRequest) Reset() {
	*x = GetPersonalDataNodesListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPersonalDataNodesListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPersonalDataNodesListRequest) ProtoMessage() {}

func (x *GetPersonalDataNodesListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPersonalDataNodesListRequest.ProtoReflect.Descriptor instead.
func (*GetPersonalDataNodesListRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{25}
}

func (x *GetPersonalDataNodesListRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *GetPersonalDataNodesListRequest) GetOnlyMy() bool {
	if x != nil {
		return x.OnlyMy
	}
	return false
}

func (x *GetPersonalDataNodesListRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetPersonalDataNodesListRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetPersonalDataNodesListRequest) GetRemoteMacAddress() string {
	if x != nil {
		return x.RemoteMacAddress
	}
	return ""
}

type GetPersonalDataNodesListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*PersonalDataNode `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetPersonalDataNodesListResponse) Reset() {
	*x = GetPersonalDataNodesListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPersonalDataNodesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPersonalDataNodesListResponse) ProtoMessage() {}

func (x *GetPersonalDataNodesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPersonalDataNodesListResponse.ProtoReflect.Descriptor instead.
func (*GetPersonalDataNodesListResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{26}
}

func (x *GetPersonalDataNodesListResponse) GetData() []*PersonalDataNode {
	if x != nil {
		return x.Data
	}
	return nil
}

type JoinPersonalDataNodeRegistrationWaitlistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token            string          `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Url              string          `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Name             string          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description      string          `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Location         *v1.Geolocation `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	RemoteMacAddress string          `protobuf:"bytes,6,opt,name=remote_mac_address,json=remoteMacAddress,proto3" json:"remote_mac_address,omitempty"`
}

func (x *JoinPersonalDataNodeRegistrationWaitlistRequest) Reset() {
	*x = JoinPersonalDataNodeRegistrationWaitlistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinPersonalDataNodeRegistrationWaitlistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinPersonalDataNodeRegistrationWaitlistRequest) ProtoMessage() {}

func (x *JoinPersonalDataNodeRegistrationWaitlistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinPersonalDataNodeRegistrationWaitlistRequest.ProtoReflect.Descriptor instead.
func (*JoinPersonalDataNodeRegistrationWaitlistRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{27}
}

func (x *JoinPersonalDataNodeRegistrationWaitlistRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *JoinPersonalDataNodeRegistrationWaitlistRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *JoinPersonalDataNodeRegistrationWaitlistRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JoinPersonalDataNodeRegistrationWaitlistRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *JoinPersonalDataNodeRegistrationWaitlistRequest) GetLocation() *v1.Geolocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *JoinPersonalDataNodeRegistrationWaitlistRequest) GetRemoteMacAddress() string {
	if x != nil {
		return x.RemoteMacAddress
	}
	return ""
}

type JoinPersonalDataNodeRegistrationWaitlistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *JoinPersonalDataNodeRegistrationWaitlistResponse) Reset() {
	*x = JoinPersonalDataNodeRegistrationWaitlistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinPersonalDataNodeRegistrationWaitlistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinPersonalDataNodeRegistrationWaitlistResponse) ProtoMessage() {}

func (x *JoinPersonalDataNodeRegistrationWaitlistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinPersonalDataNodeRegistrationWaitlistResponse.ProtoReflect.Descriptor instead.
func (*JoinPersonalDataNodeRegistrationWaitlistResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{28}
}

func (x *JoinPersonalDataNodeRegistrationWaitlistResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *JoinPersonalDataNodeRegistrationWaitlistResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RegisterPersonalDataNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token            string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Id               string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Code             string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	RemoteMacAddress string `protobuf:"bytes,4,opt,name=remote_mac_address,json=remoteMacAddress,proto3" json:"remote_mac_address,omitempty"`
}

func (x *RegisterPersonalDataNodeRequest) Reset() {
	*x = RegisterPersonalDataNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterPersonalDataNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterPersonalDataNodeRequest) ProtoMessage() {}

func (x *RegisterPersonalDataNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterPersonalDataNodeRequest.ProtoReflect.Descriptor instead.
func (*RegisterPersonalDataNodeRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{29}
}

func (x *RegisterPersonalDataNodeRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RegisterPersonalDataNodeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RegisterPersonalDataNodeRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RegisterPersonalDataNodeRequest) GetRemoteMacAddress() string {
	if x != nil {
		return x.RemoteMacAddress
	}
	return ""
}

type RegisterPersonalDataNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ApiKey  string `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *RegisterPersonalDataNodeResponse) Reset() {
	*x = RegisterPersonalDataNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterPersonalDataNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterPersonalDataNodeResponse) ProtoMessage() {}

func (x *RegisterPersonalDataNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterPersonalDataNodeResponse.ProtoReflect.Descriptor instead.
func (*RegisterPersonalDataNodeResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{30}
}

func (x *RegisterPersonalDataNodeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RegisterPersonalDataNodeResponse) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

type GetNetworkNodesListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token            string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	OnlyMy           bool   `protobuf:"varint,2,opt,name=only_my,json=onlyMy,proto3" json:"only_my,omitempty"`
	Offset           int64  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit            int64  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	RemoteMacAddress string `protobuf:"bytes,5,opt,name=remote_mac_address,json=remoteMacAddress,proto3" json:"remote_mac_address,omitempty"`
}

func (x *GetNetworkNodesListRequest) Reset() {
	*x = GetNetworkNodesListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkNodesListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkNodesListRequest) ProtoMessage() {}

func (x *GetNetworkNodesListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkNodesListRequest.ProtoReflect.Descriptor instead.
func (*GetNetworkNodesListRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{31}
}

func (x *GetNetworkNodesListRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *GetNetworkNodesListRequest) GetOnlyMy() bool {
	if x != nil {
		return x.OnlyMy
	}
	return false
}

func (x *GetNetworkNodesListRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetNetworkNodesListRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetNetworkNodesListRequest) GetRemoteMacAddress() string {
	if x != nil {
		return x.RemoteMacAddress
	}
	return ""
}

type GetNetworkNodesListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*NetworkNode `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetNetworkNodesListResponse) Reset() {
	*x = GetNetworkNodesListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkNodesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkNodesListResponse) ProtoMessage() {}

func (x *GetNetworkNodesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkNodesListResponse.ProtoReflect.Descriptor instead.
func (*GetNetworkNodesListResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{32}
}

func (x *GetNetworkNodesListResponse) GetData() []*NetworkNode {
	if x != nil {
		return x.Data
	}
	return nil
}

type JoinNetworkNodeRegistrationWaitlistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token            string          `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Url              string          `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Name             string          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description      string          `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Location         *v1.Geolocation `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	DomainName       string          `protobuf:"bytes,6,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	RemoteMacAddress string          `protobuf:"bytes,7,opt,name=remote_mac_address,json=remoteMacAddress,proto3" json:"remote_mac_address,omitempty"`
}

func (x *JoinNetworkNodeRegistrationWaitlistRequest) Reset() {
	*x = JoinNetworkNodeRegistrationWaitlistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinNetworkNodeRegistrationWaitlistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinNetworkNodeRegistrationWaitlistRequest) ProtoMessage() {}

func (x *JoinNetworkNodeRegistrationWaitlistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinNetworkNodeRegistrationWaitlistRequest.ProtoReflect.Descriptor instead.
func (*JoinNetworkNodeRegistrationWaitlistRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{33}
}

func (x *JoinNetworkNodeRegistrationWaitlistRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *JoinNetworkNodeRegistrationWaitlistRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *JoinNetworkNodeRegistrationWaitlistRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JoinNetworkNodeRegistrationWaitlistRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *JoinNetworkNodeRegistrationWaitlistRequest) GetLocation() *v1.Geolocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *JoinNetworkNodeRegistrationWaitlistRequest) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *JoinNetworkNodeRegistrationWaitlistRequest) GetRemoteMacAddress() string {
	if x != nil {
		return x.RemoteMacAddress
	}
	return ""
}

type JoinNetworkNodeRegistrationWaitlistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *JoinNetworkNodeRegistrationWaitlistResponse) Reset() {
	*x = JoinNetworkNodeRegistrationWaitlistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinNetworkNodeRegistrationWaitlistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinNetworkNodeRegistrationWaitlistResponse) ProtoMessage() {}

func (x *JoinNetworkNodeRegistrationWaitlistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinNetworkNodeRegistrationWaitlistResponse.ProtoReflect.Descriptor instead.
func (*JoinNetworkNodeRegistrationWaitlistResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{34}
}

func (x *JoinNetworkNodeRegistrationWaitlistResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *JoinNetworkNodeRegistrationWaitlistResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RegisterNetworkNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token            string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Id               string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Code             string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	RemoteMacAddress string `protobuf:"bytes,4,opt,name=remote_mac_address,json=remoteMacAddress,proto3" json:"remote_mac_address,omitempty"`
}

func (x *RegisterNetworkNodeRequest) Reset() {
	*x = RegisterNetworkNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterNetworkNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterNetworkNodeRequest) ProtoMessage() {}

func (x *RegisterNetworkNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterNetworkNodeRequest.ProtoReflect.Descriptor instead.
func (*RegisterNetworkNodeRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{35}
}

func (x *RegisterNetworkNodeRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RegisterNetworkNodeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RegisterNetworkNodeRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RegisterNetworkNodeRequest) GetRemoteMacAddress() string {
	if x != nil {
		return x.RemoteMacAddress
	}
	return ""
}

type RegisterNetworkNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ApiKey  string `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *RegisterNetworkNodeResponse) Reset() {
	*x = RegisterNetworkNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterNetworkNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterNetworkNodeResponse) ProtoMessage() {}

func (x *RegisterNetworkNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterNetworkNodeResponse.ProtoReflect.Descriptor instead.
func (*RegisterNetworkNodeResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{36}
}

func (x *RegisterNetworkNodeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RegisterNetworkNodeResponse) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

type GetNetworkWardensListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token            string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	OnlyMy           bool   `protobuf:"varint,2,opt,name=only_my,json=onlyMy,proto3" json:"only_my,omitempty"`
	Offset           int64  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit            int64  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	RemoteMacAddress string `protobuf:"bytes,5,opt,name=remote_mac_address,json=remoteMacAddress,proto3" json:"remote_mac_address,omitempty"`
}

func (x *GetNetworkWardensListRequest) Reset() {
	*x = GetNetworkWardensListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkWardensListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkWardensListRequest) ProtoMessage() {}

func (x *GetNetworkWardensListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkWardensListRequest.ProtoReflect.Descriptor instead.
func (*GetNetworkWardensListRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{37}
}

func (x *GetNetworkWardensListRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *GetNetworkWardensListRequest) GetOnlyMy() bool {
	if x != nil {
		return x.OnlyMy
	}
	return false
}

func (x *GetNetworkWardensListRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetNetworkWardensListRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetNetworkWardensListRequest) GetRemoteMacAddress() string {
	if x != nil {
		return x.RemoteMacAddress
	}
	return ""
}

type GetNetworkWardensListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*NetworkWarden `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetNetworkWardensListResponse) Reset() {
	*x = GetNetworkWardensListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkWardensListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkWardensListResponse) ProtoMessage() {}

func (x *GetNetworkWardensListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkWardensListResponse.ProtoReflect.Descriptor instead.
func (*GetNetworkWardensListResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{38}
}

func (x *GetNetworkWardensListResponse) GetData() []*NetworkWarden {
	if x != nil {
		return x.Data
	}
	return nil
}

type RegisterNetworkWardenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string  `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Description   string  `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	AddressSuffix string  `protobuf:"bytes,7,opt,name=address_suffix,json=addressSuffix,proto3" json:"address_suffix,omitempty"`
	PdnCapacity   uint64  `protobuf:"varint,8,opt,name=pdn_capacity,json=pdnCapacity,proto3" json:"pdn_capacity,omitempty"`
	NnCapacity    uint64  `protobuf:"varint,9,opt,name=nn_capacity,json=nnCapacity,proto3" json:"nn_capacity,omitempty"`
	Url           string  `protobuf:"bytes,10,opt,name=url,proto3" json:"url,omitempty"`
	Version       string  `protobuf:"bytes,13,opt,name=version,proto3" json:"version,omitempty"`
	RateLimit     float64 `protobuf:"fixed64,14,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *RegisterNetworkWardenRequest) Reset() {
	*x = RegisterNetworkWardenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterNetworkWardenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterNetworkWardenRequest) ProtoMessage() {}

func (x *RegisterNetworkWardenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterNetworkWardenRequest.ProtoReflect.Descriptor instead.
func (*RegisterNetworkWardenRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{39}
}

func (x *RegisterNetworkWardenRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RegisterNetworkWardenRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegisterNetworkWardenRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RegisterNetworkWardenRequest) GetAddressSuffix() string {
	if x != nil {
		return x.AddressSuffix
	}
	return ""
}

func (x *RegisterNetworkWardenRequest) GetPdnCapacity() uint64 {
	if x != nil {
		return x.PdnCapacity
	}
	return 0
}

func (x *RegisterNetworkWardenRequest) GetNnCapacity() uint64 {
	if x != nil {
		return x.NnCapacity
	}
	return 0
}

func (x *RegisterNetworkWardenRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *RegisterNetworkWardenRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RegisterNetworkWardenRequest) GetRateLimit() float64 {
	if x != nil {
		return x.RateLimit
	}
	return 0
}

type RegisterNetworkWardenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *RegisterNetworkWardenResponse) Reset() {
	*x = RegisterNetworkWardenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterNetworkWardenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterNetworkWardenResponse) ProtoMessage() {}

func (x *RegisterNetworkWardenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_network_warden_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterNetworkWardenResponse.ProtoReflect.Descriptor instead.
func (*RegisterNetworkWardenResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_network_warden_service_proto_rawDescGZIP(), []int{40}
}

func (x *RegisterNetworkWardenResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_networkwarden_v1_network_warden_service_proto protoreflect.FileDescriptor

var file_networkwarden_v1_network_warden_service_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2f,
	0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x1a, 0x1b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2f, 0x76, 0x31, 0x2f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x29, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb0, 0x03,
	0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x64, 0x5f, 0x67,
	0x65, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69,
	0x64, 0x47, 0x65, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x64, 0x6e, 0x5f, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x64, 0x6e,
	0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6e, 0x5f, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6e,
	0x6e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x6c, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x76,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x50,
	0x69, 0x6e, 0x67, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x2c, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x45,
	0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x3f, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x4b, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x22, 0x84, 0x02, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x16, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x5b, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x22, 0x93, 0x01,
	0x0a, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x3d, 0x0a, 0x21, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x48, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x5b, 0x0a, 0x15, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x61, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63,
	0x68, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3a, 0x0a, 0x1e, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0x97, 0x01, 0x0a, 0x12, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x50, 0x0a, 0x13, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x59, 0x0a,
	0x13, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x30, 0x0a, 0x14, 0x4c, 0x6f, 0x67, 0x6f,
	0x75, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x6e, 0x0a, 0x19, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x12,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x57, 0x0a, 0x1a, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0xa0, 0x01, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x38, 0x0a, 0x1c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x22, 0xbf, 0x01, 0x0a, 0x13, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x48, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28,
	0x0a, 0x10, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x30, 0x0a, 0x14, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x48, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x73, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d,
	0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x41, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x75, 0x0a, 0x13,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x30, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x17, 0x0a, 0x07, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6d, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x79, 0x4d, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x5a, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xf1, 0x01, 0x0a, 0x2f, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x69, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x5c, 0x0a, 0x30, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x69, 0x74, 0x6c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x55,
	0x0a, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0xa7, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x6e,
	0x6c, 0x79, 0x5f, 0x6d, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e, 0x6c,
	0x79, 0x4d, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x50, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x8d, 0x02, 0x0a, 0x2a, 0x4a, 0x6f, 0x69, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x61, 0x69, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x57, 0x0a, 0x2b, 0x4a, 0x6f, 0x69, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x57, 0x61, 0x69, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x1a, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x50, 0x0a, 0x1b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70,
	0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69,
	0x4b, 0x65, 0x79, 0x22, 0xa9, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x6e,
	0x6c, 0x79, 0x5f, 0x6d, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e, 0x6c,
	0x79, 0x4d, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x54, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72,
	0x64, 0x65, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9a, 0x02, 0x0a, 0x1c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x75, 0x66,
	0x66, 0x69, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x64, 0x6e, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x64, 0x6e, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6e, 0x5f, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6e, 0x6e, 0x43,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x39, 0x0a, 0x1d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2a, 0x8e, 0x01,
	0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x12, 0x2d, 0x0a, 0x29, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52,
	0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x41, 0x43, 0x48, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x41, 0x43, 0x48, 0x5f, 0x50,
	0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x01, 0x12, 0x1f, 0x0a,
	0x1b, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x50,
	0x50, 0x52, 0x4f, 0x41, 0x43, 0x48, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x02, 0x32, 0xbd,
	0x12, 0x0a, 0x14, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x24, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x63, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x48, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x48,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x48,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a,
	0x16, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x6e,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65,
	0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0b, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74,
	0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74,
	0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2b, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2d,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a,
	0x0c, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x25, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x48, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x12, 0x25, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x81, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x32, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xb1, 0x01, 0x0a, 0x28, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x69, 0x74, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x41, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x69, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x69, 0x74, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x18, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0xa2, 0x01, 0x0a, 0x23, 0x4a, 0x6f, 0x69, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x61, 0x69, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x69,
	0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x69, 0x74, 0x6c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x69, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x12, 0x2e, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xd1,
	0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x42, 0x19, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x65, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x6f, 0x73, 0x2d, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e,
	0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x4e, 0x58, 0x58, 0xaa, 0x02, 0x10, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x10, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x1c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_networkwarden_v1_network_warden_service_proto_rawDescOnce sync.Once
	file_networkwarden_v1_network_warden_service_proto_rawDescData = file_networkwarden_v1_network_warden_service_proto_rawDesc
)

func file_networkwarden_v1_network_warden_service_proto_rawDescGZIP() []byte {
	file_networkwarden_v1_network_warden_service_proto_rawDescOnce.Do(func() {
		file_networkwarden_v1_network_warden_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_networkwarden_v1_network_warden_service_proto_rawDescData)
	})
	return file_networkwarden_v1_network_warden_service_proto_rawDescData
}

var file_networkwarden_v1_network_warden_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_networkwarden_v1_network_warden_service_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_networkwarden_v1_network_warden_service_proto_goTypes = []interface{}{
	(ConfirmationApproach)(0),                                // 0: networkwarden.v1.ConfirmationApproach
	(*NetworkWarden)(nil),                                    // 1: networkwarden.v1.NetworkWarden
	(*CheckEmailsRequest)(nil),                               // 2: networkwarden.v1.CheckEmailsRequest
	(*CheckEmailsResponse)(nil),                              // 3: networkwarden.v1.CheckEmailsResponse
	(*CheckPhoneNumbersRequest)(nil),                         // 4: networkwarden.v1.CheckPhoneNumbersRequest
	(*CheckPhoneNumbersResponse)(nil),                        // 5: networkwarden.v1.CheckPhoneNumbersResponse
	(*RegisterHolderRequest)(nil),                            // 6: networkwarden.v1.RegisterHolderRequest
	(*RegisterHolderResponse)(nil),                           // 7: networkwarden.v1.RegisterHolderResponse
	(*ConfirmHolderRegistrationRequest)(nil),                 // 8: networkwarden.v1.ConfirmHolderRegistrationRequest
	(*ConfirmHolderRegistrationResponse)(nil),                // 9: networkwarden.v1.ConfirmHolderRegistrationResponse
	(*ResendConfirmationCodeRequest)(nil),                    // 10: networkwarden.v1.ResendConfirmationCodeRequest
	(*ResendConfirmationCodeResponse)(nil),                   // 11: networkwarden.v1.ResendConfirmationCodeResponse
	(*LoginHolderRequest)(nil),                               // 12: networkwarden.v1.LoginHolderRequest
	(*LoginHolderResponse)(nil),                              // 13: networkwarden.v1.LoginHolderResponse
	(*LogoutHolderRequest)(nil),                              // 14: networkwarden.v1.LogoutHolderRequest
	(*LogoutHolderResponse)(nil),                             // 15: networkwarden.v1.LogoutHolderResponse
	(*RefreshHolderTokenRequest)(nil),                        // 16: networkwarden.v1.RefreshHolderTokenRequest
	(*RefreshHolderTokenResponse)(nil),                       // 17: networkwarden.v1.RefreshHolderTokenResponse
	(*ChangeHolderPasswordRequest)(nil),                      // 18: networkwarden.v1.ChangeHolderPasswordRequest
	(*ChangeHolderPasswordResponse)(nil),                     // 19: networkwarden.v1.ChangeHolderPasswordResponse
	(*ModifyHolderRequest)(nil),                              // 20: networkwarden.v1.ModifyHolderRequest
	(*ModifyHolderResponse)(nil),                             // 21: networkwarden.v1.ModifyHolderResponse
	(*GetHolderRequest)(nil),                                 // 22: networkwarden.v1.GetHolderRequest
	(*GetHolderResponse)(nil),                                // 23: networkwarden.v1.GetHolderResponse
	(*DeleteHolderRequest)(nil),                              // 24: networkwarden.v1.DeleteHolderRequest
	(*DeleteHolderResponse)(nil),                             // 25: networkwarden.v1.DeleteHolderResponse
	(*GetPersonalDataNodesListRequest)(nil),                  // 26: networkwarden.v1.GetPersonalDataNodesListRequest
	(*GetPersonalDataNodesListResponse)(nil),                 // 27: networkwarden.v1.GetPersonalDataNodesListResponse
	(*JoinPersonalDataNodeRegistrationWaitlistRequest)(nil),  // 28: networkwarden.v1.JoinPersonalDataNodeRegistrationWaitlistRequest
	(*JoinPersonalDataNodeRegistrationWaitlistResponse)(nil), // 29: networkwarden.v1.JoinPersonalDataNodeRegistrationWaitlistResponse
	(*RegisterPersonalDataNodeRequest)(nil),                  // 30: networkwarden.v1.RegisterPersonalDataNodeRequest
	(*RegisterPersonalDataNodeResponse)(nil),                 // 31: networkwarden.v1.RegisterPersonalDataNodeResponse
	(*GetNetworkNodesListRequest)(nil),                       // 32: networkwarden.v1.GetNetworkNodesListRequest
	(*GetNetworkNodesListResponse)(nil),                      // 33: networkwarden.v1.GetNetworkNodesListResponse
	(*JoinNetworkNodeRegistrationWaitlistRequest)(nil),       // 34: networkwarden.v1.JoinNetworkNodeRegistrationWaitlistRequest
	(*JoinNetworkNodeRegistrationWaitlistResponse)(nil),      // 35: networkwarden.v1.JoinNetworkNodeRegistrationWaitlistResponse
	(*RegisterNetworkNodeRequest)(nil),                       // 36: networkwarden.v1.RegisterNetworkNodeRequest
	(*RegisterNetworkNodeResponse)(nil),                      // 37: networkwarden.v1.RegisterNetworkNodeResponse
	(*GetNetworkWardensListRequest)(nil),                     // 38: networkwarden.v1.GetNetworkWardensListRequest
	(*GetNetworkWardensListResponse)(nil),                    // 39: networkwarden.v1.GetNetworkWardensListResponse
	(*RegisterNetworkWardenRequest)(nil),                     // 40: networkwarden.v1.RegisterNetworkWardenRequest
	(*RegisterNetworkWardenResponse)(nil),                    // 41: networkwarden.v1.RegisterNetworkWardenResponse
	(*Holder)(nil),                                           // 42: networkwarden.v1.Holder
	(*PersonalDataNode)(nil),                                 // 43: networkwarden.v1.PersonalDataNode
	(*v1.Geolocation)(nil),                                   // 44: common.v1.Geolocation
	(*NetworkNode)(nil),                                      // 45: networkwarden.v1.NetworkNode
}
var file_networkwarden_v1_network_warden_service_proto_depIdxs = []int32{
	0,  // 0: networkwarden.v1.RegisterHolderResponse.confirmation_approach:type_name -> networkwarden.v1.ConfirmationApproach
	0,  // 1: networkwarden.v1.ResendConfirmationCodeRequest.confirmation_approach:type_name -> networkwarden.v1.ConfirmationApproach
	42, // 2: networkwarden.v1.GetHolderResponse.data:type_name -> networkwarden.v1.Holder
	43, // 3: networkwarden.v1.GetPersonalDataNodesListResponse.data:type_name -> networkwarden.v1.PersonalDataNode
	44, // 4: networkwarden.v1.JoinPersonalDataNodeRegistrationWaitlistRequest.location:type_name -> common.v1.Geolocation
	45, // 5: networkwarden.v1.GetNetworkNodesListResponse.data:type_name -> networkwarden.v1.NetworkNode
	44, // 6: networkwarden.v1.JoinNetworkNodeRegistrationWaitlistRequest.location:type_name -> common.v1.Geolocation
	1,  // 7: networkwarden.v1.GetNetworkWardensListResponse.data:type_name -> networkwarden.v1.NetworkWarden
	2,  // 8: networkwarden.v1.NetworkWardenService.CheckEmails:input_type -> networkwarden.v1.CheckEmailsRequest
	4,  // 9: networkwarden.v1.NetworkWardenService.CheckPhoneNumbers:input_type -> networkwarden.v1.CheckPhoneNumbersRequest
	6,  // 10: networkwarden.v1.NetworkWardenService.RegisterHolder:input_type -> networkwarden.v1.RegisterHolderRequest
	8,  // 11: networkwarden.v1.NetworkWardenService.ConfirmHolderRegistration:input_type -> networkwarden.v1.ConfirmHolderRegistrationRequest
	10, // 12: networkwarden.v1.NetworkWardenService.ResendConfirmationCode:input_type -> networkwarden.v1.ResendConfirmationCodeRequest
	12, // 13: networkwarden.v1.NetworkWardenService.LoginHolder:input_type -> networkwarden.v1.LoginHolderRequest
	14, // 14: networkwarden.v1.NetworkWardenService.LogoutHolder:input_type -> networkwarden.v1.LogoutHolderRequest
	16, // 15: networkwarden.v1.NetworkWardenService.RefreshHolderToken:input_type -> networkwarden.v1.RefreshHolderTokenRequest
	18, // 16: networkwarden.v1.NetworkWardenService.ChangeHolderPassword:input_type -> networkwarden.v1.ChangeHolderPasswordRequest
	20, // 17: networkwarden.v1.NetworkWardenService.ModifyHolder:input_type -> networkwarden.v1.ModifyHolderRequest
	22, // 18: networkwarden.v1.NetworkWardenService.GetHolder:input_type -> networkwarden.v1.GetHolderRequest
	24, // 19: networkwarden.v1.NetworkWardenService.DeleteHolder:input_type -> networkwarden.v1.DeleteHolderRequest
	26, // 20: networkwarden.v1.NetworkWardenService.GetPersonalDataNodesList:input_type -> networkwarden.v1.GetPersonalDataNodesListRequest
	28, // 21: networkwarden.v1.NetworkWardenService.JoinPersonalDataNodeRegistrationWaitlist:input_type -> networkwarden.v1.JoinPersonalDataNodeRegistrationWaitlistRequest
	30, // 22: networkwarden.v1.NetworkWardenService.RegisterPersonalDataNode:input_type -> networkwarden.v1.RegisterPersonalDataNodeRequest
	32, // 23: networkwarden.v1.NetworkWardenService.GetNetworkNodesList:input_type -> networkwarden.v1.GetNetworkNodesListRequest
	34, // 24: networkwarden.v1.NetworkWardenService.JoinNetworkNodeRegistrationWaitlist:input_type -> networkwarden.v1.JoinNetworkNodeRegistrationWaitlistRequest
	36, // 25: networkwarden.v1.NetworkWardenService.RegisterNetworkNode:input_type -> networkwarden.v1.RegisterNetworkNodeRequest
	38, // 26: networkwarden.v1.NetworkWardenService.GetNetworkWardensList:input_type -> networkwarden.v1.GetNetworkWardensListRequest
	40, // 27: networkwarden.v1.NetworkWardenService.RegisterNetworkWarden:input_type -> networkwarden.v1.RegisterNetworkWardenRequest
	3,  // 28: networkwarden.v1.NetworkWardenService.CheckEmails:output_type -> networkwarden.v1.CheckEmailsResponse
	5,  // 29: networkwarden.v1.NetworkWardenService.CheckPhoneNumbers:output_type -> networkwarden.v1.CheckPhoneNumbersResponse
	7,  // 30: networkwarden.v1.NetworkWardenService.RegisterHolder:output_type -> networkwarden.v1.RegisterHolderResponse
	9,  // 31: networkwarden.v1.NetworkWardenService.ConfirmHolderRegistration:output_type -> networkwarden.v1.ConfirmHolderRegistrationResponse
	11, // 32: networkwarden.v1.NetworkWardenService.ResendConfirmationCode:output_type -> networkwarden.v1.ResendConfirmationCodeResponse
	13, // 33: networkwarden.v1.NetworkWardenService.LoginHolder:output_type -> networkwarden.v1.LoginHolderResponse
	15, // 34: networkwarden.v1.NetworkWardenService.LogoutHolder:output_type -> networkwarden.v1.LogoutHolderResponse
	17, // 35: networkwarden.v1.NetworkWardenService.RefreshHolderToken:output_type -> networkwarden.v1.RefreshHolderTokenResponse
	19, // 36: networkwarden.v1.NetworkWardenService.ChangeHolderPassword:output_type -> networkwarden.v1.ChangeHolderPasswordResponse
	21, // 37: networkwarden.v1.NetworkWardenService.ModifyHolder:output_type -> networkwarden.v1.ModifyHolderResponse
	23, // 38: networkwarden.v1.NetworkWardenService.GetHolder:output_type -> networkwarden.v1.GetHolderResponse
	25, // 39: networkwarden.v1.NetworkWardenService.DeleteHolder:output_type -> networkwarden.v1.DeleteHolderResponse
	27, // 40: networkwarden.v1.NetworkWardenService.GetPersonalDataNodesList:output_type -> networkwarden.v1.GetPersonalDataNodesListResponse
	29, // 41: networkwarden.v1.NetworkWardenService.JoinPersonalDataNodeRegistrationWaitlist:output_type -> networkwarden.v1.JoinPersonalDataNodeRegistrationWaitlistResponse
	31, // 42: networkwarden.v1.NetworkWardenService.RegisterPersonalDataNode:output_type -> networkwarden.v1.RegisterPersonalDataNodeResponse
	33, // 43: networkwarden.v1.NetworkWardenService.GetNetworkNodesList:output_type -> networkwarden.v1.GetNetworkNodesListResponse
	35, // 44: networkwarden.v1.NetworkWardenService.JoinNetworkNodeRegistrationWaitlist:output_type -> networkwarden.v1.JoinNetworkNodeRegistrationWaitlistResponse
	37, // 45: networkwarden.v1.NetworkWardenService.RegisterNetworkNode:output_type -> networkwarden.v1.RegisterNetworkNodeResponse
	39, // 46: networkwarden.v1.NetworkWardenService.GetNetworkWardensList:output_type -> networkwarden.v1.GetNetworkWardensListResponse
	41, // 47: networkwarden.v1.NetworkWardenService.RegisterNetworkWarden:output_type -> networkwarden.v1.RegisterNetworkWardenResponse
	28, // [28:48] is the sub-list for method output_type
	8,  // [8:28] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_networkwarden_v1_network_warden_service_proto_init() }
func file_networkwarden_v1_network_warden_service_proto_init() {
	if File_networkwarden_v1_network_warden_service_proto != nil {
		return
	}
	file_networkwarden_v1_holder_proto_init()
	file_networkwarden_v1_network_node_proto_init()
	file_networkwarden_v1_personal_data_node_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_networkwarden_v1_network_warden_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkWarden); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckEmailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckEmailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPhoneNumbersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPhoneNumbersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterHolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterHolderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmHolderRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmHolderRegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResendConfirmationCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResendConfirmationCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginHolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginHolderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoutHolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoutHolderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshHolderTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshHolderTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeHolderPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeHolderPasswordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyHolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyHolderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHolderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHolderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPersonalDataNodesListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPersonalDataNodesListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinPersonalDataNodeRegistrationWaitlistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinPersonalDataNodeRegistrationWaitlistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterPersonalDataNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterPersonalDataNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetworkNodesListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetworkNodesListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinNetworkNodeRegistrationWaitlistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinNetworkNodeRegistrationWaitlistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterNetworkNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterNetworkNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetworkWardensListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetworkWardensListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterNetworkWardenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_network_warden_service_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterNetworkWardenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_networkwarden_v1_network_warden_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_networkwarden_v1_network_warden_service_proto_goTypes,
		DependencyIndexes: file_networkwarden_v1_network_warden_service_proto_depIdxs,
		EnumInfos:         file_networkwarden_v1_network_warden_service_proto_enumTypes,
		MessageInfos:      file_networkwarden_v1_network_warden_service_proto_msgTypes,
	}.Build()
	File_networkwarden_v1_network_warden_service_proto = out.File
	file_networkwarden_v1_network_warden_service_proto_rawDesc = nil
	file_networkwarden_v1_network_warden_service_proto_goTypes = nil
	file_networkwarden_v1_network_warden_service_proto_depIdxs = nil
}
