// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: networkwarden/v1/network_warden_service.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on NetworkWarden with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NetworkWarden) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NetworkWarden with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NetworkWardenMultiError, or
// nil if none found.
func (m *NetworkWarden) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWarden) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for LastModifiedAt

	// no validation rules for IdGenNode

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for AddressSuffix

	// no validation rules for PdnCapacity

	// no validation rules for NnCapacity

	// no validation rules for Url

	// no validation rules for Alive

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetRateLimit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NetworkWardenValidationError{
					field:  "RateLimit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NetworkWardenValidationError{
					field:  "RateLimit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRateLimit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NetworkWardenValidationError{
				field:  "RateLimit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.LastPingedAt != nil {
		// no validation rules for LastPingedAt
	}

	if len(errors) > 0 {
		return NetworkWardenMultiError(errors)
	}

	return nil
}

// NetworkWardenMultiError is an error wrapping multiple validation errors
// returned by NetworkWarden.ValidateAll() if the designated constraints
// aren't met.
type NetworkWardenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenMultiError) AllErrors() []error { return m }

// NetworkWardenValidationError is the validation error returned by
// NetworkWarden.Validate if the designated constraints aren't met.
type NetworkWardenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkWardenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NetworkWardenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkWardenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenValidationError) ErrorName() string { return "NetworkWardenValidationError" }

// Error satisfies the builtin error interface
func (e NetworkWardenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWarden.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenValidationError{}

// Validate checks the field values on CheckEmailsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckEmailsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckEmailsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckEmailsRequestMultiError, or nil if none found.
func (m *CheckEmailsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckEmailsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CheckEmailsRequestMultiError(errors)
	}

	return nil
}

// CheckEmailsRequestMultiError is an error wrapping multiple validation errors
// returned by CheckEmailsRequest.ValidateAll() if the designated constraints
// aren't met.
type CheckEmailsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckEmailsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckEmailsRequestMultiError) AllErrors() []error { return m }

// CheckEmailsRequestValidationError is the validation error returned by
// CheckEmailsRequest.Validate if the designated constraints aren't met.
type CheckEmailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckEmailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckEmailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckEmailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckEmailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckEmailsRequestValidationError) ErrorName() string {
	return "CheckEmailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckEmailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckEmailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckEmailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckEmailsRequestValidationError{}

// Validate checks the field values on CheckEmailsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckEmailsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckEmailsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckEmailsResponseMultiError, or nil if none found.
func (m *CheckEmailsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckEmailsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Valid

	if len(errors) > 0 {
		return CheckEmailsResponseMultiError(errors)
	}

	return nil
}

// CheckEmailsResponseMultiError is an error wrapping multiple validation
// errors returned by CheckEmailsResponse.ValidateAll() if the designated
// constraints aren't met.
type CheckEmailsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckEmailsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckEmailsResponseMultiError) AllErrors() []error { return m }

// CheckEmailsResponseValidationError is the validation error returned by
// CheckEmailsResponse.Validate if the designated constraints aren't met.
type CheckEmailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckEmailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckEmailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckEmailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckEmailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckEmailsResponseValidationError) ErrorName() string {
	return "CheckEmailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckEmailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckEmailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckEmailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckEmailsResponseValidationError{}

// Validate checks the field values on CheckPhoneNumbersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckPhoneNumbersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckPhoneNumbersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckPhoneNumbersRequestMultiError, or nil if none found.
func (m *CheckPhoneNumbersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckPhoneNumbersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CheckPhoneNumbersRequestMultiError(errors)
	}

	return nil
}

// CheckPhoneNumbersRequestMultiError is an error wrapping multiple validation
// errors returned by CheckPhoneNumbersRequest.ValidateAll() if the designated
// constraints aren't met.
type CheckPhoneNumbersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckPhoneNumbersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckPhoneNumbersRequestMultiError) AllErrors() []error { return m }

// CheckPhoneNumbersRequestValidationError is the validation error returned by
// CheckPhoneNumbersRequest.Validate if the designated constraints aren't met.
type CheckPhoneNumbersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckPhoneNumbersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckPhoneNumbersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckPhoneNumbersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckPhoneNumbersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckPhoneNumbersRequestValidationError) ErrorName() string {
	return "CheckPhoneNumbersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckPhoneNumbersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckPhoneNumbersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckPhoneNumbersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckPhoneNumbersRequestValidationError{}

// Validate checks the field values on CheckPhoneNumbersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckPhoneNumbersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckPhoneNumbersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckPhoneNumbersResponseMultiError, or nil if none found.
func (m *CheckPhoneNumbersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckPhoneNumbersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Valid

	if len(errors) > 0 {
		return CheckPhoneNumbersResponseMultiError(errors)
	}

	return nil
}

// CheckPhoneNumbersResponseMultiError is an error wrapping multiple validation
// errors returned by CheckPhoneNumbersResponse.ValidateAll() if the
// designated constraints aren't met.
type CheckPhoneNumbersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckPhoneNumbersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckPhoneNumbersResponseMultiError) AllErrors() []error { return m }

// CheckPhoneNumbersResponseValidationError is the validation error returned by
// CheckPhoneNumbersResponse.Validate if the designated constraints aren't met.
type CheckPhoneNumbersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckPhoneNumbersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckPhoneNumbersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckPhoneNumbersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckPhoneNumbersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckPhoneNumbersResponseValidationError) ErrorName() string {
	return "CheckPhoneNumbersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckPhoneNumbersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckPhoneNumbersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckPhoneNumbersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckPhoneNumbersResponseValidationError{}

// Validate checks the field values on RegisterHolderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterHolderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterHolderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterHolderRequestMultiError, or nil if none found.
func (m *RegisterHolderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterHolderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Password

	// no validation rules for RemoteMacAddress

	if m.AvatarImageUrl != nil {
		// no validation rules for AvatarImageUrl
	}

	if len(errors) > 0 {
		return RegisterHolderRequestMultiError(errors)
	}

	return nil
}

// RegisterHolderRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterHolderRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterHolderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterHolderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterHolderRequestMultiError) AllErrors() []error { return m }

// RegisterHolderRequestValidationError is the validation error returned by
// RegisterHolderRequest.Validate if the designated constraints aren't met.
type RegisterHolderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterHolderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterHolderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterHolderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterHolderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterHolderRequestValidationError) ErrorName() string {
	return "RegisterHolderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterHolderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterHolderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterHolderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterHolderRequestValidationError{}

// Validate checks the field values on RegisterHolderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterHolderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterHolderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterHolderResponseMultiError, or nil if none found.
func (m *RegisterHolderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterHolderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for RefreshToken

	// no validation rules for ConfirmationApproach

	if len(errors) > 0 {
		return RegisterHolderResponseMultiError(errors)
	}

	return nil
}

// RegisterHolderResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterHolderResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterHolderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterHolderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterHolderResponseMultiError) AllErrors() []error { return m }

// RegisterHolderResponseValidationError is the validation error returned by
// RegisterHolderResponse.Validate if the designated constraints aren't met.
type RegisterHolderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterHolderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterHolderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterHolderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterHolderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterHolderResponseValidationError) ErrorName() string {
	return "RegisterHolderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterHolderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterHolderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterHolderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterHolderResponseValidationError{}

// Validate checks the field values on ConfirmHolderRegistrationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ConfirmHolderRegistrationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmHolderRegistrationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ConfirmHolderRegistrationRequestMultiError, or nil if none found.
func (m *ConfirmHolderRegistrationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmHolderRegistrationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for ConfirmationCode

	// no validation rules for RemoteMacAddress

	if len(errors) > 0 {
		return ConfirmHolderRegistrationRequestMultiError(errors)
	}

	return nil
}

// ConfirmHolderRegistrationRequestMultiError is an error wrapping multiple
// validation errors returned by
// ConfirmHolderRegistrationRequest.ValidateAll() if the designated
// constraints aren't met.
type ConfirmHolderRegistrationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmHolderRegistrationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmHolderRegistrationRequestMultiError) AllErrors() []error { return m }

// ConfirmHolderRegistrationRequestValidationError is the validation error
// returned by ConfirmHolderRegistrationRequest.Validate if the designated
// constraints aren't met.
type ConfirmHolderRegistrationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmHolderRegistrationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmHolderRegistrationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmHolderRegistrationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmHolderRegistrationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmHolderRegistrationRequestValidationError) ErrorName() string {
	return "ConfirmHolderRegistrationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmHolderRegistrationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmHolderRegistrationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmHolderRegistrationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmHolderRegistrationRequestValidationError{}

// Validate checks the field values on ConfirmHolderRegistrationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ConfirmHolderRegistrationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmHolderRegistrationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ConfirmHolderRegistrationResponseMultiError, or nil if none found.
func (m *ConfirmHolderRegistrationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmHolderRegistrationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return ConfirmHolderRegistrationResponseMultiError(errors)
	}

	return nil
}

// ConfirmHolderRegistrationResponseMultiError is an error wrapping multiple
// validation errors returned by
// ConfirmHolderRegistrationResponse.ValidateAll() if the designated
// constraints aren't met.
type ConfirmHolderRegistrationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmHolderRegistrationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmHolderRegistrationResponseMultiError) AllErrors() []error { return m }

// ConfirmHolderRegistrationResponseValidationError is the validation error
// returned by ConfirmHolderRegistrationResponse.Validate if the designated
// constraints aren't met.
type ConfirmHolderRegistrationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmHolderRegistrationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmHolderRegistrationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmHolderRegistrationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmHolderRegistrationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmHolderRegistrationResponseValidationError) ErrorName() string {
	return "ConfirmHolderRegistrationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmHolderRegistrationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmHolderRegistrationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmHolderRegistrationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmHolderRegistrationResponseValidationError{}

// Validate checks the field values on ResendConfirmationCodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResendConfirmationCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResendConfirmationCodeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ResendConfirmationCodeRequestMultiError, or nil if none found.
func (m *ResendConfirmationCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResendConfirmationCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for ConfirmationApproach

	// no validation rules for RemoteMacAddress

	if len(errors) > 0 {
		return ResendConfirmationCodeRequestMultiError(errors)
	}

	return nil
}

// ResendConfirmationCodeRequestMultiError is an error wrapping multiple
// validation errors returned by ResendConfirmationCodeRequest.ValidateAll()
// if the designated constraints aren't met.
type ResendConfirmationCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResendConfirmationCodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResendConfirmationCodeRequestMultiError) AllErrors() []error { return m }

// ResendConfirmationCodeRequestValidationError is the validation error
// returned by ResendConfirmationCodeRequest.Validate if the designated
// constraints aren't met.
type ResendConfirmationCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResendConfirmationCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResendConfirmationCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResendConfirmationCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResendConfirmationCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResendConfirmationCodeRequestValidationError) ErrorName() string {
	return "ResendConfirmationCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResendConfirmationCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResendConfirmationCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResendConfirmationCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResendConfirmationCodeRequestValidationError{}

// Validate checks the field values on ResendConfirmationCodeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResendConfirmationCodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResendConfirmationCodeResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ResendConfirmationCodeResponseMultiError, or nil if none found.
func (m *ResendConfirmationCodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ResendConfirmationCodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return ResendConfirmationCodeResponseMultiError(errors)
	}

	return nil
}

// ResendConfirmationCodeResponseMultiError is an error wrapping multiple
// validation errors returned by ResendConfirmationCodeResponse.ValidateAll()
// if the designated constraints aren't met.
type ResendConfirmationCodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResendConfirmationCodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResendConfirmationCodeResponseMultiError) AllErrors() []error { return m }

// ResendConfirmationCodeResponseValidationError is the validation error
// returned by ResendConfirmationCodeResponse.Validate if the designated
// constraints aren't met.
type ResendConfirmationCodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResendConfirmationCodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResendConfirmationCodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResendConfirmationCodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResendConfirmationCodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResendConfirmationCodeResponseValidationError) ErrorName() string {
	return "ResendConfirmationCodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResendConfirmationCodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResendConfirmationCodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResendConfirmationCodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResendConfirmationCodeResponseValidationError{}

// Validate checks the field values on LoginHolderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginHolderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginHolderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginHolderRequestMultiError, or nil if none found.
func (m *LoginHolderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginHolderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for PhoneNumber

	// no validation rules for Password

	// no validation rules for RemoteMacAddress

	if len(errors) > 0 {
		return LoginHolderRequestMultiError(errors)
	}

	return nil
}

// LoginHolderRequestMultiError is an error wrapping multiple validation errors
// returned by LoginHolderRequest.ValidateAll() if the designated constraints
// aren't met.
type LoginHolderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginHolderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginHolderRequestMultiError) AllErrors() []error { return m }

// LoginHolderRequestValidationError is the validation error returned by
// LoginHolderRequest.Validate if the designated constraints aren't met.
type LoginHolderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginHolderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginHolderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginHolderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginHolderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginHolderRequestValidationError) ErrorName() string {
	return "LoginHolderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoginHolderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginHolderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginHolderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginHolderRequestValidationError{}

// Validate checks the field values on LoginHolderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginHolderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginHolderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginHolderResponseMultiError, or nil if none found.
func (m *LoginHolderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginHolderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return LoginHolderResponseMultiError(errors)
	}

	return nil
}

// LoginHolderResponseMultiError is an error wrapping multiple validation
// errors returned by LoginHolderResponse.ValidateAll() if the designated
// constraints aren't met.
type LoginHolderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginHolderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginHolderResponseMultiError) AllErrors() []error { return m }

// LoginHolderResponseValidationError is the validation error returned by
// LoginHolderResponse.Validate if the designated constraints aren't met.
type LoginHolderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginHolderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginHolderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginHolderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginHolderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginHolderResponseValidationError) ErrorName() string {
	return "LoginHolderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LoginHolderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginHolderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginHolderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginHolderResponseValidationError{}

// Validate checks the field values on LogoutHolderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LogoutHolderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutHolderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LogoutHolderRequestMultiError, or nil if none found.
func (m *LogoutHolderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutHolderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for RemoteMacAddress

	if len(errors) > 0 {
		return LogoutHolderRequestMultiError(errors)
	}

	return nil
}

// LogoutHolderRequestMultiError is an error wrapping multiple validation
// errors returned by LogoutHolderRequest.ValidateAll() if the designated
// constraints aren't met.
type LogoutHolderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutHolderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutHolderRequestMultiError) AllErrors() []error { return m }

// LogoutHolderRequestValidationError is the validation error returned by
// LogoutHolderRequest.Validate if the designated constraints aren't met.
type LogoutHolderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutHolderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutHolderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutHolderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutHolderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutHolderRequestValidationError) ErrorName() string {
	return "LogoutHolderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LogoutHolderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutHolderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutHolderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutHolderRequestValidationError{}

// Validate checks the field values on LogoutHolderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LogoutHolderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutHolderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LogoutHolderResponseMultiError, or nil if none found.
func (m *LogoutHolderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutHolderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return LogoutHolderResponseMultiError(errors)
	}

	return nil
}

// LogoutHolderResponseMultiError is an error wrapping multiple validation
// errors returned by LogoutHolderResponse.ValidateAll() if the designated
// constraints aren't met.
type LogoutHolderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutHolderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutHolderResponseMultiError) AllErrors() []error { return m }

// LogoutHolderResponseValidationError is the validation error returned by
// LogoutHolderResponse.Validate if the designated constraints aren't met.
type LogoutHolderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutHolderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutHolderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutHolderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutHolderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutHolderResponseValidationError) ErrorName() string {
	return "LogoutHolderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LogoutHolderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutHolderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutHolderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutHolderResponseValidationError{}

// Validate checks the field values on RefreshHolderTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshHolderTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshHolderTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshHolderTokenRequestMultiError, or nil if none found.
func (m *RefreshHolderTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshHolderTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RefreshToken

	// no validation rules for RemoteMacAddress

	if len(errors) > 0 {
		return RefreshHolderTokenRequestMultiError(errors)
	}

	return nil
}

// RefreshHolderTokenRequestMultiError is an error wrapping multiple validation
// errors returned by RefreshHolderTokenRequest.ValidateAll() if the
// designated constraints aren't met.
type RefreshHolderTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshHolderTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshHolderTokenRequestMultiError) AllErrors() []error { return m }

// RefreshHolderTokenRequestValidationError is the validation error returned by
// RefreshHolderTokenRequest.Validate if the designated constraints aren't met.
type RefreshHolderTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshHolderTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshHolderTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshHolderTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshHolderTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshHolderTokenRequestValidationError) ErrorName() string {
	return "RefreshHolderTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshHolderTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshHolderTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshHolderTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshHolderTokenRequestValidationError{}

// Validate checks the field values on RefreshHolderTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshHolderTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshHolderTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshHolderTokenResponseMultiError, or nil if none found.
func (m *RefreshHolderTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshHolderTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return RefreshHolderTokenResponseMultiError(errors)
	}

	return nil
}

// RefreshHolderTokenResponseMultiError is an error wrapping multiple
// validation errors returned by RefreshHolderTokenResponse.ValidateAll() if
// the designated constraints aren't met.
type RefreshHolderTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshHolderTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshHolderTokenResponseMultiError) AllErrors() []error { return m }

// RefreshHolderTokenResponseValidationError is the validation error returned
// by RefreshHolderTokenResponse.Validate if the designated constraints aren't met.
type RefreshHolderTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshHolderTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshHolderTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshHolderTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshHolderTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshHolderTokenResponseValidationError) ErrorName() string {
	return "RefreshHolderTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshHolderTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshHolderTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshHolderTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshHolderTokenResponseValidationError{}

// Validate checks the field values on ChangeHolderPasswordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeHolderPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeHolderPasswordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeHolderPasswordRequestMultiError, or nil if none found.
func (m *ChangeHolderPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeHolderPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Password

	// no validation rules for NewPassword

	// no validation rules for RemoteMacAddress

	if len(errors) > 0 {
		return ChangeHolderPasswordRequestMultiError(errors)
	}

	return nil
}

// ChangeHolderPasswordRequestMultiError is an error wrapping multiple
// validation errors returned by ChangeHolderPasswordRequest.ValidateAll() if
// the designated constraints aren't met.
type ChangeHolderPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeHolderPasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeHolderPasswordRequestMultiError) AllErrors() []error { return m }

// ChangeHolderPasswordRequestValidationError is the validation error returned
// by ChangeHolderPasswordRequest.Validate if the designated constraints
// aren't met.
type ChangeHolderPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeHolderPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeHolderPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeHolderPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeHolderPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeHolderPasswordRequestValidationError) ErrorName() string {
	return "ChangeHolderPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeHolderPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeHolderPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeHolderPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeHolderPasswordRequestValidationError{}

// Validate checks the field values on ChangeHolderPasswordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeHolderPasswordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeHolderPasswordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeHolderPasswordResponseMultiError, or nil if none found.
func (m *ChangeHolderPasswordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeHolderPasswordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return ChangeHolderPasswordResponseMultiError(errors)
	}

	return nil
}

// ChangeHolderPasswordResponseMultiError is an error wrapping multiple
// validation errors returned by ChangeHolderPasswordResponse.ValidateAll() if
// the designated constraints aren't met.
type ChangeHolderPasswordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeHolderPasswordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeHolderPasswordResponseMultiError) AllErrors() []error { return m }

// ChangeHolderPasswordResponseValidationError is the validation error returned
// by ChangeHolderPasswordResponse.Validate if the designated constraints
// aren't met.
type ChangeHolderPasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeHolderPasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeHolderPasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeHolderPasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeHolderPasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeHolderPasswordResponseValidationError) ErrorName() string {
	return "ChangeHolderPasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeHolderPasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeHolderPasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeHolderPasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeHolderPasswordResponseValidationError{}

// Validate checks the field values on ModifyHolderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModifyHolderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyHolderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifyHolderRequestMultiError, or nil if none found.
func (m *ModifyHolderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyHolderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for RemoteMacAddress

	if m.AvatarImageUrl != nil {
		// no validation rules for AvatarImageUrl
	}

	if len(errors) > 0 {
		return ModifyHolderRequestMultiError(errors)
	}

	return nil
}

// ModifyHolderRequestMultiError is an error wrapping multiple validation
// errors returned by ModifyHolderRequest.ValidateAll() if the designated
// constraints aren't met.
type ModifyHolderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyHolderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyHolderRequestMultiError) AllErrors() []error { return m }

// ModifyHolderRequestValidationError is the validation error returned by
// ModifyHolderRequest.Validate if the designated constraints aren't met.
type ModifyHolderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyHolderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyHolderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyHolderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyHolderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyHolderRequestValidationError) ErrorName() string {
	return "ModifyHolderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyHolderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyHolderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyHolderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyHolderRequestValidationError{}

// Validate checks the field values on ModifyHolderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModifyHolderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyHolderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifyHolderResponseMultiError, or nil if none found.
func (m *ModifyHolderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyHolderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return ModifyHolderResponseMultiError(errors)
	}

	return nil
}

// ModifyHolderResponseMultiError is an error wrapping multiple validation
// errors returned by ModifyHolderResponse.ValidateAll() if the designated
// constraints aren't met.
type ModifyHolderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyHolderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyHolderResponseMultiError) AllErrors() []error { return m }

// ModifyHolderResponseValidationError is the validation error returned by
// ModifyHolderResponse.Validate if the designated constraints aren't met.
type ModifyHolderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyHolderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyHolderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyHolderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyHolderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyHolderResponseValidationError) ErrorName() string {
	return "ModifyHolderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyHolderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyHolderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyHolderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyHolderResponseValidationError{}

// Validate checks the field values on GetHolderRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetHolderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHolderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHolderRequestMultiError, or nil if none found.
func (m *GetHolderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHolderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for HolderId

	// no validation rules for RemoteMacAddress

	if len(errors) > 0 {
		return GetHolderRequestMultiError(errors)
	}

	return nil
}

// GetHolderRequestMultiError is an error wrapping multiple validation errors
// returned by GetHolderRequest.ValidateAll() if the designated constraints
// aren't met.
type GetHolderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHolderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHolderRequestMultiError) AllErrors() []error { return m }

// GetHolderRequestValidationError is the validation error returned by
// GetHolderRequest.Validate if the designated constraints aren't met.
type GetHolderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHolderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHolderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHolderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHolderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHolderRequestValidationError) ErrorName() string { return "GetHolderRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetHolderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHolderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHolderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHolderRequestValidationError{}

// Validate checks the field values on GetHolderResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetHolderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHolderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHolderResponseMultiError, or nil if none found.
func (m *GetHolderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHolderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetHolderResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetHolderResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetHolderResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetHolderResponseMultiError(errors)
	}

	return nil
}

// GetHolderResponseMultiError is an error wrapping multiple validation errors
// returned by GetHolderResponse.ValidateAll() if the designated constraints
// aren't met.
type GetHolderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHolderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHolderResponseMultiError) AllErrors() []error { return m }

// GetHolderResponseValidationError is the validation error returned by
// GetHolderResponse.Validate if the designated constraints aren't met.
type GetHolderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHolderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHolderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHolderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHolderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHolderResponseValidationError) ErrorName() string {
	return "GetHolderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetHolderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHolderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHolderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHolderResponseValidationError{}

// Validate checks the field values on DeleteHolderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteHolderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteHolderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteHolderRequestMultiError, or nil if none found.
func (m *DeleteHolderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteHolderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Password

	// no validation rules for RemoteMacAddress

	if len(errors) > 0 {
		return DeleteHolderRequestMultiError(errors)
	}

	return nil
}

// DeleteHolderRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteHolderRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteHolderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteHolderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteHolderRequestMultiError) AllErrors() []error { return m }

// DeleteHolderRequestValidationError is the validation error returned by
// DeleteHolderRequest.Validate if the designated constraints aren't met.
type DeleteHolderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteHolderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteHolderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteHolderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteHolderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteHolderRequestValidationError) ErrorName() string {
	return "DeleteHolderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteHolderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteHolderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteHolderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteHolderRequestValidationError{}

// Validate checks the field values on DeleteHolderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteHolderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteHolderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteHolderResponseMultiError, or nil if none found.
func (m *DeleteHolderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteHolderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteHolderResponseMultiError(errors)
	}

	return nil
}

// DeleteHolderResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteHolderResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteHolderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteHolderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteHolderResponseMultiError) AllErrors() []error { return m }

// DeleteHolderResponseValidationError is the validation error returned by
// DeleteHolderResponse.Validate if the designated constraints aren't met.
type DeleteHolderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteHolderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteHolderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteHolderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteHolderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteHolderResponseValidationError) ErrorName() string {
	return "DeleteHolderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteHolderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteHolderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteHolderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteHolderResponseValidationError{}

// Validate checks the field values on GetPersonalDataNodesListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPersonalDataNodesListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPersonalDataNodesListRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPersonalDataNodesListRequestMultiError, or nil if none found.
func (m *GetPersonalDataNodesListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPersonalDataNodesListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RemoteMacAddress

	if m.Token != nil {
		// no validation rules for Token
	}

	if m.OnlyMy != nil {
		// no validation rules for OnlyMy
	}

	if m.Pagination != nil {

		if all {
			switch v := interface{}(m.GetPagination()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPersonalDataNodesListRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPersonalDataNodesListRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPersonalDataNodesListRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPersonalDataNodesListRequestMultiError(errors)
	}

	return nil
}

// GetPersonalDataNodesListRequestMultiError is an error wrapping multiple
// validation errors returned by GetPersonalDataNodesListRequest.ValidateAll()
// if the designated constraints aren't met.
type GetPersonalDataNodesListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPersonalDataNodesListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPersonalDataNodesListRequestMultiError) AllErrors() []error { return m }

// GetPersonalDataNodesListRequestValidationError is the validation error
// returned by GetPersonalDataNodesListRequest.Validate if the designated
// constraints aren't met.
type GetPersonalDataNodesListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPersonalDataNodesListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPersonalDataNodesListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPersonalDataNodesListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPersonalDataNodesListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPersonalDataNodesListRequestValidationError) ErrorName() string {
	return "GetPersonalDataNodesListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPersonalDataNodesListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPersonalDataNodesListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPersonalDataNodesListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPersonalDataNodesListRequestValidationError{}

// Validate checks the field values on GetPersonalDataNodesListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetPersonalDataNodesListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPersonalDataNodesListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPersonalDataNodesListResponseMultiError, or nil if none found.
func (m *GetPersonalDataNodesListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPersonalDataNodesListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPersonalDataNodesListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPersonalDataNodesListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPersonalDataNodesListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPersonalDataNodesListResponseMultiError(errors)
	}

	return nil
}

// GetPersonalDataNodesListResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetPersonalDataNodesListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPersonalDataNodesListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPersonalDataNodesListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPersonalDataNodesListResponseMultiError) AllErrors() []error { return m }

// GetPersonalDataNodesListResponseValidationError is the validation error
// returned by GetPersonalDataNodesListResponse.Validate if the designated
// constraints aren't met.
type GetPersonalDataNodesListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPersonalDataNodesListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPersonalDataNodesListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPersonalDataNodesListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPersonalDataNodesListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPersonalDataNodesListResponseValidationError) ErrorName() string {
	return "GetPersonalDataNodesListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPersonalDataNodesListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPersonalDataNodesListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPersonalDataNodesListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPersonalDataNodesListResponseValidationError{}

// Validate checks the field values on
// JoinPersonalDataNodeRegistrationWaitlistRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JoinPersonalDataNodeRegistrationWaitlistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// JoinPersonalDataNodeRegistrationWaitlistRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// JoinPersonalDataNodeRegistrationWaitlistRequestMultiError, or nil if none found.
func (m *JoinPersonalDataNodeRegistrationWaitlistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinPersonalDataNodeRegistrationWaitlistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Url

	// no validation rules for Name

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JoinPersonalDataNodeRegistrationWaitlistRequestValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JoinPersonalDataNodeRegistrationWaitlistRequestValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JoinPersonalDataNodeRegistrationWaitlistRequestValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RemoteMacAddress

	if len(errors) > 0 {
		return JoinPersonalDataNodeRegistrationWaitlistRequestMultiError(errors)
	}

	return nil
}

// JoinPersonalDataNodeRegistrationWaitlistRequestMultiError is an error
// wrapping multiple validation errors returned by
// JoinPersonalDataNodeRegistrationWaitlistRequest.ValidateAll() if the
// designated constraints aren't met.
type JoinPersonalDataNodeRegistrationWaitlistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinPersonalDataNodeRegistrationWaitlistRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinPersonalDataNodeRegistrationWaitlistRequestMultiError) AllErrors() []error { return m }

// JoinPersonalDataNodeRegistrationWaitlistRequestValidationError is the
// validation error returned by
// JoinPersonalDataNodeRegistrationWaitlistRequest.Validate if the designated
// constraints aren't met.
type JoinPersonalDataNodeRegistrationWaitlistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinPersonalDataNodeRegistrationWaitlistRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e JoinPersonalDataNodeRegistrationWaitlistRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e JoinPersonalDataNodeRegistrationWaitlistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinPersonalDataNodeRegistrationWaitlistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinPersonalDataNodeRegistrationWaitlistRequestValidationError) ErrorName() string {
	return "JoinPersonalDataNodeRegistrationWaitlistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e JoinPersonalDataNodeRegistrationWaitlistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinPersonalDataNodeRegistrationWaitlistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinPersonalDataNodeRegistrationWaitlistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinPersonalDataNodeRegistrationWaitlistRequestValidationError{}

// Validate checks the field values on
// JoinPersonalDataNodeRegistrationWaitlistResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JoinPersonalDataNodeRegistrationWaitlistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// JoinPersonalDataNodeRegistrationWaitlistResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// JoinPersonalDataNodeRegistrationWaitlistResponseMultiError, or nil if none found.
func (m *JoinPersonalDataNodeRegistrationWaitlistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinPersonalDataNodeRegistrationWaitlistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Id

	if len(errors) > 0 {
		return JoinPersonalDataNodeRegistrationWaitlistResponseMultiError(errors)
	}

	return nil
}

// JoinPersonalDataNodeRegistrationWaitlistResponseMultiError is an error
// wrapping multiple validation errors returned by
// JoinPersonalDataNodeRegistrationWaitlistResponse.ValidateAll() if the
// designated constraints aren't met.
type JoinPersonalDataNodeRegistrationWaitlistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinPersonalDataNodeRegistrationWaitlistResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinPersonalDataNodeRegistrationWaitlistResponseMultiError) AllErrors() []error { return m }

// JoinPersonalDataNodeRegistrationWaitlistResponseValidationError is the
// validation error returned by
// JoinPersonalDataNodeRegistrationWaitlistResponse.Validate if the designated
// constraints aren't met.
type JoinPersonalDataNodeRegistrationWaitlistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinPersonalDataNodeRegistrationWaitlistResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e JoinPersonalDataNodeRegistrationWaitlistResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e JoinPersonalDataNodeRegistrationWaitlistResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e JoinPersonalDataNodeRegistrationWaitlistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinPersonalDataNodeRegistrationWaitlistResponseValidationError) ErrorName() string {
	return "JoinPersonalDataNodeRegistrationWaitlistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e JoinPersonalDataNodeRegistrationWaitlistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinPersonalDataNodeRegistrationWaitlistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinPersonalDataNodeRegistrationWaitlistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinPersonalDataNodeRegistrationWaitlistResponseValidationError{}

// Validate checks the field values on ActivatePersonalDataNodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ActivatePersonalDataNodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActivatePersonalDataNodeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ActivatePersonalDataNodeRequestMultiError, or nil if none found.
func (m *ActivatePersonalDataNodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ActivatePersonalDataNodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Id

	// no validation rules for RemoteMacAddress

	if len(errors) > 0 {
		return ActivatePersonalDataNodeRequestMultiError(errors)
	}

	return nil
}

// ActivatePersonalDataNodeRequestMultiError is an error wrapping multiple
// validation errors returned by ActivatePersonalDataNodeRequest.ValidateAll()
// if the designated constraints aren't met.
type ActivatePersonalDataNodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivatePersonalDataNodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivatePersonalDataNodeRequestMultiError) AllErrors() []error { return m }

// ActivatePersonalDataNodeRequestValidationError is the validation error
// returned by ActivatePersonalDataNodeRequest.Validate if the designated
// constraints aren't met.
type ActivatePersonalDataNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivatePersonalDataNodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivatePersonalDataNodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivatePersonalDataNodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivatePersonalDataNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivatePersonalDataNodeRequestValidationError) ErrorName() string {
	return "ActivatePersonalDataNodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ActivatePersonalDataNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivatePersonalDataNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivatePersonalDataNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivatePersonalDataNodeRequestValidationError{}

// Validate checks the field values on ActivatePersonalDataNodeResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ActivatePersonalDataNodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActivatePersonalDataNodeResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ActivatePersonalDataNodeResponseMultiError, or nil if none found.
func (m *ActivatePersonalDataNodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ActivatePersonalDataNodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for ApiKey

	if len(errors) > 0 {
		return ActivatePersonalDataNodeResponseMultiError(errors)
	}

	return nil
}

// ActivatePersonalDataNodeResponseMultiError is an error wrapping multiple
// validation errors returned by
// ActivatePersonalDataNodeResponse.ValidateAll() if the designated
// constraints aren't met.
type ActivatePersonalDataNodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivatePersonalDataNodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivatePersonalDataNodeResponseMultiError) AllErrors() []error { return m }

// ActivatePersonalDataNodeResponseValidationError is the validation error
// returned by ActivatePersonalDataNodeResponse.Validate if the designated
// constraints aren't met.
type ActivatePersonalDataNodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivatePersonalDataNodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivatePersonalDataNodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivatePersonalDataNodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivatePersonalDataNodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivatePersonalDataNodeResponseValidationError) ErrorName() string {
	return "ActivatePersonalDataNodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ActivatePersonalDataNodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivatePersonalDataNodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivatePersonalDataNodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivatePersonalDataNodeResponseValidationError{}

// Validate checks the field values on GetNetworkNodesListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNetworkNodesListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNetworkNodesListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNetworkNodesListRequestMultiError, or nil if none found.
func (m *GetNetworkNodesListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNetworkNodesListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Token != nil {
		// no validation rules for Token
	}

	if m.OnlyMy != nil {
		// no validation rules for OnlyMy
	}

	if m.Pagination != nil {

		if all {
			switch v := interface{}(m.GetPagination()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetNetworkNodesListRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetNetworkNodesListRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNetworkNodesListRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.RemoteMacAddress != nil {
		// no validation rules for RemoteMacAddress
	}

	if len(errors) > 0 {
		return GetNetworkNodesListRequestMultiError(errors)
	}

	return nil
}

// GetNetworkNodesListRequestMultiError is an error wrapping multiple
// validation errors returned by GetNetworkNodesListRequest.ValidateAll() if
// the designated constraints aren't met.
type GetNetworkNodesListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNetworkNodesListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNetworkNodesListRequestMultiError) AllErrors() []error { return m }

// GetNetworkNodesListRequestValidationError is the validation error returned
// by GetNetworkNodesListRequest.Validate if the designated constraints aren't met.
type GetNetworkNodesListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNetworkNodesListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNetworkNodesListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNetworkNodesListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNetworkNodesListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNetworkNodesListRequestValidationError) ErrorName() string {
	return "GetNetworkNodesListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNetworkNodesListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNetworkNodesListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNetworkNodesListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNetworkNodesListRequestValidationError{}

// Validate checks the field values on GetNetworkNodesListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNetworkNodesListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNetworkNodesListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNetworkNodesListResponseMultiError, or nil if none found.
func (m *GetNetworkNodesListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNetworkNodesListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetNetworkNodesListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetNetworkNodesListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNetworkNodesListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetNetworkNodesListResponseMultiError(errors)
	}

	return nil
}

// GetNetworkNodesListResponseMultiError is an error wrapping multiple
// validation errors returned by GetNetworkNodesListResponse.ValidateAll() if
// the designated constraints aren't met.
type GetNetworkNodesListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNetworkNodesListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNetworkNodesListResponseMultiError) AllErrors() []error { return m }

// GetNetworkNodesListResponseValidationError is the validation error returned
// by GetNetworkNodesListResponse.Validate if the designated constraints
// aren't met.
type GetNetworkNodesListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNetworkNodesListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNetworkNodesListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNetworkNodesListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNetworkNodesListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNetworkNodesListResponseValidationError) ErrorName() string {
	return "GetNetworkNodesListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNetworkNodesListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNetworkNodesListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNetworkNodesListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNetworkNodesListResponseValidationError{}

// Validate checks the field values on
// JoinNetworkNodeRegistrationWaitlistRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JoinNetworkNodeRegistrationWaitlistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// JoinNetworkNodeRegistrationWaitlistRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// JoinNetworkNodeRegistrationWaitlistRequestMultiError, or nil if none found.
func (m *JoinNetworkNodeRegistrationWaitlistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinNetworkNodeRegistrationWaitlistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Url

	// no validation rules for Name

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JoinNetworkNodeRegistrationWaitlistRequestValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JoinNetworkNodeRegistrationWaitlistRequestValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JoinNetworkNodeRegistrationWaitlistRequestValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DomainName

	// no validation rules for RemoteMacAddress

	if len(errors) > 0 {
		return JoinNetworkNodeRegistrationWaitlistRequestMultiError(errors)
	}

	return nil
}

// JoinNetworkNodeRegistrationWaitlistRequestMultiError is an error wrapping
// multiple validation errors returned by
// JoinNetworkNodeRegistrationWaitlistRequest.ValidateAll() if the designated
// constraints aren't met.
type JoinNetworkNodeRegistrationWaitlistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinNetworkNodeRegistrationWaitlistRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinNetworkNodeRegistrationWaitlistRequestMultiError) AllErrors() []error { return m }

// JoinNetworkNodeRegistrationWaitlistRequestValidationError is the validation
// error returned by JoinNetworkNodeRegistrationWaitlistRequest.Validate if
// the designated constraints aren't met.
type JoinNetworkNodeRegistrationWaitlistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinNetworkNodeRegistrationWaitlistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinNetworkNodeRegistrationWaitlistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinNetworkNodeRegistrationWaitlistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinNetworkNodeRegistrationWaitlistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinNetworkNodeRegistrationWaitlistRequestValidationError) ErrorName() string {
	return "JoinNetworkNodeRegistrationWaitlistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e JoinNetworkNodeRegistrationWaitlistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinNetworkNodeRegistrationWaitlistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinNetworkNodeRegistrationWaitlistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinNetworkNodeRegistrationWaitlistRequestValidationError{}

// Validate checks the field values on
// JoinNetworkNodeRegistrationWaitlistResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JoinNetworkNodeRegistrationWaitlistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// JoinNetworkNodeRegistrationWaitlistResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// JoinNetworkNodeRegistrationWaitlistResponseMultiError, or nil if none found.
func (m *JoinNetworkNodeRegistrationWaitlistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinNetworkNodeRegistrationWaitlistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Id

	if len(errors) > 0 {
		return JoinNetworkNodeRegistrationWaitlistResponseMultiError(errors)
	}

	return nil
}

// JoinNetworkNodeRegistrationWaitlistResponseMultiError is an error wrapping
// multiple validation errors returned by
// JoinNetworkNodeRegistrationWaitlistResponse.ValidateAll() if the designated
// constraints aren't met.
type JoinNetworkNodeRegistrationWaitlistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinNetworkNodeRegistrationWaitlistResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinNetworkNodeRegistrationWaitlistResponseMultiError) AllErrors() []error { return m }

// JoinNetworkNodeRegistrationWaitlistResponseValidationError is the validation
// error returned by JoinNetworkNodeRegistrationWaitlistResponse.Validate if
// the designated constraints aren't met.
type JoinNetworkNodeRegistrationWaitlistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinNetworkNodeRegistrationWaitlistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinNetworkNodeRegistrationWaitlistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinNetworkNodeRegistrationWaitlistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinNetworkNodeRegistrationWaitlistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinNetworkNodeRegistrationWaitlistResponseValidationError) ErrorName() string {
	return "JoinNetworkNodeRegistrationWaitlistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e JoinNetworkNodeRegistrationWaitlistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinNetworkNodeRegistrationWaitlistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinNetworkNodeRegistrationWaitlistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinNetworkNodeRegistrationWaitlistResponseValidationError{}

// Validate checks the field values on ActivateNetworkNodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ActivateNetworkNodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActivateNetworkNodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ActivateNetworkNodeRequestMultiError, or nil if none found.
func (m *ActivateNetworkNodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ActivateNetworkNodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Id

	// no validation rules for RemoteMacAddress

	if len(errors) > 0 {
		return ActivateNetworkNodeRequestMultiError(errors)
	}

	return nil
}

// ActivateNetworkNodeRequestMultiError is an error wrapping multiple
// validation errors returned by ActivateNetworkNodeRequest.ValidateAll() if
// the designated constraints aren't met.
type ActivateNetworkNodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivateNetworkNodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivateNetworkNodeRequestMultiError) AllErrors() []error { return m }

// ActivateNetworkNodeRequestValidationError is the validation error returned
// by ActivateNetworkNodeRequest.Validate if the designated constraints aren't met.
type ActivateNetworkNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivateNetworkNodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivateNetworkNodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivateNetworkNodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivateNetworkNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivateNetworkNodeRequestValidationError) ErrorName() string {
	return "ActivateNetworkNodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ActivateNetworkNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivateNetworkNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivateNetworkNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivateNetworkNodeRequestValidationError{}

// Validate checks the field values on ActivateNetworkNodeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ActivateNetworkNodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActivateNetworkNodeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ActivateNetworkNodeResponseMultiError, or nil if none found.
func (m *ActivateNetworkNodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ActivateNetworkNodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for ApiKey

	if len(errors) > 0 {
		return ActivateNetworkNodeResponseMultiError(errors)
	}

	return nil
}

// ActivateNetworkNodeResponseMultiError is an error wrapping multiple
// validation errors returned by ActivateNetworkNodeResponse.ValidateAll() if
// the designated constraints aren't met.
type ActivateNetworkNodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivateNetworkNodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivateNetworkNodeResponseMultiError) AllErrors() []error { return m }

// ActivateNetworkNodeResponseValidationError is the validation error returned
// by ActivateNetworkNodeResponse.Validate if the designated constraints
// aren't met.
type ActivateNetworkNodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivateNetworkNodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivateNetworkNodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivateNetworkNodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivateNetworkNodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivateNetworkNodeResponseValidationError) ErrorName() string {
	return "ActivateNetworkNodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ActivateNetworkNodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivateNetworkNodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivateNetworkNodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivateNetworkNodeResponseValidationError{}

// Validate checks the field values on GetNetworkWardensListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNetworkWardensListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNetworkWardensListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNetworkWardensListRequestMultiError, or nil if none found.
func (m *GetNetworkWardensListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNetworkWardensListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Token != nil {
		// no validation rules for Token
	}

	if m.OnlyMy != nil {
		// no validation rules for OnlyMy
	}

	if m.Pagination != nil {

		if all {
			switch v := interface{}(m.GetPagination()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetNetworkWardensListRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetNetworkWardensListRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNetworkWardensListRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.RemoteMacAddress != nil {
		// no validation rules for RemoteMacAddress
	}

	if len(errors) > 0 {
		return GetNetworkWardensListRequestMultiError(errors)
	}

	return nil
}

// GetNetworkWardensListRequestMultiError is an error wrapping multiple
// validation errors returned by GetNetworkWardensListRequest.ValidateAll() if
// the designated constraints aren't met.
type GetNetworkWardensListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNetworkWardensListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNetworkWardensListRequestMultiError) AllErrors() []error { return m }

// GetNetworkWardensListRequestValidationError is the validation error returned
// by GetNetworkWardensListRequest.Validate if the designated constraints
// aren't met.
type GetNetworkWardensListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNetworkWardensListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNetworkWardensListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNetworkWardensListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNetworkWardensListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNetworkWardensListRequestValidationError) ErrorName() string {
	return "GetNetworkWardensListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNetworkWardensListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNetworkWardensListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNetworkWardensListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNetworkWardensListRequestValidationError{}

// Validate checks the field values on GetNetworkWardensListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNetworkWardensListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNetworkWardensListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetNetworkWardensListResponseMultiError, or nil if none found.
func (m *GetNetworkWardensListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNetworkWardensListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetNetworkWardensListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetNetworkWardensListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNetworkWardensListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetNetworkWardensListResponseMultiError(errors)
	}

	return nil
}

// GetNetworkWardensListResponseMultiError is an error wrapping multiple
// validation errors returned by GetNetworkWardensListResponse.ValidateAll()
// if the designated constraints aren't met.
type GetNetworkWardensListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNetworkWardensListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNetworkWardensListResponseMultiError) AllErrors() []error { return m }

// GetNetworkWardensListResponseValidationError is the validation error
// returned by GetNetworkWardensListResponse.Validate if the designated
// constraints aren't met.
type GetNetworkWardensListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNetworkWardensListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNetworkWardensListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNetworkWardensListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNetworkWardensListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNetworkWardensListResponseValidationError) ErrorName() string {
	return "GetNetworkWardensListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNetworkWardensListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNetworkWardensListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNetworkWardensListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNetworkWardensListResponseValidationError{}

// Validate checks the field values on RegisterNetworkWardenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterNetworkWardenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterNetworkWardenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterNetworkWardenRequestMultiError, or nil if none found.
func (m *RegisterNetworkWardenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterNetworkWardenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for AddressSuffix

	// no validation rules for PdnCapacity

	// no validation rules for NnCapacity

	// no validation rules for Url

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetRateLimit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterNetworkWardenRequestValidationError{
					field:  "RateLimit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterNetworkWardenRequestValidationError{
					field:  "RateLimit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRateLimit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterNetworkWardenRequestValidationError{
				field:  "RateLimit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterNetworkWardenRequestMultiError(errors)
	}

	return nil
}

// RegisterNetworkWardenRequestMultiError is an error wrapping multiple
// validation errors returned by RegisterNetworkWardenRequest.ValidateAll() if
// the designated constraints aren't met.
type RegisterNetworkWardenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterNetworkWardenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterNetworkWardenRequestMultiError) AllErrors() []error { return m }

// RegisterNetworkWardenRequestValidationError is the validation error returned
// by RegisterNetworkWardenRequest.Validate if the designated constraints
// aren't met.
type RegisterNetworkWardenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterNetworkWardenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterNetworkWardenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterNetworkWardenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterNetworkWardenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterNetworkWardenRequestValidationError) ErrorName() string {
	return "RegisterNetworkWardenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterNetworkWardenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterNetworkWardenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterNetworkWardenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterNetworkWardenRequestValidationError{}

// Validate checks the field values on RegisterNetworkWardenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterNetworkWardenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterNetworkWardenResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RegisterNetworkWardenResponseMultiError, or nil if none found.
func (m *RegisterNetworkWardenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterNetworkWardenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return RegisterNetworkWardenResponseMultiError(errors)
	}

	return nil
}

// RegisterNetworkWardenResponseMultiError is an error wrapping multiple
// validation errors returned by RegisterNetworkWardenResponse.ValidateAll()
// if the designated constraints aren't met.
type RegisterNetworkWardenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterNetworkWardenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterNetworkWardenResponseMultiError) AllErrors() []error { return m }

// RegisterNetworkWardenResponseValidationError is the validation error
// returned by RegisterNetworkWardenResponse.Validate if the designated
// constraints aren't met.
type RegisterNetworkWardenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterNetworkWardenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterNetworkWardenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterNetworkWardenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterNetworkWardenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterNetworkWardenResponseValidationError) ErrorName() string {
	return "RegisterNetworkWardenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterNetworkWardenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterNetworkWardenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterNetworkWardenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterNetworkWardenResponseValidationError{}
