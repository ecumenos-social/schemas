// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: networkwarden/v1/network_warden_service.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on NetworkWardenServiceCheckEmailsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *NetworkWardenServiceCheckEmailsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceCheckEmailsRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// NetworkWardenServiceCheckEmailsRequestMultiError, or nil if none found.
func (m *NetworkWardenServiceCheckEmailsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceCheckEmailsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return NetworkWardenServiceCheckEmailsRequestMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceCheckEmailsRequestMultiError is an error wrapping
// multiple validation errors returned by
// NetworkWardenServiceCheckEmailsRequest.ValidateAll() if the designated
// constraints aren't met.
type NetworkWardenServiceCheckEmailsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceCheckEmailsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceCheckEmailsRequestMultiError) AllErrors() []error { return m }

// NetworkWardenServiceCheckEmailsRequestValidationError is the validation
// error returned by NetworkWardenServiceCheckEmailsRequest.Validate if the
// designated constraints aren't met.
type NetworkWardenServiceCheckEmailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceCheckEmailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkWardenServiceCheckEmailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NetworkWardenServiceCheckEmailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkWardenServiceCheckEmailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceCheckEmailsRequestValidationError) ErrorName() string {
	return "NetworkWardenServiceCheckEmailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceCheckEmailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceCheckEmailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceCheckEmailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceCheckEmailsRequestValidationError{}

// Validate checks the field values on NetworkWardenServiceCheckEmailsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *NetworkWardenServiceCheckEmailsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceCheckEmailsResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// NetworkWardenServiceCheckEmailsResponseMultiError, or nil if none found.
func (m *NetworkWardenServiceCheckEmailsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceCheckEmailsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Valid

	if len(errors) > 0 {
		return NetworkWardenServiceCheckEmailsResponseMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceCheckEmailsResponseMultiError is an error wrapping
// multiple validation errors returned by
// NetworkWardenServiceCheckEmailsResponse.ValidateAll() if the designated
// constraints aren't met.
type NetworkWardenServiceCheckEmailsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceCheckEmailsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceCheckEmailsResponseMultiError) AllErrors() []error { return m }

// NetworkWardenServiceCheckEmailsResponseValidationError is the validation
// error returned by NetworkWardenServiceCheckEmailsResponse.Validate if the
// designated constraints aren't met.
type NetworkWardenServiceCheckEmailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceCheckEmailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkWardenServiceCheckEmailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NetworkWardenServiceCheckEmailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkWardenServiceCheckEmailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceCheckEmailsResponseValidationError) ErrorName() string {
	return "NetworkWardenServiceCheckEmailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceCheckEmailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceCheckEmailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceCheckEmailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceCheckEmailsResponseValidationError{}

// Validate checks the field values on
// NetworkWardenServiceCheckPhoneNumbersRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NetworkWardenServiceCheckPhoneNumbersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceCheckPhoneNumbersRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// NetworkWardenServiceCheckPhoneNumbersRequestMultiError, or nil if none found.
func (m *NetworkWardenServiceCheckPhoneNumbersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceCheckPhoneNumbersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return NetworkWardenServiceCheckPhoneNumbersRequestMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceCheckPhoneNumbersRequestMultiError is an error wrapping
// multiple validation errors returned by
// NetworkWardenServiceCheckPhoneNumbersRequest.ValidateAll() if the
// designated constraints aren't met.
type NetworkWardenServiceCheckPhoneNumbersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceCheckPhoneNumbersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceCheckPhoneNumbersRequestMultiError) AllErrors() []error { return m }

// NetworkWardenServiceCheckPhoneNumbersRequestValidationError is the
// validation error returned by
// NetworkWardenServiceCheckPhoneNumbersRequest.Validate if the designated
// constraints aren't met.
type NetworkWardenServiceCheckPhoneNumbersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceCheckPhoneNumbersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkWardenServiceCheckPhoneNumbersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NetworkWardenServiceCheckPhoneNumbersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkWardenServiceCheckPhoneNumbersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceCheckPhoneNumbersRequestValidationError) ErrorName() string {
	return "NetworkWardenServiceCheckPhoneNumbersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceCheckPhoneNumbersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceCheckPhoneNumbersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceCheckPhoneNumbersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceCheckPhoneNumbersRequestValidationError{}

// Validate checks the field values on
// NetworkWardenServiceCheckPhoneNumbersResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NetworkWardenServiceCheckPhoneNumbersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceCheckPhoneNumbersResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// NetworkWardenServiceCheckPhoneNumbersResponseMultiError, or nil if none found.
func (m *NetworkWardenServiceCheckPhoneNumbersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceCheckPhoneNumbersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Valid

	if len(errors) > 0 {
		return NetworkWardenServiceCheckPhoneNumbersResponseMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceCheckPhoneNumbersResponseMultiError is an error wrapping
// multiple validation errors returned by
// NetworkWardenServiceCheckPhoneNumbersResponse.ValidateAll() if the
// designated constraints aren't met.
type NetworkWardenServiceCheckPhoneNumbersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceCheckPhoneNumbersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceCheckPhoneNumbersResponseMultiError) AllErrors() []error { return m }

// NetworkWardenServiceCheckPhoneNumbersResponseValidationError is the
// validation error returned by
// NetworkWardenServiceCheckPhoneNumbersResponse.Validate if the designated
// constraints aren't met.
type NetworkWardenServiceCheckPhoneNumbersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceCheckPhoneNumbersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkWardenServiceCheckPhoneNumbersResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e NetworkWardenServiceCheckPhoneNumbersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkWardenServiceCheckPhoneNumbersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceCheckPhoneNumbersResponseValidationError) ErrorName() string {
	return "NetworkWardenServiceCheckPhoneNumbersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceCheckPhoneNumbersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceCheckPhoneNumbersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceCheckPhoneNumbersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceCheckPhoneNumbersResponseValidationError{}

// Validate checks the field values on
// NetworkWardenServiceRegisterHolderRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NetworkWardenServiceRegisterHolderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceRegisterHolderRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// NetworkWardenServiceRegisterHolderRequestMultiError, or nil if none found.
func (m *NetworkWardenServiceRegisterHolderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceRegisterHolderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Password

	if m.RemoteMacAddress != nil {
		// no validation rules for RemoteMacAddress
	}

	if m.AvatarImageUrl != nil {
		// no validation rules for AvatarImageUrl
	}

	if len(errors) > 0 {
		return NetworkWardenServiceRegisterHolderRequestMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceRegisterHolderRequestMultiError is an error wrapping
// multiple validation errors returned by
// NetworkWardenServiceRegisterHolderRequest.ValidateAll() if the designated
// constraints aren't met.
type NetworkWardenServiceRegisterHolderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceRegisterHolderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceRegisterHolderRequestMultiError) AllErrors() []error { return m }

// NetworkWardenServiceRegisterHolderRequestValidationError is the validation
// error returned by NetworkWardenServiceRegisterHolderRequest.Validate if the
// designated constraints aren't met.
type NetworkWardenServiceRegisterHolderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceRegisterHolderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkWardenServiceRegisterHolderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NetworkWardenServiceRegisterHolderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkWardenServiceRegisterHolderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceRegisterHolderRequestValidationError) ErrorName() string {
	return "NetworkWardenServiceRegisterHolderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceRegisterHolderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceRegisterHolderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceRegisterHolderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceRegisterHolderRequestValidationError{}

// Validate checks the field values on
// NetworkWardenServiceRegisterHolderResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NetworkWardenServiceRegisterHolderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceRegisterHolderResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// NetworkWardenServiceRegisterHolderResponseMultiError, or nil if none found.
func (m *NetworkWardenServiceRegisterHolderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceRegisterHolderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for RefreshToken

	// no validation rules for ConfirmationApproach

	if len(errors) > 0 {
		return NetworkWardenServiceRegisterHolderResponseMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceRegisterHolderResponseMultiError is an error wrapping
// multiple validation errors returned by
// NetworkWardenServiceRegisterHolderResponse.ValidateAll() if the designated
// constraints aren't met.
type NetworkWardenServiceRegisterHolderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceRegisterHolderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceRegisterHolderResponseMultiError) AllErrors() []error { return m }

// NetworkWardenServiceRegisterHolderResponseValidationError is the validation
// error returned by NetworkWardenServiceRegisterHolderResponse.Validate if
// the designated constraints aren't met.
type NetworkWardenServiceRegisterHolderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceRegisterHolderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkWardenServiceRegisterHolderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NetworkWardenServiceRegisterHolderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkWardenServiceRegisterHolderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceRegisterHolderResponseValidationError) ErrorName() string {
	return "NetworkWardenServiceRegisterHolderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceRegisterHolderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceRegisterHolderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceRegisterHolderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceRegisterHolderResponseValidationError{}

// Validate checks the field values on
// NetworkWardenServiceConfirmHolderRegistrationRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NetworkWardenServiceConfirmHolderRegistrationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceConfirmHolderRegistrationRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// NetworkWardenServiceConfirmHolderRegistrationRequestMultiError, or nil if
// none found.
func (m *NetworkWardenServiceConfirmHolderRegistrationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceConfirmHolderRegistrationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for ConfirmationCode

	if m.RemoteMacAddress != nil {
		// no validation rules for RemoteMacAddress
	}

	if len(errors) > 0 {
		return NetworkWardenServiceConfirmHolderRegistrationRequestMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceConfirmHolderRegistrationRequestMultiError is an error
// wrapping multiple validation errors returned by
// NetworkWardenServiceConfirmHolderRegistrationRequest.ValidateAll() if the
// designated constraints aren't met.
type NetworkWardenServiceConfirmHolderRegistrationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceConfirmHolderRegistrationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceConfirmHolderRegistrationRequestMultiError) AllErrors() []error { return m }

// NetworkWardenServiceConfirmHolderRegistrationRequestValidationError is the
// validation error returned by
// NetworkWardenServiceConfirmHolderRegistrationRequest.Validate if the
// designated constraints aren't met.
type NetworkWardenServiceConfirmHolderRegistrationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceConfirmHolderRegistrationRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e NetworkWardenServiceConfirmHolderRegistrationRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e NetworkWardenServiceConfirmHolderRegistrationRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e NetworkWardenServiceConfirmHolderRegistrationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceConfirmHolderRegistrationRequestValidationError) ErrorName() string {
	return "NetworkWardenServiceConfirmHolderRegistrationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceConfirmHolderRegistrationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceConfirmHolderRegistrationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceConfirmHolderRegistrationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceConfirmHolderRegistrationRequestValidationError{}

// Validate checks the field values on
// NetworkWardenServiceConfirmHolderRegistrationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NetworkWardenServiceConfirmHolderRegistrationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceConfirmHolderRegistrationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NetworkWardenServiceConfirmHolderRegistrationResponseMultiError, or nil if
// none found.
func (m *NetworkWardenServiceConfirmHolderRegistrationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceConfirmHolderRegistrationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return NetworkWardenServiceConfirmHolderRegistrationResponseMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceConfirmHolderRegistrationResponseMultiError is an error
// wrapping multiple validation errors returned by
// NetworkWardenServiceConfirmHolderRegistrationResponse.ValidateAll() if the
// designated constraints aren't met.
type NetworkWardenServiceConfirmHolderRegistrationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceConfirmHolderRegistrationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceConfirmHolderRegistrationResponseMultiError) AllErrors() []error {
	return m
}

// NetworkWardenServiceConfirmHolderRegistrationResponseValidationError is the
// validation error returned by
// NetworkWardenServiceConfirmHolderRegistrationResponse.Validate if the
// designated constraints aren't met.
type NetworkWardenServiceConfirmHolderRegistrationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceConfirmHolderRegistrationResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e NetworkWardenServiceConfirmHolderRegistrationResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e NetworkWardenServiceConfirmHolderRegistrationResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e NetworkWardenServiceConfirmHolderRegistrationResponseValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e NetworkWardenServiceConfirmHolderRegistrationResponseValidationError) ErrorName() string {
	return "NetworkWardenServiceConfirmHolderRegistrationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceConfirmHolderRegistrationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceConfirmHolderRegistrationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceConfirmHolderRegistrationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceConfirmHolderRegistrationResponseValidationError{}

// Validate checks the field values on
// NetworkWardenServiceResendConfirmationCodeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NetworkWardenServiceResendConfirmationCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceResendConfirmationCodeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// NetworkWardenServiceResendConfirmationCodeRequestMultiError, or nil if none found.
func (m *NetworkWardenServiceResendConfirmationCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceResendConfirmationCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for ConfirmationApproach

	if m.RemoteMacAddress != nil {
		// no validation rules for RemoteMacAddress
	}

	if len(errors) > 0 {
		return NetworkWardenServiceResendConfirmationCodeRequestMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceResendConfirmationCodeRequestMultiError is an error
// wrapping multiple validation errors returned by
// NetworkWardenServiceResendConfirmationCodeRequest.ValidateAll() if the
// designated constraints aren't met.
type NetworkWardenServiceResendConfirmationCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceResendConfirmationCodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceResendConfirmationCodeRequestMultiError) AllErrors() []error { return m }

// NetworkWardenServiceResendConfirmationCodeRequestValidationError is the
// validation error returned by
// NetworkWardenServiceResendConfirmationCodeRequest.Validate if the
// designated constraints aren't met.
type NetworkWardenServiceResendConfirmationCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceResendConfirmationCodeRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e NetworkWardenServiceResendConfirmationCodeRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e NetworkWardenServiceResendConfirmationCodeRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e NetworkWardenServiceResendConfirmationCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceResendConfirmationCodeRequestValidationError) ErrorName() string {
	return "NetworkWardenServiceResendConfirmationCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceResendConfirmationCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceResendConfirmationCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceResendConfirmationCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceResendConfirmationCodeRequestValidationError{}

// Validate checks the field values on
// NetworkWardenServiceResendConfirmationCodeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NetworkWardenServiceResendConfirmationCodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceResendConfirmationCodeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// NetworkWardenServiceResendConfirmationCodeResponseMultiError, or nil if
// none found.
func (m *NetworkWardenServiceResendConfirmationCodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceResendConfirmationCodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return NetworkWardenServiceResendConfirmationCodeResponseMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceResendConfirmationCodeResponseMultiError is an error
// wrapping multiple validation errors returned by
// NetworkWardenServiceResendConfirmationCodeResponse.ValidateAll() if the
// designated constraints aren't met.
type NetworkWardenServiceResendConfirmationCodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceResendConfirmationCodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceResendConfirmationCodeResponseMultiError) AllErrors() []error { return m }

// NetworkWardenServiceResendConfirmationCodeResponseValidationError is the
// validation error returned by
// NetworkWardenServiceResendConfirmationCodeResponse.Validate if the
// designated constraints aren't met.
type NetworkWardenServiceResendConfirmationCodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceResendConfirmationCodeResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e NetworkWardenServiceResendConfirmationCodeResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e NetworkWardenServiceResendConfirmationCodeResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e NetworkWardenServiceResendConfirmationCodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceResendConfirmationCodeResponseValidationError) ErrorName() string {
	return "NetworkWardenServiceResendConfirmationCodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceResendConfirmationCodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceResendConfirmationCodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceResendConfirmationCodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceResendConfirmationCodeResponseValidationError{}

// Validate checks the field values on NetworkWardenServiceLoginHolderRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *NetworkWardenServiceLoginHolderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceLoginHolderRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// NetworkWardenServiceLoginHolderRequestMultiError, or nil if none found.
func (m *NetworkWardenServiceLoginHolderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceLoginHolderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for PhoneNumber

	// no validation rules for Password

	if m.RemoteMacAddress != nil {
		// no validation rules for RemoteMacAddress
	}

	if len(errors) > 0 {
		return NetworkWardenServiceLoginHolderRequestMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceLoginHolderRequestMultiError is an error wrapping
// multiple validation errors returned by
// NetworkWardenServiceLoginHolderRequest.ValidateAll() if the designated
// constraints aren't met.
type NetworkWardenServiceLoginHolderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceLoginHolderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceLoginHolderRequestMultiError) AllErrors() []error { return m }

// NetworkWardenServiceLoginHolderRequestValidationError is the validation
// error returned by NetworkWardenServiceLoginHolderRequest.Validate if the
// designated constraints aren't met.
type NetworkWardenServiceLoginHolderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceLoginHolderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkWardenServiceLoginHolderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NetworkWardenServiceLoginHolderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkWardenServiceLoginHolderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceLoginHolderRequestValidationError) ErrorName() string {
	return "NetworkWardenServiceLoginHolderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceLoginHolderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceLoginHolderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceLoginHolderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceLoginHolderRequestValidationError{}

// Validate checks the field values on NetworkWardenServiceLoginHolderResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *NetworkWardenServiceLoginHolderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceLoginHolderResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// NetworkWardenServiceLoginHolderResponseMultiError, or nil if none found.
func (m *NetworkWardenServiceLoginHolderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceLoginHolderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return NetworkWardenServiceLoginHolderResponseMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceLoginHolderResponseMultiError is an error wrapping
// multiple validation errors returned by
// NetworkWardenServiceLoginHolderResponse.ValidateAll() if the designated
// constraints aren't met.
type NetworkWardenServiceLoginHolderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceLoginHolderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceLoginHolderResponseMultiError) AllErrors() []error { return m }

// NetworkWardenServiceLoginHolderResponseValidationError is the validation
// error returned by NetworkWardenServiceLoginHolderResponse.Validate if the
// designated constraints aren't met.
type NetworkWardenServiceLoginHolderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceLoginHolderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkWardenServiceLoginHolderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NetworkWardenServiceLoginHolderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkWardenServiceLoginHolderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceLoginHolderResponseValidationError) ErrorName() string {
	return "NetworkWardenServiceLoginHolderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceLoginHolderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceLoginHolderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceLoginHolderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceLoginHolderResponseValidationError{}

// Validate checks the field values on NetworkWardenServiceLogoutHolderRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *NetworkWardenServiceLogoutHolderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceLogoutHolderRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// NetworkWardenServiceLogoutHolderRequestMultiError, or nil if none found.
func (m *NetworkWardenServiceLogoutHolderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceLogoutHolderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if m.RemoteMacAddress != nil {
		// no validation rules for RemoteMacAddress
	}

	if len(errors) > 0 {
		return NetworkWardenServiceLogoutHolderRequestMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceLogoutHolderRequestMultiError is an error wrapping
// multiple validation errors returned by
// NetworkWardenServiceLogoutHolderRequest.ValidateAll() if the designated
// constraints aren't met.
type NetworkWardenServiceLogoutHolderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceLogoutHolderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceLogoutHolderRequestMultiError) AllErrors() []error { return m }

// NetworkWardenServiceLogoutHolderRequestValidationError is the validation
// error returned by NetworkWardenServiceLogoutHolderRequest.Validate if the
// designated constraints aren't met.
type NetworkWardenServiceLogoutHolderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceLogoutHolderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkWardenServiceLogoutHolderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NetworkWardenServiceLogoutHolderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkWardenServiceLogoutHolderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceLogoutHolderRequestValidationError) ErrorName() string {
	return "NetworkWardenServiceLogoutHolderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceLogoutHolderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceLogoutHolderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceLogoutHolderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceLogoutHolderRequestValidationError{}

// Validate checks the field values on NetworkWardenServiceLogoutHolderResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *NetworkWardenServiceLogoutHolderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceLogoutHolderResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// NetworkWardenServiceLogoutHolderResponseMultiError, or nil if none found.
func (m *NetworkWardenServiceLogoutHolderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceLogoutHolderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return NetworkWardenServiceLogoutHolderResponseMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceLogoutHolderResponseMultiError is an error wrapping
// multiple validation errors returned by
// NetworkWardenServiceLogoutHolderResponse.ValidateAll() if the designated
// constraints aren't met.
type NetworkWardenServiceLogoutHolderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceLogoutHolderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceLogoutHolderResponseMultiError) AllErrors() []error { return m }

// NetworkWardenServiceLogoutHolderResponseValidationError is the validation
// error returned by NetworkWardenServiceLogoutHolderResponse.Validate if the
// designated constraints aren't met.
type NetworkWardenServiceLogoutHolderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceLogoutHolderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkWardenServiceLogoutHolderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NetworkWardenServiceLogoutHolderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkWardenServiceLogoutHolderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceLogoutHolderResponseValidationError) ErrorName() string {
	return "NetworkWardenServiceLogoutHolderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceLogoutHolderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceLogoutHolderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceLogoutHolderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceLogoutHolderResponseValidationError{}

// Validate checks the field values on
// NetworkWardenServiceRefreshHolderTokenRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NetworkWardenServiceRefreshHolderTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceRefreshHolderTokenRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// NetworkWardenServiceRefreshHolderTokenRequestMultiError, or nil if none found.
func (m *NetworkWardenServiceRefreshHolderTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceRefreshHolderTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RefreshToken

	if m.RemoteMacAddress != nil {
		// no validation rules for RemoteMacAddress
	}

	if len(errors) > 0 {
		return NetworkWardenServiceRefreshHolderTokenRequestMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceRefreshHolderTokenRequestMultiError is an error wrapping
// multiple validation errors returned by
// NetworkWardenServiceRefreshHolderTokenRequest.ValidateAll() if the
// designated constraints aren't met.
type NetworkWardenServiceRefreshHolderTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceRefreshHolderTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceRefreshHolderTokenRequestMultiError) AllErrors() []error { return m }

// NetworkWardenServiceRefreshHolderTokenRequestValidationError is the
// validation error returned by
// NetworkWardenServiceRefreshHolderTokenRequest.Validate if the designated
// constraints aren't met.
type NetworkWardenServiceRefreshHolderTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceRefreshHolderTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkWardenServiceRefreshHolderTokenRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e NetworkWardenServiceRefreshHolderTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkWardenServiceRefreshHolderTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceRefreshHolderTokenRequestValidationError) ErrorName() string {
	return "NetworkWardenServiceRefreshHolderTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceRefreshHolderTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceRefreshHolderTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceRefreshHolderTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceRefreshHolderTokenRequestValidationError{}

// Validate checks the field values on
// NetworkWardenServiceRefreshHolderTokenResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NetworkWardenServiceRefreshHolderTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceRefreshHolderTokenResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// NetworkWardenServiceRefreshHolderTokenResponseMultiError, or nil if none found.
func (m *NetworkWardenServiceRefreshHolderTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceRefreshHolderTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return NetworkWardenServiceRefreshHolderTokenResponseMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceRefreshHolderTokenResponseMultiError is an error
// wrapping multiple validation errors returned by
// NetworkWardenServiceRefreshHolderTokenResponse.ValidateAll() if the
// designated constraints aren't met.
type NetworkWardenServiceRefreshHolderTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceRefreshHolderTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceRefreshHolderTokenResponseMultiError) AllErrors() []error { return m }

// NetworkWardenServiceRefreshHolderTokenResponseValidationError is the
// validation error returned by
// NetworkWardenServiceRefreshHolderTokenResponse.Validate if the designated
// constraints aren't met.
type NetworkWardenServiceRefreshHolderTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceRefreshHolderTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkWardenServiceRefreshHolderTokenResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e NetworkWardenServiceRefreshHolderTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkWardenServiceRefreshHolderTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceRefreshHolderTokenResponseValidationError) ErrorName() string {
	return "NetworkWardenServiceRefreshHolderTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceRefreshHolderTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceRefreshHolderTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceRefreshHolderTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceRefreshHolderTokenResponseValidationError{}

// Validate checks the field values on
// NetworkWardenServiceChangeHolderPasswordRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NetworkWardenServiceChangeHolderPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceChangeHolderPasswordRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// NetworkWardenServiceChangeHolderPasswordRequestMultiError, or nil if none found.
func (m *NetworkWardenServiceChangeHolderPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceChangeHolderPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Password

	// no validation rules for NewPassword

	if m.RemoteMacAddress != nil {
		// no validation rules for RemoteMacAddress
	}

	if len(errors) > 0 {
		return NetworkWardenServiceChangeHolderPasswordRequestMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceChangeHolderPasswordRequestMultiError is an error
// wrapping multiple validation errors returned by
// NetworkWardenServiceChangeHolderPasswordRequest.ValidateAll() if the
// designated constraints aren't met.
type NetworkWardenServiceChangeHolderPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceChangeHolderPasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceChangeHolderPasswordRequestMultiError) AllErrors() []error { return m }

// NetworkWardenServiceChangeHolderPasswordRequestValidationError is the
// validation error returned by
// NetworkWardenServiceChangeHolderPasswordRequest.Validate if the designated
// constraints aren't met.
type NetworkWardenServiceChangeHolderPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceChangeHolderPasswordRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e NetworkWardenServiceChangeHolderPasswordRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e NetworkWardenServiceChangeHolderPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkWardenServiceChangeHolderPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceChangeHolderPasswordRequestValidationError) ErrorName() string {
	return "NetworkWardenServiceChangeHolderPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceChangeHolderPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceChangeHolderPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceChangeHolderPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceChangeHolderPasswordRequestValidationError{}

// Validate checks the field values on
// NetworkWardenServiceChangeHolderPasswordResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NetworkWardenServiceChangeHolderPasswordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceChangeHolderPasswordResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// NetworkWardenServiceChangeHolderPasswordResponseMultiError, or nil if none found.
func (m *NetworkWardenServiceChangeHolderPasswordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceChangeHolderPasswordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return NetworkWardenServiceChangeHolderPasswordResponseMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceChangeHolderPasswordResponseMultiError is an error
// wrapping multiple validation errors returned by
// NetworkWardenServiceChangeHolderPasswordResponse.ValidateAll() if the
// designated constraints aren't met.
type NetworkWardenServiceChangeHolderPasswordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceChangeHolderPasswordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceChangeHolderPasswordResponseMultiError) AllErrors() []error { return m }

// NetworkWardenServiceChangeHolderPasswordResponseValidationError is the
// validation error returned by
// NetworkWardenServiceChangeHolderPasswordResponse.Validate if the designated
// constraints aren't met.
type NetworkWardenServiceChangeHolderPasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceChangeHolderPasswordResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e NetworkWardenServiceChangeHolderPasswordResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e NetworkWardenServiceChangeHolderPasswordResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e NetworkWardenServiceChangeHolderPasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceChangeHolderPasswordResponseValidationError) ErrorName() string {
	return "NetworkWardenServiceChangeHolderPasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceChangeHolderPasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceChangeHolderPasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceChangeHolderPasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceChangeHolderPasswordResponseValidationError{}

// Validate checks the field values on NetworkWardenServiceModifyHolderRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *NetworkWardenServiceModifyHolderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceModifyHolderRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// NetworkWardenServiceModifyHolderRequestMultiError, or nil if none found.
func (m *NetworkWardenServiceModifyHolderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceModifyHolderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if m.RemoteMacAddress != nil {
		// no validation rules for RemoteMacAddress
	}

	if m.AvatarImageUrl != nil {
		// no validation rules for AvatarImageUrl
	}

	if len(errors) > 0 {
		return NetworkWardenServiceModifyHolderRequestMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceModifyHolderRequestMultiError is an error wrapping
// multiple validation errors returned by
// NetworkWardenServiceModifyHolderRequest.ValidateAll() if the designated
// constraints aren't met.
type NetworkWardenServiceModifyHolderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceModifyHolderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceModifyHolderRequestMultiError) AllErrors() []error { return m }

// NetworkWardenServiceModifyHolderRequestValidationError is the validation
// error returned by NetworkWardenServiceModifyHolderRequest.Validate if the
// designated constraints aren't met.
type NetworkWardenServiceModifyHolderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceModifyHolderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkWardenServiceModifyHolderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NetworkWardenServiceModifyHolderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkWardenServiceModifyHolderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceModifyHolderRequestValidationError) ErrorName() string {
	return "NetworkWardenServiceModifyHolderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceModifyHolderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceModifyHolderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceModifyHolderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceModifyHolderRequestValidationError{}

// Validate checks the field values on NetworkWardenServiceModifyHolderResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *NetworkWardenServiceModifyHolderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceModifyHolderResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// NetworkWardenServiceModifyHolderResponseMultiError, or nil if none found.
func (m *NetworkWardenServiceModifyHolderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceModifyHolderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return NetworkWardenServiceModifyHolderResponseMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceModifyHolderResponseMultiError is an error wrapping
// multiple validation errors returned by
// NetworkWardenServiceModifyHolderResponse.ValidateAll() if the designated
// constraints aren't met.
type NetworkWardenServiceModifyHolderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceModifyHolderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceModifyHolderResponseMultiError) AllErrors() []error { return m }

// NetworkWardenServiceModifyHolderResponseValidationError is the validation
// error returned by NetworkWardenServiceModifyHolderResponse.Validate if the
// designated constraints aren't met.
type NetworkWardenServiceModifyHolderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceModifyHolderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkWardenServiceModifyHolderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NetworkWardenServiceModifyHolderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkWardenServiceModifyHolderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceModifyHolderResponseValidationError) ErrorName() string {
	return "NetworkWardenServiceModifyHolderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceModifyHolderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceModifyHolderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceModifyHolderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceModifyHolderResponseValidationError{}

// Validate checks the field values on NetworkWardenServiceGetHolderRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *NetworkWardenServiceGetHolderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NetworkWardenServiceGetHolderRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// NetworkWardenServiceGetHolderRequestMultiError, or nil if none found.
func (m *NetworkWardenServiceGetHolderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceGetHolderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for HolderId

	if m.RemoteMacAddress != nil {
		// no validation rules for RemoteMacAddress
	}

	if len(errors) > 0 {
		return NetworkWardenServiceGetHolderRequestMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceGetHolderRequestMultiError is an error wrapping multiple
// validation errors returned by
// NetworkWardenServiceGetHolderRequest.ValidateAll() if the designated
// constraints aren't met.
type NetworkWardenServiceGetHolderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceGetHolderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceGetHolderRequestMultiError) AllErrors() []error { return m }

// NetworkWardenServiceGetHolderRequestValidationError is the validation error
// returned by NetworkWardenServiceGetHolderRequest.Validate if the designated
// constraints aren't met.
type NetworkWardenServiceGetHolderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceGetHolderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkWardenServiceGetHolderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NetworkWardenServiceGetHolderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkWardenServiceGetHolderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceGetHolderRequestValidationError) ErrorName() string {
	return "NetworkWardenServiceGetHolderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceGetHolderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceGetHolderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceGetHolderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceGetHolderRequestValidationError{}

// Validate checks the field values on NetworkWardenServiceGetHolderResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *NetworkWardenServiceGetHolderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NetworkWardenServiceGetHolderResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// NetworkWardenServiceGetHolderResponseMultiError, or nil if none found.
func (m *NetworkWardenServiceGetHolderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceGetHolderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NetworkWardenServiceGetHolderResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NetworkWardenServiceGetHolderResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NetworkWardenServiceGetHolderResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NetworkWardenServiceGetHolderResponseMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceGetHolderResponseMultiError is an error wrapping
// multiple validation errors returned by
// NetworkWardenServiceGetHolderResponse.ValidateAll() if the designated
// constraints aren't met.
type NetworkWardenServiceGetHolderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceGetHolderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceGetHolderResponseMultiError) AllErrors() []error { return m }

// NetworkWardenServiceGetHolderResponseValidationError is the validation error
// returned by NetworkWardenServiceGetHolderResponse.Validate if the
// designated constraints aren't met.
type NetworkWardenServiceGetHolderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceGetHolderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkWardenServiceGetHolderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NetworkWardenServiceGetHolderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkWardenServiceGetHolderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceGetHolderResponseValidationError) ErrorName() string {
	return "NetworkWardenServiceGetHolderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceGetHolderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceGetHolderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceGetHolderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceGetHolderResponseValidationError{}

// Validate checks the field values on NetworkWardenServiceDeleteHolderRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *NetworkWardenServiceDeleteHolderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceDeleteHolderRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// NetworkWardenServiceDeleteHolderRequestMultiError, or nil if none found.
func (m *NetworkWardenServiceDeleteHolderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceDeleteHolderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Password

	if m.RemoteMacAddress != nil {
		// no validation rules for RemoteMacAddress
	}

	if len(errors) > 0 {
		return NetworkWardenServiceDeleteHolderRequestMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceDeleteHolderRequestMultiError is an error wrapping
// multiple validation errors returned by
// NetworkWardenServiceDeleteHolderRequest.ValidateAll() if the designated
// constraints aren't met.
type NetworkWardenServiceDeleteHolderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceDeleteHolderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceDeleteHolderRequestMultiError) AllErrors() []error { return m }

// NetworkWardenServiceDeleteHolderRequestValidationError is the validation
// error returned by NetworkWardenServiceDeleteHolderRequest.Validate if the
// designated constraints aren't met.
type NetworkWardenServiceDeleteHolderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceDeleteHolderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkWardenServiceDeleteHolderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NetworkWardenServiceDeleteHolderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkWardenServiceDeleteHolderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceDeleteHolderRequestValidationError) ErrorName() string {
	return "NetworkWardenServiceDeleteHolderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceDeleteHolderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceDeleteHolderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceDeleteHolderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceDeleteHolderRequestValidationError{}

// Validate checks the field values on NetworkWardenServiceDeleteHolderResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *NetworkWardenServiceDeleteHolderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceDeleteHolderResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// NetworkWardenServiceDeleteHolderResponseMultiError, or nil if none found.
func (m *NetworkWardenServiceDeleteHolderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceDeleteHolderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return NetworkWardenServiceDeleteHolderResponseMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceDeleteHolderResponseMultiError is an error wrapping
// multiple validation errors returned by
// NetworkWardenServiceDeleteHolderResponse.ValidateAll() if the designated
// constraints aren't met.
type NetworkWardenServiceDeleteHolderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceDeleteHolderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceDeleteHolderResponseMultiError) AllErrors() []error { return m }

// NetworkWardenServiceDeleteHolderResponseValidationError is the validation
// error returned by NetworkWardenServiceDeleteHolderResponse.Validate if the
// designated constraints aren't met.
type NetworkWardenServiceDeleteHolderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceDeleteHolderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkWardenServiceDeleteHolderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NetworkWardenServiceDeleteHolderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkWardenServiceDeleteHolderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceDeleteHolderResponseValidationError) ErrorName() string {
	return "NetworkWardenServiceDeleteHolderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceDeleteHolderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceDeleteHolderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceDeleteHolderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceDeleteHolderResponseValidationError{}

// Validate checks the field values on
// NetworkWardenServiceGetPersonalDataNodesListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NetworkWardenServiceGetPersonalDataNodesListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceGetPersonalDataNodesListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// NetworkWardenServiceGetPersonalDataNodesListRequestMultiError, or nil if
// none found.
func (m *NetworkWardenServiceGetPersonalDataNodesListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceGetPersonalDataNodesListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.RemoteMacAddress != nil {
		// no validation rules for RemoteMacAddress
	}

	if m.Token != nil {
		// no validation rules for Token
	}

	if m.OnlyMy != nil {
		// no validation rules for OnlyMy
	}

	if m.Pagination != nil {

		if all {
			switch v := interface{}(m.GetPagination()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NetworkWardenServiceGetPersonalDataNodesListRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NetworkWardenServiceGetPersonalDataNodesListRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NetworkWardenServiceGetPersonalDataNodesListRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NetworkWardenServiceGetPersonalDataNodesListRequestMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceGetPersonalDataNodesListRequestMultiError is an error
// wrapping multiple validation errors returned by
// NetworkWardenServiceGetPersonalDataNodesListRequest.ValidateAll() if the
// designated constraints aren't met.
type NetworkWardenServiceGetPersonalDataNodesListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceGetPersonalDataNodesListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceGetPersonalDataNodesListRequestMultiError) AllErrors() []error { return m }

// NetworkWardenServiceGetPersonalDataNodesListRequestValidationError is the
// validation error returned by
// NetworkWardenServiceGetPersonalDataNodesListRequest.Validate if the
// designated constraints aren't met.
type NetworkWardenServiceGetPersonalDataNodesListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceGetPersonalDataNodesListRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e NetworkWardenServiceGetPersonalDataNodesListRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e NetworkWardenServiceGetPersonalDataNodesListRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e NetworkWardenServiceGetPersonalDataNodesListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceGetPersonalDataNodesListRequestValidationError) ErrorName() string {
	return "NetworkWardenServiceGetPersonalDataNodesListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceGetPersonalDataNodesListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceGetPersonalDataNodesListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceGetPersonalDataNodesListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceGetPersonalDataNodesListRequestValidationError{}

// Validate checks the field values on
// NetworkWardenServiceGetPersonalDataNodesListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NetworkWardenServiceGetPersonalDataNodesListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceGetPersonalDataNodesListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// NetworkWardenServiceGetPersonalDataNodesListResponseMultiError, or nil if
// none found.
func (m *NetworkWardenServiceGetPersonalDataNodesListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceGetPersonalDataNodesListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NetworkWardenServiceGetPersonalDataNodesListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NetworkWardenServiceGetPersonalDataNodesListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NetworkWardenServiceGetPersonalDataNodesListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NetworkWardenServiceGetPersonalDataNodesListResponseMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceGetPersonalDataNodesListResponseMultiError is an error
// wrapping multiple validation errors returned by
// NetworkWardenServiceGetPersonalDataNodesListResponse.ValidateAll() if the
// designated constraints aren't met.
type NetworkWardenServiceGetPersonalDataNodesListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceGetPersonalDataNodesListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceGetPersonalDataNodesListResponseMultiError) AllErrors() []error { return m }

// NetworkWardenServiceGetPersonalDataNodesListResponseValidationError is the
// validation error returned by
// NetworkWardenServiceGetPersonalDataNodesListResponse.Validate if the
// designated constraints aren't met.
type NetworkWardenServiceGetPersonalDataNodesListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceGetPersonalDataNodesListResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e NetworkWardenServiceGetPersonalDataNodesListResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e NetworkWardenServiceGetPersonalDataNodesListResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e NetworkWardenServiceGetPersonalDataNodesListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceGetPersonalDataNodesListResponseValidationError) ErrorName() string {
	return "NetworkWardenServiceGetPersonalDataNodesListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceGetPersonalDataNodesListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceGetPersonalDataNodesListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceGetPersonalDataNodesListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceGetPersonalDataNodesListResponseValidationError{}

// Validate checks the field values on
// NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequestMultiError,
// or nil if none found.
func (m *NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RemoteMacAddress

	// no validation rules for Token

	// no validation rules for Url

	// no validation rules for Name

	// no validation rules for Label

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequestValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequestValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequestValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequestMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequestMultiError
// is an error wrapping multiple validation errors returned by
// NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequest.ValidateAll()
// if the designated constraints aren't met.
type NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequestMultiError) AllErrors() []error {
	return m
}

// NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequestValidationError
// is the validation error returned by
// NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequest.Validate
// if the designated constraints aren't met.
type NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequestValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequestValidationError) ErrorName() string {
	return "NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequestValidationError{}

// Validate checks the field values on
// NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponseMultiError,
// or nil if none found.
func (m *NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Id

	if len(errors) > 0 {
		return NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponseMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponseMultiError
// is an error wrapping multiple validation errors returned by
// NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponse.ValidateAll()
// if the designated constraints aren't met.
type NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponseMultiError) AllErrors() []error {
	return m
}

// NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponseValidationError
// is the validation error returned by
// NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponse.Validate
// if the designated constraints aren't met.
type NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponseValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponseValidationError) ErrorName() string {
	return "NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponseValidationError{}

// Validate checks the field values on
// NetworkWardenServiceActivatePersonalDataNodeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NetworkWardenServiceActivatePersonalDataNodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceActivatePersonalDataNodeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// NetworkWardenServiceActivatePersonalDataNodeRequestMultiError, or nil if
// none found.
func (m *NetworkWardenServiceActivatePersonalDataNodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceActivatePersonalDataNodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RemoteMacAddress

	// no validation rules for Token

	// no validation rules for Id

	if len(errors) > 0 {
		return NetworkWardenServiceActivatePersonalDataNodeRequestMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceActivatePersonalDataNodeRequestMultiError is an error
// wrapping multiple validation errors returned by
// NetworkWardenServiceActivatePersonalDataNodeRequest.ValidateAll() if the
// designated constraints aren't met.
type NetworkWardenServiceActivatePersonalDataNodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceActivatePersonalDataNodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceActivatePersonalDataNodeRequestMultiError) AllErrors() []error { return m }

// NetworkWardenServiceActivatePersonalDataNodeRequestValidationError is the
// validation error returned by
// NetworkWardenServiceActivatePersonalDataNodeRequest.Validate if the
// designated constraints aren't met.
type NetworkWardenServiceActivatePersonalDataNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceActivatePersonalDataNodeRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e NetworkWardenServiceActivatePersonalDataNodeRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e NetworkWardenServiceActivatePersonalDataNodeRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e NetworkWardenServiceActivatePersonalDataNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceActivatePersonalDataNodeRequestValidationError) ErrorName() string {
	return "NetworkWardenServiceActivatePersonalDataNodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceActivatePersonalDataNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceActivatePersonalDataNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceActivatePersonalDataNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceActivatePersonalDataNodeRequestValidationError{}

// Validate checks the field values on
// NetworkWardenServiceActivatePersonalDataNodeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NetworkWardenServiceActivatePersonalDataNodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceActivatePersonalDataNodeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// NetworkWardenServiceActivatePersonalDataNodeResponseMultiError, or nil if
// none found.
func (m *NetworkWardenServiceActivatePersonalDataNodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceActivatePersonalDataNodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for ApiKey

	if len(errors) > 0 {
		return NetworkWardenServiceActivatePersonalDataNodeResponseMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceActivatePersonalDataNodeResponseMultiError is an error
// wrapping multiple validation errors returned by
// NetworkWardenServiceActivatePersonalDataNodeResponse.ValidateAll() if the
// designated constraints aren't met.
type NetworkWardenServiceActivatePersonalDataNodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceActivatePersonalDataNodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceActivatePersonalDataNodeResponseMultiError) AllErrors() []error { return m }

// NetworkWardenServiceActivatePersonalDataNodeResponseValidationError is the
// validation error returned by
// NetworkWardenServiceActivatePersonalDataNodeResponse.Validate if the
// designated constraints aren't met.
type NetworkWardenServiceActivatePersonalDataNodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceActivatePersonalDataNodeResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e NetworkWardenServiceActivatePersonalDataNodeResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e NetworkWardenServiceActivatePersonalDataNodeResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e NetworkWardenServiceActivatePersonalDataNodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceActivatePersonalDataNodeResponseValidationError) ErrorName() string {
	return "NetworkWardenServiceActivatePersonalDataNodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceActivatePersonalDataNodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceActivatePersonalDataNodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceActivatePersonalDataNodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceActivatePersonalDataNodeResponseValidationError{}

// Validate checks the field values on
// NetworkWardenServiceInitiatePersonalDataNodeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NetworkWardenServiceInitiatePersonalDataNodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceInitiatePersonalDataNodeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// NetworkWardenServiceInitiatePersonalDataNodeRequestMultiError, or nil if
// none found.
func (m *NetworkWardenServiceInitiatePersonalDataNodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceInitiatePersonalDataNodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiKey

	// no validation rules for AccountsCapacity

	// no validation rules for IsOpen

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetRateLimit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NetworkWardenServiceInitiatePersonalDataNodeRequestValidationError{
					field:  "RateLimit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NetworkWardenServiceInitiatePersonalDataNodeRequestValidationError{
					field:  "RateLimit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRateLimit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NetworkWardenServiceInitiatePersonalDataNodeRequestValidationError{
				field:  "RateLimit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrawlRateLimit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NetworkWardenServiceInitiatePersonalDataNodeRequestValidationError{
					field:  "CrawlRateLimit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NetworkWardenServiceInitiatePersonalDataNodeRequestValidationError{
					field:  "CrawlRateLimit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrawlRateLimit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NetworkWardenServiceInitiatePersonalDataNodeRequestValidationError{
				field:  "CrawlRateLimit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IdGenNode

	if len(errors) > 0 {
		return NetworkWardenServiceInitiatePersonalDataNodeRequestMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceInitiatePersonalDataNodeRequestMultiError is an error
// wrapping multiple validation errors returned by
// NetworkWardenServiceInitiatePersonalDataNodeRequest.ValidateAll() if the
// designated constraints aren't met.
type NetworkWardenServiceInitiatePersonalDataNodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceInitiatePersonalDataNodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceInitiatePersonalDataNodeRequestMultiError) AllErrors() []error { return m }

// NetworkWardenServiceInitiatePersonalDataNodeRequestValidationError is the
// validation error returned by
// NetworkWardenServiceInitiatePersonalDataNodeRequest.Validate if the
// designated constraints aren't met.
type NetworkWardenServiceInitiatePersonalDataNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceInitiatePersonalDataNodeRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e NetworkWardenServiceInitiatePersonalDataNodeRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e NetworkWardenServiceInitiatePersonalDataNodeRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e NetworkWardenServiceInitiatePersonalDataNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceInitiatePersonalDataNodeRequestValidationError) ErrorName() string {
	return "NetworkWardenServiceInitiatePersonalDataNodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceInitiatePersonalDataNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceInitiatePersonalDataNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceInitiatePersonalDataNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceInitiatePersonalDataNodeRequestValidationError{}

// Validate checks the field values on
// NetworkWardenServiceInitiatePersonalDataNodeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NetworkWardenServiceInitiatePersonalDataNodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceInitiatePersonalDataNodeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// NetworkWardenServiceInitiatePersonalDataNodeResponseMultiError, or nil if
// none found.
func (m *NetworkWardenServiceInitiatePersonalDataNodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceInitiatePersonalDataNodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return NetworkWardenServiceInitiatePersonalDataNodeResponseMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceInitiatePersonalDataNodeResponseMultiError is an error
// wrapping multiple validation errors returned by
// NetworkWardenServiceInitiatePersonalDataNodeResponse.ValidateAll() if the
// designated constraints aren't met.
type NetworkWardenServiceInitiatePersonalDataNodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceInitiatePersonalDataNodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceInitiatePersonalDataNodeResponseMultiError) AllErrors() []error { return m }

// NetworkWardenServiceInitiatePersonalDataNodeResponseValidationError is the
// validation error returned by
// NetworkWardenServiceInitiatePersonalDataNodeResponse.Validate if the
// designated constraints aren't met.
type NetworkWardenServiceInitiatePersonalDataNodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceInitiatePersonalDataNodeResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e NetworkWardenServiceInitiatePersonalDataNodeResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e NetworkWardenServiceInitiatePersonalDataNodeResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e NetworkWardenServiceInitiatePersonalDataNodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceInitiatePersonalDataNodeResponseValidationError) ErrorName() string {
	return "NetworkWardenServiceInitiatePersonalDataNodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceInitiatePersonalDataNodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceInitiatePersonalDataNodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceInitiatePersonalDataNodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceInitiatePersonalDataNodeResponseValidationError{}

// Validate checks the field values on
// NetworkWardenServiceGetNetworkNodesListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NetworkWardenServiceGetNetworkNodesListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceGetNetworkNodesListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// NetworkWardenServiceGetNetworkNodesListRequestMultiError, or nil if none found.
func (m *NetworkWardenServiceGetNetworkNodesListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceGetNetworkNodesListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.RemoteMacAddress != nil {
		// no validation rules for RemoteMacAddress
	}

	if m.Token != nil {
		// no validation rules for Token
	}

	if m.OnlyMy != nil {
		// no validation rules for OnlyMy
	}

	if m.Pagination != nil {

		if all {
			switch v := interface{}(m.GetPagination()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NetworkWardenServiceGetNetworkNodesListRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NetworkWardenServiceGetNetworkNodesListRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NetworkWardenServiceGetNetworkNodesListRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NetworkWardenServiceGetNetworkNodesListRequestMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceGetNetworkNodesListRequestMultiError is an error
// wrapping multiple validation errors returned by
// NetworkWardenServiceGetNetworkNodesListRequest.ValidateAll() if the
// designated constraints aren't met.
type NetworkWardenServiceGetNetworkNodesListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceGetNetworkNodesListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceGetNetworkNodesListRequestMultiError) AllErrors() []error { return m }

// NetworkWardenServiceGetNetworkNodesListRequestValidationError is the
// validation error returned by
// NetworkWardenServiceGetNetworkNodesListRequest.Validate if the designated
// constraints aren't met.
type NetworkWardenServiceGetNetworkNodesListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceGetNetworkNodesListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkWardenServiceGetNetworkNodesListRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e NetworkWardenServiceGetNetworkNodesListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkWardenServiceGetNetworkNodesListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceGetNetworkNodesListRequestValidationError) ErrorName() string {
	return "NetworkWardenServiceGetNetworkNodesListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceGetNetworkNodesListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceGetNetworkNodesListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceGetNetworkNodesListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceGetNetworkNodesListRequestValidationError{}

// Validate checks the field values on
// NetworkWardenServiceGetNetworkNodesListResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NetworkWardenServiceGetNetworkNodesListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceGetNetworkNodesListResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// NetworkWardenServiceGetNetworkNodesListResponseMultiError, or nil if none found.
func (m *NetworkWardenServiceGetNetworkNodesListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceGetNetworkNodesListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NetworkWardenServiceGetNetworkNodesListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NetworkWardenServiceGetNetworkNodesListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NetworkWardenServiceGetNetworkNodesListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NetworkWardenServiceGetNetworkNodesListResponseMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceGetNetworkNodesListResponseMultiError is an error
// wrapping multiple validation errors returned by
// NetworkWardenServiceGetNetworkNodesListResponse.ValidateAll() if the
// designated constraints aren't met.
type NetworkWardenServiceGetNetworkNodesListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceGetNetworkNodesListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceGetNetworkNodesListResponseMultiError) AllErrors() []error { return m }

// NetworkWardenServiceGetNetworkNodesListResponseValidationError is the
// validation error returned by
// NetworkWardenServiceGetNetworkNodesListResponse.Validate if the designated
// constraints aren't met.
type NetworkWardenServiceGetNetworkNodesListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceGetNetworkNodesListResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e NetworkWardenServiceGetNetworkNodesListResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e NetworkWardenServiceGetNetworkNodesListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkWardenServiceGetNetworkNodesListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceGetNetworkNodesListResponseValidationError) ErrorName() string {
	return "NetworkWardenServiceGetNetworkNodesListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceGetNetworkNodesListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceGetNetworkNodesListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceGetNetworkNodesListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceGetNetworkNodesListResponseValidationError{}

// Validate checks the field values on
// NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequestMultiError,
// or nil if none found.
func (m *NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RemoteMacAddress

	// no validation rules for Token

	// no validation rules for Url

	// no validation rules for Name

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequestValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequestValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequestValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DomainName

	if len(errors) > 0 {
		return NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequestMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequestMultiError is
// an error wrapping multiple validation errors returned by
// NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequest.ValidateAll()
// if the designated constraints aren't met.
type NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequestMultiError) AllErrors() []error {
	return m
}

// NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequestValidationError
// is the validation error returned by
// NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequest.Validate if
// the designated constraints aren't met.
type NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequestValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequestValidationError) ErrorName() string {
	return "NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequestValidationError{}

// Validate checks the field values on
// NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponseMultiError,
// or nil if none found.
func (m *NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Id

	if len(errors) > 0 {
		return NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponseMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponseMultiError is
// an error wrapping multiple validation errors returned by
// NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponse.ValidateAll()
// if the designated constraints aren't met.
type NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponseMultiError) AllErrors() []error {
	return m
}

// NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponseValidationError
// is the validation error returned by
// NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponse.Validate if
// the designated constraints aren't met.
type NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponseValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponseValidationError) ErrorName() string {
	return "NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponseValidationError{}

// Validate checks the field values on
// NetworkWardenServiceActivateNetworkNodeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NetworkWardenServiceActivateNetworkNodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceActivateNetworkNodeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// NetworkWardenServiceActivateNetworkNodeRequestMultiError, or nil if none found.
func (m *NetworkWardenServiceActivateNetworkNodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceActivateNetworkNodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RemoteMacAddress

	// no validation rules for Token

	// no validation rules for Id

	if len(errors) > 0 {
		return NetworkWardenServiceActivateNetworkNodeRequestMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceActivateNetworkNodeRequestMultiError is an error
// wrapping multiple validation errors returned by
// NetworkWardenServiceActivateNetworkNodeRequest.ValidateAll() if the
// designated constraints aren't met.
type NetworkWardenServiceActivateNetworkNodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceActivateNetworkNodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceActivateNetworkNodeRequestMultiError) AllErrors() []error { return m }

// NetworkWardenServiceActivateNetworkNodeRequestValidationError is the
// validation error returned by
// NetworkWardenServiceActivateNetworkNodeRequest.Validate if the designated
// constraints aren't met.
type NetworkWardenServiceActivateNetworkNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceActivateNetworkNodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkWardenServiceActivateNetworkNodeRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e NetworkWardenServiceActivateNetworkNodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkWardenServiceActivateNetworkNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceActivateNetworkNodeRequestValidationError) ErrorName() string {
	return "NetworkWardenServiceActivateNetworkNodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceActivateNetworkNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceActivateNetworkNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceActivateNetworkNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceActivateNetworkNodeRequestValidationError{}

// Validate checks the field values on
// NetworkWardenServiceActivateNetworkNodeResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NetworkWardenServiceActivateNetworkNodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceActivateNetworkNodeResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// NetworkWardenServiceActivateNetworkNodeResponseMultiError, or nil if none found.
func (m *NetworkWardenServiceActivateNetworkNodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceActivateNetworkNodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for ApiKey

	if len(errors) > 0 {
		return NetworkWardenServiceActivateNetworkNodeResponseMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceActivateNetworkNodeResponseMultiError is an error
// wrapping multiple validation errors returned by
// NetworkWardenServiceActivateNetworkNodeResponse.ValidateAll() if the
// designated constraints aren't met.
type NetworkWardenServiceActivateNetworkNodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceActivateNetworkNodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceActivateNetworkNodeResponseMultiError) AllErrors() []error { return m }

// NetworkWardenServiceActivateNetworkNodeResponseValidationError is the
// validation error returned by
// NetworkWardenServiceActivateNetworkNodeResponse.Validate if the designated
// constraints aren't met.
type NetworkWardenServiceActivateNetworkNodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceActivateNetworkNodeResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e NetworkWardenServiceActivateNetworkNodeResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e NetworkWardenServiceActivateNetworkNodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkWardenServiceActivateNetworkNodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceActivateNetworkNodeResponseValidationError) ErrorName() string {
	return "NetworkWardenServiceActivateNetworkNodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceActivateNetworkNodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceActivateNetworkNodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceActivateNetworkNodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceActivateNetworkNodeResponseValidationError{}

// Validate checks the field values on
// NetworkWardenServiceInitiateNetworkNodeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NetworkWardenServiceInitiateNetworkNodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceInitiateNetworkNodeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// NetworkWardenServiceInitiateNetworkNodeRequestMultiError, or nil if none found.
func (m *NetworkWardenServiceInitiateNetworkNodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceInitiateNetworkNodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiKey

	// no validation rules for AccountsCapacity

	// no validation rules for IsOpen

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetRateLimit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NetworkWardenServiceInitiateNetworkNodeRequestValidationError{
					field:  "RateLimit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NetworkWardenServiceInitiateNetworkNodeRequestValidationError{
					field:  "RateLimit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRateLimit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NetworkWardenServiceInitiateNetworkNodeRequestValidationError{
				field:  "RateLimit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrawlRateLimit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NetworkWardenServiceInitiateNetworkNodeRequestValidationError{
					field:  "CrawlRateLimit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NetworkWardenServiceInitiateNetworkNodeRequestValidationError{
					field:  "CrawlRateLimit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrawlRateLimit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NetworkWardenServiceInitiateNetworkNodeRequestValidationError{
				field:  "CrawlRateLimit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IdGenNode

	if len(errors) > 0 {
		return NetworkWardenServiceInitiateNetworkNodeRequestMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceInitiateNetworkNodeRequestMultiError is an error
// wrapping multiple validation errors returned by
// NetworkWardenServiceInitiateNetworkNodeRequest.ValidateAll() if the
// designated constraints aren't met.
type NetworkWardenServiceInitiateNetworkNodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceInitiateNetworkNodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceInitiateNetworkNodeRequestMultiError) AllErrors() []error { return m }

// NetworkWardenServiceInitiateNetworkNodeRequestValidationError is the
// validation error returned by
// NetworkWardenServiceInitiateNetworkNodeRequest.Validate if the designated
// constraints aren't met.
type NetworkWardenServiceInitiateNetworkNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceInitiateNetworkNodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkWardenServiceInitiateNetworkNodeRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e NetworkWardenServiceInitiateNetworkNodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkWardenServiceInitiateNetworkNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceInitiateNetworkNodeRequestValidationError) ErrorName() string {
	return "NetworkWardenServiceInitiateNetworkNodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceInitiateNetworkNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceInitiateNetworkNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceInitiateNetworkNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceInitiateNetworkNodeRequestValidationError{}

// Validate checks the field values on
// NetworkWardenServiceInitiateNetworkNodeResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NetworkWardenServiceInitiateNetworkNodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceInitiateNetworkNodeResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// NetworkWardenServiceInitiateNetworkNodeResponseMultiError, or nil if none found.
func (m *NetworkWardenServiceInitiateNetworkNodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceInitiateNetworkNodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return NetworkWardenServiceInitiateNetworkNodeResponseMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceInitiateNetworkNodeResponseMultiError is an error
// wrapping multiple validation errors returned by
// NetworkWardenServiceInitiateNetworkNodeResponse.ValidateAll() if the
// designated constraints aren't met.
type NetworkWardenServiceInitiateNetworkNodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceInitiateNetworkNodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceInitiateNetworkNodeResponseMultiError) AllErrors() []error { return m }

// NetworkWardenServiceInitiateNetworkNodeResponseValidationError is the
// validation error returned by
// NetworkWardenServiceInitiateNetworkNodeResponse.Validate if the designated
// constraints aren't met.
type NetworkWardenServiceInitiateNetworkNodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceInitiateNetworkNodeResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e NetworkWardenServiceInitiateNetworkNodeResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e NetworkWardenServiceInitiateNetworkNodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkWardenServiceInitiateNetworkNodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceInitiateNetworkNodeResponseValidationError) ErrorName() string {
	return "NetworkWardenServiceInitiateNetworkNodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceInitiateNetworkNodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceInitiateNetworkNodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceInitiateNetworkNodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceInitiateNetworkNodeResponseValidationError{}

// Validate checks the field values on
// NetworkWardenServiceGetNetworkWardensListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NetworkWardenServiceGetNetworkWardensListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceGetNetworkWardensListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// NetworkWardenServiceGetNetworkWardensListRequestMultiError, or nil if none found.
func (m *NetworkWardenServiceGetNetworkWardensListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceGetNetworkWardensListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.RemoteMacAddress != nil {
		// no validation rules for RemoteMacAddress
	}

	if m.Pagination != nil {

		if all {
			switch v := interface{}(m.GetPagination()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NetworkWardenServiceGetNetworkWardensListRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NetworkWardenServiceGetNetworkWardensListRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NetworkWardenServiceGetNetworkWardensListRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NetworkWardenServiceGetNetworkWardensListRequestMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceGetNetworkWardensListRequestMultiError is an error
// wrapping multiple validation errors returned by
// NetworkWardenServiceGetNetworkWardensListRequest.ValidateAll() if the
// designated constraints aren't met.
type NetworkWardenServiceGetNetworkWardensListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceGetNetworkWardensListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceGetNetworkWardensListRequestMultiError) AllErrors() []error { return m }

// NetworkWardenServiceGetNetworkWardensListRequestValidationError is the
// validation error returned by
// NetworkWardenServiceGetNetworkWardensListRequest.Validate if the designated
// constraints aren't met.
type NetworkWardenServiceGetNetworkWardensListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceGetNetworkWardensListRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e NetworkWardenServiceGetNetworkWardensListRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e NetworkWardenServiceGetNetworkWardensListRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e NetworkWardenServiceGetNetworkWardensListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceGetNetworkWardensListRequestValidationError) ErrorName() string {
	return "NetworkWardenServiceGetNetworkWardensListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceGetNetworkWardensListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceGetNetworkWardensListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceGetNetworkWardensListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceGetNetworkWardensListRequestValidationError{}

// Validate checks the field values on
// NetworkWardenServiceGetNetworkWardensListResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NetworkWardenServiceGetNetworkWardensListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceGetNetworkWardensListResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// NetworkWardenServiceGetNetworkWardensListResponseMultiError, or nil if none found.
func (m *NetworkWardenServiceGetNetworkWardensListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceGetNetworkWardensListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NetworkWardenServiceGetNetworkWardensListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NetworkWardenServiceGetNetworkWardensListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NetworkWardenServiceGetNetworkWardensListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NetworkWardenServiceGetNetworkWardensListResponseMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceGetNetworkWardensListResponseMultiError is an error
// wrapping multiple validation errors returned by
// NetworkWardenServiceGetNetworkWardensListResponse.ValidateAll() if the
// designated constraints aren't met.
type NetworkWardenServiceGetNetworkWardensListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceGetNetworkWardensListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceGetNetworkWardensListResponseMultiError) AllErrors() []error { return m }

// NetworkWardenServiceGetNetworkWardensListResponseValidationError is the
// validation error returned by
// NetworkWardenServiceGetNetworkWardensListResponse.Validate if the
// designated constraints aren't met.
type NetworkWardenServiceGetNetworkWardensListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceGetNetworkWardensListResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e NetworkWardenServiceGetNetworkWardensListResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e NetworkWardenServiceGetNetworkWardensListResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e NetworkWardenServiceGetNetworkWardensListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceGetNetworkWardensListResponseValidationError) ErrorName() string {
	return "NetworkWardenServiceGetNetworkWardensListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceGetNetworkWardensListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceGetNetworkWardensListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceGetNetworkWardensListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceGetNetworkWardensListResponseValidationError{}

// Validate checks the field values on
// NetworkWardenServiceRegisterNetworkWardenRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NetworkWardenServiceRegisterNetworkWardenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceRegisterNetworkWardenRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// NetworkWardenServiceRegisterNetworkWardenRequestMultiError, or nil if none found.
func (m *NetworkWardenServiceRegisterNetworkWardenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceRegisterNetworkWardenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for AddressSuffix

	// no validation rules for PdnCapacity

	// no validation rules for NnCapacity

	// no validation rules for Url

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetRateLimit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NetworkWardenServiceRegisterNetworkWardenRequestValidationError{
					field:  "RateLimit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NetworkWardenServiceRegisterNetworkWardenRequestValidationError{
					field:  "RateLimit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRateLimit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NetworkWardenServiceRegisterNetworkWardenRequestValidationError{
				field:  "RateLimit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NetworkWardenServiceRegisterNetworkWardenRequestMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceRegisterNetworkWardenRequestMultiError is an error
// wrapping multiple validation errors returned by
// NetworkWardenServiceRegisterNetworkWardenRequest.ValidateAll() if the
// designated constraints aren't met.
type NetworkWardenServiceRegisterNetworkWardenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceRegisterNetworkWardenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceRegisterNetworkWardenRequestMultiError) AllErrors() []error { return m }

// NetworkWardenServiceRegisterNetworkWardenRequestValidationError is the
// validation error returned by
// NetworkWardenServiceRegisterNetworkWardenRequest.Validate if the designated
// constraints aren't met.
type NetworkWardenServiceRegisterNetworkWardenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceRegisterNetworkWardenRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e NetworkWardenServiceRegisterNetworkWardenRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e NetworkWardenServiceRegisterNetworkWardenRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e NetworkWardenServiceRegisterNetworkWardenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceRegisterNetworkWardenRequestValidationError) ErrorName() string {
	return "NetworkWardenServiceRegisterNetworkWardenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceRegisterNetworkWardenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceRegisterNetworkWardenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceRegisterNetworkWardenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceRegisterNetworkWardenRequestValidationError{}

// Validate checks the field values on
// NetworkWardenServiceRegisterNetworkWardenResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NetworkWardenServiceRegisterNetworkWardenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NetworkWardenServiceRegisterNetworkWardenResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// NetworkWardenServiceRegisterNetworkWardenResponseMultiError, or nil if none found.
func (m *NetworkWardenServiceRegisterNetworkWardenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkWardenServiceRegisterNetworkWardenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return NetworkWardenServiceRegisterNetworkWardenResponseMultiError(errors)
	}

	return nil
}

// NetworkWardenServiceRegisterNetworkWardenResponseMultiError is an error
// wrapping multiple validation errors returned by
// NetworkWardenServiceRegisterNetworkWardenResponse.ValidateAll() if the
// designated constraints aren't met.
type NetworkWardenServiceRegisterNetworkWardenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkWardenServiceRegisterNetworkWardenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkWardenServiceRegisterNetworkWardenResponseMultiError) AllErrors() []error { return m }

// NetworkWardenServiceRegisterNetworkWardenResponseValidationError is the
// validation error returned by
// NetworkWardenServiceRegisterNetworkWardenResponse.Validate if the
// designated constraints aren't met.
type NetworkWardenServiceRegisterNetworkWardenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkWardenServiceRegisterNetworkWardenResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e NetworkWardenServiceRegisterNetworkWardenResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e NetworkWardenServiceRegisterNetworkWardenResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e NetworkWardenServiceRegisterNetworkWardenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkWardenServiceRegisterNetworkWardenResponseValidationError) ErrorName() string {
	return "NetworkWardenServiceRegisterNetworkWardenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkWardenServiceRegisterNetworkWardenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkWardenServiceRegisterNetworkWardenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkWardenServiceRegisterNetworkWardenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkWardenServiceRegisterNetworkWardenResponseValidationError{}
