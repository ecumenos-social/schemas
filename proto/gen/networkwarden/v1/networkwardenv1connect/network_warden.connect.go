// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: networkwarden/v1/network_warden.proto

package networkwardenv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ecumenos-social/schemas/proto/gen/networkwarden/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NetworkWardenServiceName is the fully-qualified name of the NetworkWardenService service.
	NetworkWardenServiceName = "networkwarden.v1.NetworkWardenService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NetworkWardenServiceRegisterHolderProcedure is the fully-qualified name of the
	// NetworkWardenService's RegisterHolder RPC.
	NetworkWardenServiceRegisterHolderProcedure = "/networkwarden.v1.NetworkWardenService/RegisterHolder"
	// NetworkWardenServiceConfirmHolderRegistrationProcedure is the fully-qualified name of the
	// NetworkWardenService's ConfirmHolderRegistration RPC.
	NetworkWardenServiceConfirmHolderRegistrationProcedure = "/networkwarden.v1.NetworkWardenService/ConfirmHolderRegistration"
	// NetworkWardenServiceResendConfirmationCodeProcedure is the fully-qualified name of the
	// NetworkWardenService's ResendConfirmationCode RPC.
	NetworkWardenServiceResendConfirmationCodeProcedure = "/networkwarden.v1.NetworkWardenService/ResendConfirmationCode"
	// NetworkWardenServiceLoginHolderProcedure is the fully-qualified name of the
	// NetworkWardenService's LoginHolder RPC.
	NetworkWardenServiceLoginHolderProcedure = "/networkwarden.v1.NetworkWardenService/LoginHolder"
	// NetworkWardenServiceLogoutHolderProcedure is the fully-qualified name of the
	// NetworkWardenService's LogoutHolder RPC.
	NetworkWardenServiceLogoutHolderProcedure = "/networkwarden.v1.NetworkWardenService/LogoutHolder"
	// NetworkWardenServiceRefreshHolderTokenProcedure is the fully-qualified name of the
	// NetworkWardenService's RefreshHolderToken RPC.
	NetworkWardenServiceRefreshHolderTokenProcedure = "/networkwarden.v1.NetworkWardenService/RefreshHolderToken"
	// NetworkWardenServiceChangeHolderPasswordProcedure is the fully-qualified name of the
	// NetworkWardenService's ChangeHolderPassword RPC.
	NetworkWardenServiceChangeHolderPasswordProcedure = "/networkwarden.v1.NetworkWardenService/ChangeHolderPassword"
	// NetworkWardenServiceModifyHolderProcedure is the fully-qualified name of the
	// NetworkWardenService's ModifyHolder RPC.
	NetworkWardenServiceModifyHolderProcedure = "/networkwarden.v1.NetworkWardenService/ModifyHolder"
	// NetworkWardenServiceGetHolderProcedure is the fully-qualified name of the NetworkWardenService's
	// GetHolder RPC.
	NetworkWardenServiceGetHolderProcedure = "/networkwarden.v1.NetworkWardenService/GetHolder"
	// NetworkWardenServiceDeleteHolderProcedure is the fully-qualified name of the
	// NetworkWardenService's DeleteHolder RPC.
	NetworkWardenServiceDeleteHolderProcedure = "/networkwarden.v1.NetworkWardenService/DeleteHolder"
	// NetworkWardenServiceGetPersonalDataNodesListProcedure is the fully-qualified name of the
	// NetworkWardenService's GetPersonalDataNodesList RPC.
	NetworkWardenServiceGetPersonalDataNodesListProcedure = "/networkwarden.v1.NetworkWardenService/GetPersonalDataNodesList"
	// NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistProcedure is the fully-qualified name
	// of the NetworkWardenService's JoinPersonalDataNodeRegistrationWaitlist RPC.
	NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistProcedure = "/networkwarden.v1.NetworkWardenService/JoinPersonalDataNodeRegistrationWaitlist"
	// NetworkWardenServiceRegisterPersonalDataNodeProcedure is the fully-qualified name of the
	// NetworkWardenService's RegisterPersonalDataNode RPC.
	NetworkWardenServiceRegisterPersonalDataNodeProcedure = "/networkwarden.v1.NetworkWardenService/RegisterPersonalDataNode"
	// NetworkWardenServiceGetNetworkNodesListProcedure is the fully-qualified name of the
	// NetworkWardenService's GetNetworkNodesList RPC.
	NetworkWardenServiceGetNetworkNodesListProcedure = "/networkwarden.v1.NetworkWardenService/GetNetworkNodesList"
	// NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistProcedure is the fully-qualified name of
	// the NetworkWardenService's JoinNetworkNodeRegistrationWaitlist RPC.
	NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistProcedure = "/networkwarden.v1.NetworkWardenService/JoinNetworkNodeRegistrationWaitlist"
	// NetworkWardenServiceRegisterNetworkNodeProcedure is the fully-qualified name of the
	// NetworkWardenService's RegisterNetworkNode RPC.
	NetworkWardenServiceRegisterNetworkNodeProcedure = "/networkwarden.v1.NetworkWardenService/RegisterNetworkNode"
	// NetworkWardenServiceGetNetworkWardensListProcedure is the fully-qualified name of the
	// NetworkWardenService's GetNetworkWardensList RPC.
	NetworkWardenServiceGetNetworkWardensListProcedure = "/networkwarden.v1.NetworkWardenService/GetNetworkWardensList"
	// NetworkWardenServiceRegisterNetworkWardenProcedure is the fully-qualified name of the
	// NetworkWardenService's RegisterNetworkWarden RPC.
	NetworkWardenServiceRegisterNetworkWardenProcedure = "/networkwarden.v1.NetworkWardenService/RegisterNetworkWarden"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	networkWardenServiceServiceDescriptor                                        = v1.File_networkwarden_v1_network_warden_proto.Services().ByName("NetworkWardenService")
	networkWardenServiceRegisterHolderMethodDescriptor                           = networkWardenServiceServiceDescriptor.Methods().ByName("RegisterHolder")
	networkWardenServiceConfirmHolderRegistrationMethodDescriptor                = networkWardenServiceServiceDescriptor.Methods().ByName("ConfirmHolderRegistration")
	networkWardenServiceResendConfirmationCodeMethodDescriptor                   = networkWardenServiceServiceDescriptor.Methods().ByName("ResendConfirmationCode")
	networkWardenServiceLoginHolderMethodDescriptor                              = networkWardenServiceServiceDescriptor.Methods().ByName("LoginHolder")
	networkWardenServiceLogoutHolderMethodDescriptor                             = networkWardenServiceServiceDescriptor.Methods().ByName("LogoutHolder")
	networkWardenServiceRefreshHolderTokenMethodDescriptor                       = networkWardenServiceServiceDescriptor.Methods().ByName("RefreshHolderToken")
	networkWardenServiceChangeHolderPasswordMethodDescriptor                     = networkWardenServiceServiceDescriptor.Methods().ByName("ChangeHolderPassword")
	networkWardenServiceModifyHolderMethodDescriptor                             = networkWardenServiceServiceDescriptor.Methods().ByName("ModifyHolder")
	networkWardenServiceGetHolderMethodDescriptor                                = networkWardenServiceServiceDescriptor.Methods().ByName("GetHolder")
	networkWardenServiceDeleteHolderMethodDescriptor                             = networkWardenServiceServiceDescriptor.Methods().ByName("DeleteHolder")
	networkWardenServiceGetPersonalDataNodesListMethodDescriptor                 = networkWardenServiceServiceDescriptor.Methods().ByName("GetPersonalDataNodesList")
	networkWardenServiceJoinPersonalDataNodeRegistrationWaitlistMethodDescriptor = networkWardenServiceServiceDescriptor.Methods().ByName("JoinPersonalDataNodeRegistrationWaitlist")
	networkWardenServiceRegisterPersonalDataNodeMethodDescriptor                 = networkWardenServiceServiceDescriptor.Methods().ByName("RegisterPersonalDataNode")
	networkWardenServiceGetNetworkNodesListMethodDescriptor                      = networkWardenServiceServiceDescriptor.Methods().ByName("GetNetworkNodesList")
	networkWardenServiceJoinNetworkNodeRegistrationWaitlistMethodDescriptor      = networkWardenServiceServiceDescriptor.Methods().ByName("JoinNetworkNodeRegistrationWaitlist")
	networkWardenServiceRegisterNetworkNodeMethodDescriptor                      = networkWardenServiceServiceDescriptor.Methods().ByName("RegisterNetworkNode")
	networkWardenServiceGetNetworkWardensListMethodDescriptor                    = networkWardenServiceServiceDescriptor.Methods().ByName("GetNetworkWardensList")
	networkWardenServiceRegisterNetworkWardenMethodDescriptor                    = networkWardenServiceServiceDescriptor.Methods().ByName("RegisterNetworkWarden")
)

// NetworkWardenServiceClient is a client for the networkwarden.v1.NetworkWardenService service.
type NetworkWardenServiceClient interface {
	RegisterHolder(context.Context, *connect.Request[v1.RegisterHolderRequest]) (*connect.Response[v1.RegisterHolderResponse], error)
	ConfirmHolderRegistration(context.Context, *connect.Request[v1.ConfirmHolderRegistrationRequest]) (*connect.Response[v1.ConfirmHolderRegistrationResponse], error)
	ResendConfirmationCode(context.Context, *connect.Request[v1.ResendConfirmationCodeRequest]) (*connect.Response[v1.ResendConfirmationCodeResponse], error)
	LoginHolder(context.Context, *connect.Request[v1.LoginHolderRequest]) (*connect.Response[v1.LoginHolderResponse], error)
	LogoutHolder(context.Context, *connect.Request[v1.LogoutHolderRequest]) (*connect.Response[v1.LogoutHolderResponse], error)
	RefreshHolderToken(context.Context, *connect.Request[v1.RefreshHolderTokenRequest]) (*connect.Response[v1.RefreshHolderTokenResponse], error)
	ChangeHolderPassword(context.Context, *connect.Request[v1.ChangeHolderPasswordRequest]) (*connect.Response[v1.ChangeHolderPasswordResponse], error)
	ModifyHolder(context.Context, *connect.Request[v1.ModifyHolderRequest]) (*connect.Response[v1.ModifyHolderResponse], error)
	GetHolder(context.Context, *connect.Request[v1.GetHolderRequest]) (*connect.Response[v1.GetHolderResponse], error)
	DeleteHolder(context.Context, *connect.Request[v1.DeleteHolderRequest]) (*connect.Response[v1.DeleteHolderResponse], error)
	GetPersonalDataNodesList(context.Context, *connect.Request[v1.GetPersonalDataNodesListRequest]) (*connect.Response[v1.GetPersonalDataNodesListResponse], error)
	JoinPersonalDataNodeRegistrationWaitlist(context.Context, *connect.Request[v1.JoinPersonalDataNodeRegistrationWaitlistRequest]) (*connect.Response[v1.JoinPersonalDataNodeRegistrationWaitlistResponse], error)
	RegisterPersonalDataNode(context.Context, *connect.Request[v1.RegisterPersonalDataNodeRequest]) (*connect.Response[v1.RegisterPersonalDataNodeResponse], error)
	GetNetworkNodesList(context.Context, *connect.Request[v1.GetNetworkNodesListRequest]) (*connect.Response[v1.GetNetworkNodesListResponse], error)
	JoinNetworkNodeRegistrationWaitlist(context.Context, *connect.Request[v1.JoinNetworkNodeRegistrationWaitlistRequest]) (*connect.Response[v1.JoinNetworkNodeRegistrationWaitlistResponse], error)
	RegisterNetworkNode(context.Context, *connect.Request[v1.RegisterNetworkNodeRequest]) (*connect.Response[v1.RegisterNetworkNodeResponse], error)
	GetNetworkWardensList(context.Context, *connect.Request[v1.GetNetworkWardensListRequest]) (*connect.Response[v1.GetNetworkWardensListResponse], error)
	RegisterNetworkWarden(context.Context, *connect.Request[v1.RegisterNetworkWardenRequest]) (*connect.Response[v1.RegisterNetworkWardenResponse], error)
}

// NewNetworkWardenServiceClient constructs a client for the networkwarden.v1.NetworkWardenService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNetworkWardenServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NetworkWardenServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &networkWardenServiceClient{
		registerHolder: connect.NewClient[v1.RegisterHolderRequest, v1.RegisterHolderResponse](
			httpClient,
			baseURL+NetworkWardenServiceRegisterHolderProcedure,
			connect.WithSchema(networkWardenServiceRegisterHolderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		confirmHolderRegistration: connect.NewClient[v1.ConfirmHolderRegistrationRequest, v1.ConfirmHolderRegistrationResponse](
			httpClient,
			baseURL+NetworkWardenServiceConfirmHolderRegistrationProcedure,
			connect.WithSchema(networkWardenServiceConfirmHolderRegistrationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		resendConfirmationCode: connect.NewClient[v1.ResendConfirmationCodeRequest, v1.ResendConfirmationCodeResponse](
			httpClient,
			baseURL+NetworkWardenServiceResendConfirmationCodeProcedure,
			connect.WithSchema(networkWardenServiceResendConfirmationCodeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		loginHolder: connect.NewClient[v1.LoginHolderRequest, v1.LoginHolderResponse](
			httpClient,
			baseURL+NetworkWardenServiceLoginHolderProcedure,
			connect.WithSchema(networkWardenServiceLoginHolderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		logoutHolder: connect.NewClient[v1.LogoutHolderRequest, v1.LogoutHolderResponse](
			httpClient,
			baseURL+NetworkWardenServiceLogoutHolderProcedure,
			connect.WithSchema(networkWardenServiceLogoutHolderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		refreshHolderToken: connect.NewClient[v1.RefreshHolderTokenRequest, v1.RefreshHolderTokenResponse](
			httpClient,
			baseURL+NetworkWardenServiceRefreshHolderTokenProcedure,
			connect.WithSchema(networkWardenServiceRefreshHolderTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		changeHolderPassword: connect.NewClient[v1.ChangeHolderPasswordRequest, v1.ChangeHolderPasswordResponse](
			httpClient,
			baseURL+NetworkWardenServiceChangeHolderPasswordProcedure,
			connect.WithSchema(networkWardenServiceChangeHolderPasswordMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		modifyHolder: connect.NewClient[v1.ModifyHolderRequest, v1.ModifyHolderResponse](
			httpClient,
			baseURL+NetworkWardenServiceModifyHolderProcedure,
			connect.WithSchema(networkWardenServiceModifyHolderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getHolder: connect.NewClient[v1.GetHolderRequest, v1.GetHolderResponse](
			httpClient,
			baseURL+NetworkWardenServiceGetHolderProcedure,
			connect.WithSchema(networkWardenServiceGetHolderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteHolder: connect.NewClient[v1.DeleteHolderRequest, v1.DeleteHolderResponse](
			httpClient,
			baseURL+NetworkWardenServiceDeleteHolderProcedure,
			connect.WithSchema(networkWardenServiceDeleteHolderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getPersonalDataNodesList: connect.NewClient[v1.GetPersonalDataNodesListRequest, v1.GetPersonalDataNodesListResponse](
			httpClient,
			baseURL+NetworkWardenServiceGetPersonalDataNodesListProcedure,
			connect.WithSchema(networkWardenServiceGetPersonalDataNodesListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		joinPersonalDataNodeRegistrationWaitlist: connect.NewClient[v1.JoinPersonalDataNodeRegistrationWaitlistRequest, v1.JoinPersonalDataNodeRegistrationWaitlistResponse](
			httpClient,
			baseURL+NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistProcedure,
			connect.WithSchema(networkWardenServiceJoinPersonalDataNodeRegistrationWaitlistMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		registerPersonalDataNode: connect.NewClient[v1.RegisterPersonalDataNodeRequest, v1.RegisterPersonalDataNodeResponse](
			httpClient,
			baseURL+NetworkWardenServiceRegisterPersonalDataNodeProcedure,
			connect.WithSchema(networkWardenServiceRegisterPersonalDataNodeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getNetworkNodesList: connect.NewClient[v1.GetNetworkNodesListRequest, v1.GetNetworkNodesListResponse](
			httpClient,
			baseURL+NetworkWardenServiceGetNetworkNodesListProcedure,
			connect.WithSchema(networkWardenServiceGetNetworkNodesListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		joinNetworkNodeRegistrationWaitlist: connect.NewClient[v1.JoinNetworkNodeRegistrationWaitlistRequest, v1.JoinNetworkNodeRegistrationWaitlistResponse](
			httpClient,
			baseURL+NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistProcedure,
			connect.WithSchema(networkWardenServiceJoinNetworkNodeRegistrationWaitlistMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		registerNetworkNode: connect.NewClient[v1.RegisterNetworkNodeRequest, v1.RegisterNetworkNodeResponse](
			httpClient,
			baseURL+NetworkWardenServiceRegisterNetworkNodeProcedure,
			connect.WithSchema(networkWardenServiceRegisterNetworkNodeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getNetworkWardensList: connect.NewClient[v1.GetNetworkWardensListRequest, v1.GetNetworkWardensListResponse](
			httpClient,
			baseURL+NetworkWardenServiceGetNetworkWardensListProcedure,
			connect.WithSchema(networkWardenServiceGetNetworkWardensListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		registerNetworkWarden: connect.NewClient[v1.RegisterNetworkWardenRequest, v1.RegisterNetworkWardenResponse](
			httpClient,
			baseURL+NetworkWardenServiceRegisterNetworkWardenProcedure,
			connect.WithSchema(networkWardenServiceRegisterNetworkWardenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// networkWardenServiceClient implements NetworkWardenServiceClient.
type networkWardenServiceClient struct {
	registerHolder                           *connect.Client[v1.RegisterHolderRequest, v1.RegisterHolderResponse]
	confirmHolderRegistration                *connect.Client[v1.ConfirmHolderRegistrationRequest, v1.ConfirmHolderRegistrationResponse]
	resendConfirmationCode                   *connect.Client[v1.ResendConfirmationCodeRequest, v1.ResendConfirmationCodeResponse]
	loginHolder                              *connect.Client[v1.LoginHolderRequest, v1.LoginHolderResponse]
	logoutHolder                             *connect.Client[v1.LogoutHolderRequest, v1.LogoutHolderResponse]
	refreshHolderToken                       *connect.Client[v1.RefreshHolderTokenRequest, v1.RefreshHolderTokenResponse]
	changeHolderPassword                     *connect.Client[v1.ChangeHolderPasswordRequest, v1.ChangeHolderPasswordResponse]
	modifyHolder                             *connect.Client[v1.ModifyHolderRequest, v1.ModifyHolderResponse]
	getHolder                                *connect.Client[v1.GetHolderRequest, v1.GetHolderResponse]
	deleteHolder                             *connect.Client[v1.DeleteHolderRequest, v1.DeleteHolderResponse]
	getPersonalDataNodesList                 *connect.Client[v1.GetPersonalDataNodesListRequest, v1.GetPersonalDataNodesListResponse]
	joinPersonalDataNodeRegistrationWaitlist *connect.Client[v1.JoinPersonalDataNodeRegistrationWaitlistRequest, v1.JoinPersonalDataNodeRegistrationWaitlistResponse]
	registerPersonalDataNode                 *connect.Client[v1.RegisterPersonalDataNodeRequest, v1.RegisterPersonalDataNodeResponse]
	getNetworkNodesList                      *connect.Client[v1.GetNetworkNodesListRequest, v1.GetNetworkNodesListResponse]
	joinNetworkNodeRegistrationWaitlist      *connect.Client[v1.JoinNetworkNodeRegistrationWaitlistRequest, v1.JoinNetworkNodeRegistrationWaitlistResponse]
	registerNetworkNode                      *connect.Client[v1.RegisterNetworkNodeRequest, v1.RegisterNetworkNodeResponse]
	getNetworkWardensList                    *connect.Client[v1.GetNetworkWardensListRequest, v1.GetNetworkWardensListResponse]
	registerNetworkWarden                    *connect.Client[v1.RegisterNetworkWardenRequest, v1.RegisterNetworkWardenResponse]
}

// RegisterHolder calls networkwarden.v1.NetworkWardenService.RegisterHolder.
func (c *networkWardenServiceClient) RegisterHolder(ctx context.Context, req *connect.Request[v1.RegisterHolderRequest]) (*connect.Response[v1.RegisterHolderResponse], error) {
	return c.registerHolder.CallUnary(ctx, req)
}

// ConfirmHolderRegistration calls networkwarden.v1.NetworkWardenService.ConfirmHolderRegistration.
func (c *networkWardenServiceClient) ConfirmHolderRegistration(ctx context.Context, req *connect.Request[v1.ConfirmHolderRegistrationRequest]) (*connect.Response[v1.ConfirmHolderRegistrationResponse], error) {
	return c.confirmHolderRegistration.CallUnary(ctx, req)
}

// ResendConfirmationCode calls networkwarden.v1.NetworkWardenService.ResendConfirmationCode.
func (c *networkWardenServiceClient) ResendConfirmationCode(ctx context.Context, req *connect.Request[v1.ResendConfirmationCodeRequest]) (*connect.Response[v1.ResendConfirmationCodeResponse], error) {
	return c.resendConfirmationCode.CallUnary(ctx, req)
}

// LoginHolder calls networkwarden.v1.NetworkWardenService.LoginHolder.
func (c *networkWardenServiceClient) LoginHolder(ctx context.Context, req *connect.Request[v1.LoginHolderRequest]) (*connect.Response[v1.LoginHolderResponse], error) {
	return c.loginHolder.CallUnary(ctx, req)
}

// LogoutHolder calls networkwarden.v1.NetworkWardenService.LogoutHolder.
func (c *networkWardenServiceClient) LogoutHolder(ctx context.Context, req *connect.Request[v1.LogoutHolderRequest]) (*connect.Response[v1.LogoutHolderResponse], error) {
	return c.logoutHolder.CallUnary(ctx, req)
}

// RefreshHolderToken calls networkwarden.v1.NetworkWardenService.RefreshHolderToken.
func (c *networkWardenServiceClient) RefreshHolderToken(ctx context.Context, req *connect.Request[v1.RefreshHolderTokenRequest]) (*connect.Response[v1.RefreshHolderTokenResponse], error) {
	return c.refreshHolderToken.CallUnary(ctx, req)
}

// ChangeHolderPassword calls networkwarden.v1.NetworkWardenService.ChangeHolderPassword.
func (c *networkWardenServiceClient) ChangeHolderPassword(ctx context.Context, req *connect.Request[v1.ChangeHolderPasswordRequest]) (*connect.Response[v1.ChangeHolderPasswordResponse], error) {
	return c.changeHolderPassword.CallUnary(ctx, req)
}

// ModifyHolder calls networkwarden.v1.NetworkWardenService.ModifyHolder.
func (c *networkWardenServiceClient) ModifyHolder(ctx context.Context, req *connect.Request[v1.ModifyHolderRequest]) (*connect.Response[v1.ModifyHolderResponse], error) {
	return c.modifyHolder.CallUnary(ctx, req)
}

// GetHolder calls networkwarden.v1.NetworkWardenService.GetHolder.
func (c *networkWardenServiceClient) GetHolder(ctx context.Context, req *connect.Request[v1.GetHolderRequest]) (*connect.Response[v1.GetHolderResponse], error) {
	return c.getHolder.CallUnary(ctx, req)
}

// DeleteHolder calls networkwarden.v1.NetworkWardenService.DeleteHolder.
func (c *networkWardenServiceClient) DeleteHolder(ctx context.Context, req *connect.Request[v1.DeleteHolderRequest]) (*connect.Response[v1.DeleteHolderResponse], error) {
	return c.deleteHolder.CallUnary(ctx, req)
}

// GetPersonalDataNodesList calls networkwarden.v1.NetworkWardenService.GetPersonalDataNodesList.
func (c *networkWardenServiceClient) GetPersonalDataNodesList(ctx context.Context, req *connect.Request[v1.GetPersonalDataNodesListRequest]) (*connect.Response[v1.GetPersonalDataNodesListResponse], error) {
	return c.getPersonalDataNodesList.CallUnary(ctx, req)
}

// JoinPersonalDataNodeRegistrationWaitlist calls
// networkwarden.v1.NetworkWardenService.JoinPersonalDataNodeRegistrationWaitlist.
func (c *networkWardenServiceClient) JoinPersonalDataNodeRegistrationWaitlist(ctx context.Context, req *connect.Request[v1.JoinPersonalDataNodeRegistrationWaitlistRequest]) (*connect.Response[v1.JoinPersonalDataNodeRegistrationWaitlistResponse], error) {
	return c.joinPersonalDataNodeRegistrationWaitlist.CallUnary(ctx, req)
}

// RegisterPersonalDataNode calls networkwarden.v1.NetworkWardenService.RegisterPersonalDataNode.
func (c *networkWardenServiceClient) RegisterPersonalDataNode(ctx context.Context, req *connect.Request[v1.RegisterPersonalDataNodeRequest]) (*connect.Response[v1.RegisterPersonalDataNodeResponse], error) {
	return c.registerPersonalDataNode.CallUnary(ctx, req)
}

// GetNetworkNodesList calls networkwarden.v1.NetworkWardenService.GetNetworkNodesList.
func (c *networkWardenServiceClient) GetNetworkNodesList(ctx context.Context, req *connect.Request[v1.GetNetworkNodesListRequest]) (*connect.Response[v1.GetNetworkNodesListResponse], error) {
	return c.getNetworkNodesList.CallUnary(ctx, req)
}

// JoinNetworkNodeRegistrationWaitlist calls
// networkwarden.v1.NetworkWardenService.JoinNetworkNodeRegistrationWaitlist.
func (c *networkWardenServiceClient) JoinNetworkNodeRegistrationWaitlist(ctx context.Context, req *connect.Request[v1.JoinNetworkNodeRegistrationWaitlistRequest]) (*connect.Response[v1.JoinNetworkNodeRegistrationWaitlistResponse], error) {
	return c.joinNetworkNodeRegistrationWaitlist.CallUnary(ctx, req)
}

// RegisterNetworkNode calls networkwarden.v1.NetworkWardenService.RegisterNetworkNode.
func (c *networkWardenServiceClient) RegisterNetworkNode(ctx context.Context, req *connect.Request[v1.RegisterNetworkNodeRequest]) (*connect.Response[v1.RegisterNetworkNodeResponse], error) {
	return c.registerNetworkNode.CallUnary(ctx, req)
}

// GetNetworkWardensList calls networkwarden.v1.NetworkWardenService.GetNetworkWardensList.
func (c *networkWardenServiceClient) GetNetworkWardensList(ctx context.Context, req *connect.Request[v1.GetNetworkWardensListRequest]) (*connect.Response[v1.GetNetworkWardensListResponse], error) {
	return c.getNetworkWardensList.CallUnary(ctx, req)
}

// RegisterNetworkWarden calls networkwarden.v1.NetworkWardenService.RegisterNetworkWarden.
func (c *networkWardenServiceClient) RegisterNetworkWarden(ctx context.Context, req *connect.Request[v1.RegisterNetworkWardenRequest]) (*connect.Response[v1.RegisterNetworkWardenResponse], error) {
	return c.registerNetworkWarden.CallUnary(ctx, req)
}

// NetworkWardenServiceHandler is an implementation of the networkwarden.v1.NetworkWardenService
// service.
type NetworkWardenServiceHandler interface {
	RegisterHolder(context.Context, *connect.Request[v1.RegisterHolderRequest]) (*connect.Response[v1.RegisterHolderResponse], error)
	ConfirmHolderRegistration(context.Context, *connect.Request[v1.ConfirmHolderRegistrationRequest]) (*connect.Response[v1.ConfirmHolderRegistrationResponse], error)
	ResendConfirmationCode(context.Context, *connect.Request[v1.ResendConfirmationCodeRequest]) (*connect.Response[v1.ResendConfirmationCodeResponse], error)
	LoginHolder(context.Context, *connect.Request[v1.LoginHolderRequest]) (*connect.Response[v1.LoginHolderResponse], error)
	LogoutHolder(context.Context, *connect.Request[v1.LogoutHolderRequest]) (*connect.Response[v1.LogoutHolderResponse], error)
	RefreshHolderToken(context.Context, *connect.Request[v1.RefreshHolderTokenRequest]) (*connect.Response[v1.RefreshHolderTokenResponse], error)
	ChangeHolderPassword(context.Context, *connect.Request[v1.ChangeHolderPasswordRequest]) (*connect.Response[v1.ChangeHolderPasswordResponse], error)
	ModifyHolder(context.Context, *connect.Request[v1.ModifyHolderRequest]) (*connect.Response[v1.ModifyHolderResponse], error)
	GetHolder(context.Context, *connect.Request[v1.GetHolderRequest]) (*connect.Response[v1.GetHolderResponse], error)
	DeleteHolder(context.Context, *connect.Request[v1.DeleteHolderRequest]) (*connect.Response[v1.DeleteHolderResponse], error)
	GetPersonalDataNodesList(context.Context, *connect.Request[v1.GetPersonalDataNodesListRequest]) (*connect.Response[v1.GetPersonalDataNodesListResponse], error)
	JoinPersonalDataNodeRegistrationWaitlist(context.Context, *connect.Request[v1.JoinPersonalDataNodeRegistrationWaitlistRequest]) (*connect.Response[v1.JoinPersonalDataNodeRegistrationWaitlistResponse], error)
	RegisterPersonalDataNode(context.Context, *connect.Request[v1.RegisterPersonalDataNodeRequest]) (*connect.Response[v1.RegisterPersonalDataNodeResponse], error)
	GetNetworkNodesList(context.Context, *connect.Request[v1.GetNetworkNodesListRequest]) (*connect.Response[v1.GetNetworkNodesListResponse], error)
	JoinNetworkNodeRegistrationWaitlist(context.Context, *connect.Request[v1.JoinNetworkNodeRegistrationWaitlistRequest]) (*connect.Response[v1.JoinNetworkNodeRegistrationWaitlistResponse], error)
	RegisterNetworkNode(context.Context, *connect.Request[v1.RegisterNetworkNodeRequest]) (*connect.Response[v1.RegisterNetworkNodeResponse], error)
	GetNetworkWardensList(context.Context, *connect.Request[v1.GetNetworkWardensListRequest]) (*connect.Response[v1.GetNetworkWardensListResponse], error)
	RegisterNetworkWarden(context.Context, *connect.Request[v1.RegisterNetworkWardenRequest]) (*connect.Response[v1.RegisterNetworkWardenResponse], error)
}

// NewNetworkWardenServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNetworkWardenServiceHandler(svc NetworkWardenServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	networkWardenServiceRegisterHolderHandler := connect.NewUnaryHandler(
		NetworkWardenServiceRegisterHolderProcedure,
		svc.RegisterHolder,
		connect.WithSchema(networkWardenServiceRegisterHolderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	networkWardenServiceConfirmHolderRegistrationHandler := connect.NewUnaryHandler(
		NetworkWardenServiceConfirmHolderRegistrationProcedure,
		svc.ConfirmHolderRegistration,
		connect.WithSchema(networkWardenServiceConfirmHolderRegistrationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	networkWardenServiceResendConfirmationCodeHandler := connect.NewUnaryHandler(
		NetworkWardenServiceResendConfirmationCodeProcedure,
		svc.ResendConfirmationCode,
		connect.WithSchema(networkWardenServiceResendConfirmationCodeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	networkWardenServiceLoginHolderHandler := connect.NewUnaryHandler(
		NetworkWardenServiceLoginHolderProcedure,
		svc.LoginHolder,
		connect.WithSchema(networkWardenServiceLoginHolderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	networkWardenServiceLogoutHolderHandler := connect.NewUnaryHandler(
		NetworkWardenServiceLogoutHolderProcedure,
		svc.LogoutHolder,
		connect.WithSchema(networkWardenServiceLogoutHolderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	networkWardenServiceRefreshHolderTokenHandler := connect.NewUnaryHandler(
		NetworkWardenServiceRefreshHolderTokenProcedure,
		svc.RefreshHolderToken,
		connect.WithSchema(networkWardenServiceRefreshHolderTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	networkWardenServiceChangeHolderPasswordHandler := connect.NewUnaryHandler(
		NetworkWardenServiceChangeHolderPasswordProcedure,
		svc.ChangeHolderPassword,
		connect.WithSchema(networkWardenServiceChangeHolderPasswordMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	networkWardenServiceModifyHolderHandler := connect.NewUnaryHandler(
		NetworkWardenServiceModifyHolderProcedure,
		svc.ModifyHolder,
		connect.WithSchema(networkWardenServiceModifyHolderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	networkWardenServiceGetHolderHandler := connect.NewUnaryHandler(
		NetworkWardenServiceGetHolderProcedure,
		svc.GetHolder,
		connect.WithSchema(networkWardenServiceGetHolderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	networkWardenServiceDeleteHolderHandler := connect.NewUnaryHandler(
		NetworkWardenServiceDeleteHolderProcedure,
		svc.DeleteHolder,
		connect.WithSchema(networkWardenServiceDeleteHolderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	networkWardenServiceGetPersonalDataNodesListHandler := connect.NewUnaryHandler(
		NetworkWardenServiceGetPersonalDataNodesListProcedure,
		svc.GetPersonalDataNodesList,
		connect.WithSchema(networkWardenServiceGetPersonalDataNodesListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	networkWardenServiceJoinPersonalDataNodeRegistrationWaitlistHandler := connect.NewUnaryHandler(
		NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistProcedure,
		svc.JoinPersonalDataNodeRegistrationWaitlist,
		connect.WithSchema(networkWardenServiceJoinPersonalDataNodeRegistrationWaitlistMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	networkWardenServiceRegisterPersonalDataNodeHandler := connect.NewUnaryHandler(
		NetworkWardenServiceRegisterPersonalDataNodeProcedure,
		svc.RegisterPersonalDataNode,
		connect.WithSchema(networkWardenServiceRegisterPersonalDataNodeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	networkWardenServiceGetNetworkNodesListHandler := connect.NewUnaryHandler(
		NetworkWardenServiceGetNetworkNodesListProcedure,
		svc.GetNetworkNodesList,
		connect.WithSchema(networkWardenServiceGetNetworkNodesListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	networkWardenServiceJoinNetworkNodeRegistrationWaitlistHandler := connect.NewUnaryHandler(
		NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistProcedure,
		svc.JoinNetworkNodeRegistrationWaitlist,
		connect.WithSchema(networkWardenServiceJoinNetworkNodeRegistrationWaitlistMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	networkWardenServiceRegisterNetworkNodeHandler := connect.NewUnaryHandler(
		NetworkWardenServiceRegisterNetworkNodeProcedure,
		svc.RegisterNetworkNode,
		connect.WithSchema(networkWardenServiceRegisterNetworkNodeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	networkWardenServiceGetNetworkWardensListHandler := connect.NewUnaryHandler(
		NetworkWardenServiceGetNetworkWardensListProcedure,
		svc.GetNetworkWardensList,
		connect.WithSchema(networkWardenServiceGetNetworkWardensListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	networkWardenServiceRegisterNetworkWardenHandler := connect.NewUnaryHandler(
		NetworkWardenServiceRegisterNetworkWardenProcedure,
		svc.RegisterNetworkWarden,
		connect.WithSchema(networkWardenServiceRegisterNetworkWardenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/networkwarden.v1.NetworkWardenService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NetworkWardenServiceRegisterHolderProcedure:
			networkWardenServiceRegisterHolderHandler.ServeHTTP(w, r)
		case NetworkWardenServiceConfirmHolderRegistrationProcedure:
			networkWardenServiceConfirmHolderRegistrationHandler.ServeHTTP(w, r)
		case NetworkWardenServiceResendConfirmationCodeProcedure:
			networkWardenServiceResendConfirmationCodeHandler.ServeHTTP(w, r)
		case NetworkWardenServiceLoginHolderProcedure:
			networkWardenServiceLoginHolderHandler.ServeHTTP(w, r)
		case NetworkWardenServiceLogoutHolderProcedure:
			networkWardenServiceLogoutHolderHandler.ServeHTTP(w, r)
		case NetworkWardenServiceRefreshHolderTokenProcedure:
			networkWardenServiceRefreshHolderTokenHandler.ServeHTTP(w, r)
		case NetworkWardenServiceChangeHolderPasswordProcedure:
			networkWardenServiceChangeHolderPasswordHandler.ServeHTTP(w, r)
		case NetworkWardenServiceModifyHolderProcedure:
			networkWardenServiceModifyHolderHandler.ServeHTTP(w, r)
		case NetworkWardenServiceGetHolderProcedure:
			networkWardenServiceGetHolderHandler.ServeHTTP(w, r)
		case NetworkWardenServiceDeleteHolderProcedure:
			networkWardenServiceDeleteHolderHandler.ServeHTTP(w, r)
		case NetworkWardenServiceGetPersonalDataNodesListProcedure:
			networkWardenServiceGetPersonalDataNodesListHandler.ServeHTTP(w, r)
		case NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistProcedure:
			networkWardenServiceJoinPersonalDataNodeRegistrationWaitlistHandler.ServeHTTP(w, r)
		case NetworkWardenServiceRegisterPersonalDataNodeProcedure:
			networkWardenServiceRegisterPersonalDataNodeHandler.ServeHTTP(w, r)
		case NetworkWardenServiceGetNetworkNodesListProcedure:
			networkWardenServiceGetNetworkNodesListHandler.ServeHTTP(w, r)
		case NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistProcedure:
			networkWardenServiceJoinNetworkNodeRegistrationWaitlistHandler.ServeHTTP(w, r)
		case NetworkWardenServiceRegisterNetworkNodeProcedure:
			networkWardenServiceRegisterNetworkNodeHandler.ServeHTTP(w, r)
		case NetworkWardenServiceGetNetworkWardensListProcedure:
			networkWardenServiceGetNetworkWardensListHandler.ServeHTTP(w, r)
		case NetworkWardenServiceRegisterNetworkWardenProcedure:
			networkWardenServiceRegisterNetworkWardenHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNetworkWardenServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNetworkWardenServiceHandler struct{}

func (UnimplementedNetworkWardenServiceHandler) RegisterHolder(context.Context, *connect.Request[v1.RegisterHolderRequest]) (*connect.Response[v1.RegisterHolderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("networkwarden.v1.NetworkWardenService.RegisterHolder is not implemented"))
}

func (UnimplementedNetworkWardenServiceHandler) ConfirmHolderRegistration(context.Context, *connect.Request[v1.ConfirmHolderRegistrationRequest]) (*connect.Response[v1.ConfirmHolderRegistrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("networkwarden.v1.NetworkWardenService.ConfirmHolderRegistration is not implemented"))
}

func (UnimplementedNetworkWardenServiceHandler) ResendConfirmationCode(context.Context, *connect.Request[v1.ResendConfirmationCodeRequest]) (*connect.Response[v1.ResendConfirmationCodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("networkwarden.v1.NetworkWardenService.ResendConfirmationCode is not implemented"))
}

func (UnimplementedNetworkWardenServiceHandler) LoginHolder(context.Context, *connect.Request[v1.LoginHolderRequest]) (*connect.Response[v1.LoginHolderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("networkwarden.v1.NetworkWardenService.LoginHolder is not implemented"))
}

func (UnimplementedNetworkWardenServiceHandler) LogoutHolder(context.Context, *connect.Request[v1.LogoutHolderRequest]) (*connect.Response[v1.LogoutHolderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("networkwarden.v1.NetworkWardenService.LogoutHolder is not implemented"))
}

func (UnimplementedNetworkWardenServiceHandler) RefreshHolderToken(context.Context, *connect.Request[v1.RefreshHolderTokenRequest]) (*connect.Response[v1.RefreshHolderTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("networkwarden.v1.NetworkWardenService.RefreshHolderToken is not implemented"))
}

func (UnimplementedNetworkWardenServiceHandler) ChangeHolderPassword(context.Context, *connect.Request[v1.ChangeHolderPasswordRequest]) (*connect.Response[v1.ChangeHolderPasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("networkwarden.v1.NetworkWardenService.ChangeHolderPassword is not implemented"))
}

func (UnimplementedNetworkWardenServiceHandler) ModifyHolder(context.Context, *connect.Request[v1.ModifyHolderRequest]) (*connect.Response[v1.ModifyHolderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("networkwarden.v1.NetworkWardenService.ModifyHolder is not implemented"))
}

func (UnimplementedNetworkWardenServiceHandler) GetHolder(context.Context, *connect.Request[v1.GetHolderRequest]) (*connect.Response[v1.GetHolderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("networkwarden.v1.NetworkWardenService.GetHolder is not implemented"))
}

func (UnimplementedNetworkWardenServiceHandler) DeleteHolder(context.Context, *connect.Request[v1.DeleteHolderRequest]) (*connect.Response[v1.DeleteHolderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("networkwarden.v1.NetworkWardenService.DeleteHolder is not implemented"))
}

func (UnimplementedNetworkWardenServiceHandler) GetPersonalDataNodesList(context.Context, *connect.Request[v1.GetPersonalDataNodesListRequest]) (*connect.Response[v1.GetPersonalDataNodesListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("networkwarden.v1.NetworkWardenService.GetPersonalDataNodesList is not implemented"))
}

func (UnimplementedNetworkWardenServiceHandler) JoinPersonalDataNodeRegistrationWaitlist(context.Context, *connect.Request[v1.JoinPersonalDataNodeRegistrationWaitlistRequest]) (*connect.Response[v1.JoinPersonalDataNodeRegistrationWaitlistResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("networkwarden.v1.NetworkWardenService.JoinPersonalDataNodeRegistrationWaitlist is not implemented"))
}

func (UnimplementedNetworkWardenServiceHandler) RegisterPersonalDataNode(context.Context, *connect.Request[v1.RegisterPersonalDataNodeRequest]) (*connect.Response[v1.RegisterPersonalDataNodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("networkwarden.v1.NetworkWardenService.RegisterPersonalDataNode is not implemented"))
}

func (UnimplementedNetworkWardenServiceHandler) GetNetworkNodesList(context.Context, *connect.Request[v1.GetNetworkNodesListRequest]) (*connect.Response[v1.GetNetworkNodesListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("networkwarden.v1.NetworkWardenService.GetNetworkNodesList is not implemented"))
}

func (UnimplementedNetworkWardenServiceHandler) JoinNetworkNodeRegistrationWaitlist(context.Context, *connect.Request[v1.JoinNetworkNodeRegistrationWaitlistRequest]) (*connect.Response[v1.JoinNetworkNodeRegistrationWaitlistResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("networkwarden.v1.NetworkWardenService.JoinNetworkNodeRegistrationWaitlist is not implemented"))
}

func (UnimplementedNetworkWardenServiceHandler) RegisterNetworkNode(context.Context, *connect.Request[v1.RegisterNetworkNodeRequest]) (*connect.Response[v1.RegisterNetworkNodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("networkwarden.v1.NetworkWardenService.RegisterNetworkNode is not implemented"))
}

func (UnimplementedNetworkWardenServiceHandler) GetNetworkWardensList(context.Context, *connect.Request[v1.GetNetworkWardensListRequest]) (*connect.Response[v1.GetNetworkWardensListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("networkwarden.v1.NetworkWardenService.GetNetworkWardensList is not implemented"))
}

func (UnimplementedNetworkWardenServiceHandler) RegisterNetworkWarden(context.Context, *connect.Request[v1.RegisterNetworkWardenRequest]) (*connect.Response[v1.RegisterNetworkWardenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("networkwarden.v1.NetworkWardenService.RegisterNetworkWarden is not implemented"))
}
