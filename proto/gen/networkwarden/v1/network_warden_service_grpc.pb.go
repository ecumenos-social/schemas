// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: networkwarden/v1/network_warden_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NetworkWardenService_CheckEmails_FullMethodName                              = "/networkwarden.v1.NetworkWardenService/CheckEmails"
	NetworkWardenService_CheckPhoneNumbers_FullMethodName                        = "/networkwarden.v1.NetworkWardenService/CheckPhoneNumbers"
	NetworkWardenService_RegisterHolder_FullMethodName                           = "/networkwarden.v1.NetworkWardenService/RegisterHolder"
	NetworkWardenService_ConfirmHolderRegistration_FullMethodName                = "/networkwarden.v1.NetworkWardenService/ConfirmHolderRegistration"
	NetworkWardenService_ResendConfirmationCode_FullMethodName                   = "/networkwarden.v1.NetworkWardenService/ResendConfirmationCode"
	NetworkWardenService_LoginHolder_FullMethodName                              = "/networkwarden.v1.NetworkWardenService/LoginHolder"
	NetworkWardenService_LogoutHolder_FullMethodName                             = "/networkwarden.v1.NetworkWardenService/LogoutHolder"
	NetworkWardenService_RefreshHolderToken_FullMethodName                       = "/networkwarden.v1.NetworkWardenService/RefreshHolderToken"
	NetworkWardenService_ChangeHolderPassword_FullMethodName                     = "/networkwarden.v1.NetworkWardenService/ChangeHolderPassword"
	NetworkWardenService_ModifyHolder_FullMethodName                             = "/networkwarden.v1.NetworkWardenService/ModifyHolder"
	NetworkWardenService_GetHolder_FullMethodName                                = "/networkwarden.v1.NetworkWardenService/GetHolder"
	NetworkWardenService_DeleteHolder_FullMethodName                             = "/networkwarden.v1.NetworkWardenService/DeleteHolder"
	NetworkWardenService_GetPersonalDataNodesList_FullMethodName                 = "/networkwarden.v1.NetworkWardenService/GetPersonalDataNodesList"
	NetworkWardenService_JoinPersonalDataNodeRegistrationWaitlist_FullMethodName = "/networkwarden.v1.NetworkWardenService/JoinPersonalDataNodeRegistrationWaitlist"
	NetworkWardenService_ActivatePersonalDataNode_FullMethodName                 = "/networkwarden.v1.NetworkWardenService/ActivatePersonalDataNode"
	NetworkWardenService_InitiatePersonalDataNode_FullMethodName                 = "/networkwarden.v1.NetworkWardenService/InitiatePersonalDataNode"
	NetworkWardenService_GetNetworkNodesList_FullMethodName                      = "/networkwarden.v1.NetworkWardenService/GetNetworkNodesList"
	NetworkWardenService_JoinNetworkNodeRegistrationWaitlist_FullMethodName      = "/networkwarden.v1.NetworkWardenService/JoinNetworkNodeRegistrationWaitlist"
	NetworkWardenService_ActivateNetworkNode_FullMethodName                      = "/networkwarden.v1.NetworkWardenService/ActivateNetworkNode"
	NetworkWardenService_InitiateNetworkNode_FullMethodName                      = "/networkwarden.v1.NetworkWardenService/InitiateNetworkNode"
	NetworkWardenService_GetNetworkWardensList_FullMethodName                    = "/networkwarden.v1.NetworkWardenService/GetNetworkWardensList"
	NetworkWardenService_RegisterNetworkWarden_FullMethodName                    = "/networkwarden.v1.NetworkWardenService/RegisterNetworkWarden"
)

// NetworkWardenServiceClient is the client API for NetworkWardenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkWardenServiceClient interface {
	CheckEmails(ctx context.Context, in *NetworkWardenServiceCheckEmailsRequest, opts ...grpc.CallOption) (*NetworkWardenServiceCheckEmailsResponse, error)
	CheckPhoneNumbers(ctx context.Context, in *NetworkWardenServiceCheckPhoneNumbersRequest, opts ...grpc.CallOption) (*NetworkWardenServiceCheckPhoneNumbersResponse, error)
	RegisterHolder(ctx context.Context, in *NetworkWardenServiceRegisterHolderRequest, opts ...grpc.CallOption) (*NetworkWardenServiceRegisterHolderResponse, error)
	ConfirmHolderRegistration(ctx context.Context, in *NetworkWardenServiceConfirmHolderRegistrationRequest, opts ...grpc.CallOption) (*NetworkWardenServiceConfirmHolderRegistrationResponse, error)
	ResendConfirmationCode(ctx context.Context, in *NetworkWardenServiceResendConfirmationCodeRequest, opts ...grpc.CallOption) (*NetworkWardenServiceResendConfirmationCodeResponse, error)
	LoginHolder(ctx context.Context, in *NetworkWardenServiceLoginHolderRequest, opts ...grpc.CallOption) (*NetworkWardenServiceLoginHolderResponse, error)
	LogoutHolder(ctx context.Context, in *NetworkWardenServiceLogoutHolderRequest, opts ...grpc.CallOption) (*NetworkWardenServiceLogoutHolderResponse, error)
	RefreshHolderToken(ctx context.Context, in *NetworkWardenServiceRefreshHolderTokenRequest, opts ...grpc.CallOption) (*NetworkWardenServiceRefreshHolderTokenResponse, error)
	ChangeHolderPassword(ctx context.Context, in *NetworkWardenServiceChangeHolderPasswordRequest, opts ...grpc.CallOption) (*NetworkWardenServiceChangeHolderPasswordResponse, error)
	ModifyHolder(ctx context.Context, in *NetworkWardenServiceModifyHolderRequest, opts ...grpc.CallOption) (*NetworkWardenServiceModifyHolderResponse, error)
	GetHolder(ctx context.Context, in *NetworkWardenServiceGetHolderRequest, opts ...grpc.CallOption) (*NetworkWardenServiceGetHolderResponse, error)
	DeleteHolder(ctx context.Context, in *NetworkWardenServiceDeleteHolderRequest, opts ...grpc.CallOption) (*NetworkWardenServiceDeleteHolderResponse, error)
	GetPersonalDataNodesList(ctx context.Context, in *NetworkWardenServiceGetPersonalDataNodesListRequest, opts ...grpc.CallOption) (*NetworkWardenServiceGetPersonalDataNodesListResponse, error)
	JoinPersonalDataNodeRegistrationWaitlist(ctx context.Context, in *NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequest, opts ...grpc.CallOption) (*NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponse, error)
	ActivatePersonalDataNode(ctx context.Context, in *NetworkWardenServiceActivatePersonalDataNodeRequest, opts ...grpc.CallOption) (*NetworkWardenServiceActivatePersonalDataNodeResponse, error)
	InitiatePersonalDataNode(ctx context.Context, in *NetworkWardenServiceInitiatePersonalDataNodeRequest, opts ...grpc.CallOption) (*NetworkWardenServiceInitiatePersonalDataNodeResponse, error)
	GetNetworkNodesList(ctx context.Context, in *NetworkWardenServiceGetNetworkNodesListRequest, opts ...grpc.CallOption) (*NetworkWardenServiceGetNetworkNodesListResponse, error)
	JoinNetworkNodeRegistrationWaitlist(ctx context.Context, in *NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequest, opts ...grpc.CallOption) (*NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponse, error)
	ActivateNetworkNode(ctx context.Context, in *NetworkWardenServiceActivateNetworkNodeRequest, opts ...grpc.CallOption) (*NetworkWardenServiceActivateNetworkNodeResponse, error)
	InitiateNetworkNode(ctx context.Context, in *NetworkWardenServiceInitiateNetworkNodeRequest, opts ...grpc.CallOption) (*NetworkWardenServiceInitiateNetworkNodeResponse, error)
	GetNetworkWardensList(ctx context.Context, in *NetworkWardenServiceGetNetworkWardensListRequest, opts ...grpc.CallOption) (*NetworkWardenServiceGetNetworkWardensListResponse, error)
	RegisterNetworkWarden(ctx context.Context, in *NetworkWardenServiceRegisterNetworkWardenRequest, opts ...grpc.CallOption) (*NetworkWardenServiceRegisterNetworkWardenResponse, error)
}

type networkWardenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkWardenServiceClient(cc grpc.ClientConnInterface) NetworkWardenServiceClient {
	return &networkWardenServiceClient{cc}
}

func (c *networkWardenServiceClient) CheckEmails(ctx context.Context, in *NetworkWardenServiceCheckEmailsRequest, opts ...grpc.CallOption) (*NetworkWardenServiceCheckEmailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkWardenServiceCheckEmailsResponse)
	err := c.cc.Invoke(ctx, NetworkWardenService_CheckEmails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkWardenServiceClient) CheckPhoneNumbers(ctx context.Context, in *NetworkWardenServiceCheckPhoneNumbersRequest, opts ...grpc.CallOption) (*NetworkWardenServiceCheckPhoneNumbersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkWardenServiceCheckPhoneNumbersResponse)
	err := c.cc.Invoke(ctx, NetworkWardenService_CheckPhoneNumbers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkWardenServiceClient) RegisterHolder(ctx context.Context, in *NetworkWardenServiceRegisterHolderRequest, opts ...grpc.CallOption) (*NetworkWardenServiceRegisterHolderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkWardenServiceRegisterHolderResponse)
	err := c.cc.Invoke(ctx, NetworkWardenService_RegisterHolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkWardenServiceClient) ConfirmHolderRegistration(ctx context.Context, in *NetworkWardenServiceConfirmHolderRegistrationRequest, opts ...grpc.CallOption) (*NetworkWardenServiceConfirmHolderRegistrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkWardenServiceConfirmHolderRegistrationResponse)
	err := c.cc.Invoke(ctx, NetworkWardenService_ConfirmHolderRegistration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkWardenServiceClient) ResendConfirmationCode(ctx context.Context, in *NetworkWardenServiceResendConfirmationCodeRequest, opts ...grpc.CallOption) (*NetworkWardenServiceResendConfirmationCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkWardenServiceResendConfirmationCodeResponse)
	err := c.cc.Invoke(ctx, NetworkWardenService_ResendConfirmationCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkWardenServiceClient) LoginHolder(ctx context.Context, in *NetworkWardenServiceLoginHolderRequest, opts ...grpc.CallOption) (*NetworkWardenServiceLoginHolderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkWardenServiceLoginHolderResponse)
	err := c.cc.Invoke(ctx, NetworkWardenService_LoginHolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkWardenServiceClient) LogoutHolder(ctx context.Context, in *NetworkWardenServiceLogoutHolderRequest, opts ...grpc.CallOption) (*NetworkWardenServiceLogoutHolderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkWardenServiceLogoutHolderResponse)
	err := c.cc.Invoke(ctx, NetworkWardenService_LogoutHolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkWardenServiceClient) RefreshHolderToken(ctx context.Context, in *NetworkWardenServiceRefreshHolderTokenRequest, opts ...grpc.CallOption) (*NetworkWardenServiceRefreshHolderTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkWardenServiceRefreshHolderTokenResponse)
	err := c.cc.Invoke(ctx, NetworkWardenService_RefreshHolderToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkWardenServiceClient) ChangeHolderPassword(ctx context.Context, in *NetworkWardenServiceChangeHolderPasswordRequest, opts ...grpc.CallOption) (*NetworkWardenServiceChangeHolderPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkWardenServiceChangeHolderPasswordResponse)
	err := c.cc.Invoke(ctx, NetworkWardenService_ChangeHolderPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkWardenServiceClient) ModifyHolder(ctx context.Context, in *NetworkWardenServiceModifyHolderRequest, opts ...grpc.CallOption) (*NetworkWardenServiceModifyHolderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkWardenServiceModifyHolderResponse)
	err := c.cc.Invoke(ctx, NetworkWardenService_ModifyHolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkWardenServiceClient) GetHolder(ctx context.Context, in *NetworkWardenServiceGetHolderRequest, opts ...grpc.CallOption) (*NetworkWardenServiceGetHolderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkWardenServiceGetHolderResponse)
	err := c.cc.Invoke(ctx, NetworkWardenService_GetHolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkWardenServiceClient) DeleteHolder(ctx context.Context, in *NetworkWardenServiceDeleteHolderRequest, opts ...grpc.CallOption) (*NetworkWardenServiceDeleteHolderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkWardenServiceDeleteHolderResponse)
	err := c.cc.Invoke(ctx, NetworkWardenService_DeleteHolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkWardenServiceClient) GetPersonalDataNodesList(ctx context.Context, in *NetworkWardenServiceGetPersonalDataNodesListRequest, opts ...grpc.CallOption) (*NetworkWardenServiceGetPersonalDataNodesListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkWardenServiceGetPersonalDataNodesListResponse)
	err := c.cc.Invoke(ctx, NetworkWardenService_GetPersonalDataNodesList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkWardenServiceClient) JoinPersonalDataNodeRegistrationWaitlist(ctx context.Context, in *NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequest, opts ...grpc.CallOption) (*NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponse)
	err := c.cc.Invoke(ctx, NetworkWardenService_JoinPersonalDataNodeRegistrationWaitlist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkWardenServiceClient) ActivatePersonalDataNode(ctx context.Context, in *NetworkWardenServiceActivatePersonalDataNodeRequest, opts ...grpc.CallOption) (*NetworkWardenServiceActivatePersonalDataNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkWardenServiceActivatePersonalDataNodeResponse)
	err := c.cc.Invoke(ctx, NetworkWardenService_ActivatePersonalDataNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkWardenServiceClient) InitiatePersonalDataNode(ctx context.Context, in *NetworkWardenServiceInitiatePersonalDataNodeRequest, opts ...grpc.CallOption) (*NetworkWardenServiceInitiatePersonalDataNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkWardenServiceInitiatePersonalDataNodeResponse)
	err := c.cc.Invoke(ctx, NetworkWardenService_InitiatePersonalDataNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkWardenServiceClient) GetNetworkNodesList(ctx context.Context, in *NetworkWardenServiceGetNetworkNodesListRequest, opts ...grpc.CallOption) (*NetworkWardenServiceGetNetworkNodesListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkWardenServiceGetNetworkNodesListResponse)
	err := c.cc.Invoke(ctx, NetworkWardenService_GetNetworkNodesList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkWardenServiceClient) JoinNetworkNodeRegistrationWaitlist(ctx context.Context, in *NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequest, opts ...grpc.CallOption) (*NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponse)
	err := c.cc.Invoke(ctx, NetworkWardenService_JoinNetworkNodeRegistrationWaitlist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkWardenServiceClient) ActivateNetworkNode(ctx context.Context, in *NetworkWardenServiceActivateNetworkNodeRequest, opts ...grpc.CallOption) (*NetworkWardenServiceActivateNetworkNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkWardenServiceActivateNetworkNodeResponse)
	err := c.cc.Invoke(ctx, NetworkWardenService_ActivateNetworkNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkWardenServiceClient) InitiateNetworkNode(ctx context.Context, in *NetworkWardenServiceInitiateNetworkNodeRequest, opts ...grpc.CallOption) (*NetworkWardenServiceInitiateNetworkNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkWardenServiceInitiateNetworkNodeResponse)
	err := c.cc.Invoke(ctx, NetworkWardenService_InitiateNetworkNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkWardenServiceClient) GetNetworkWardensList(ctx context.Context, in *NetworkWardenServiceGetNetworkWardensListRequest, opts ...grpc.CallOption) (*NetworkWardenServiceGetNetworkWardensListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkWardenServiceGetNetworkWardensListResponse)
	err := c.cc.Invoke(ctx, NetworkWardenService_GetNetworkWardensList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkWardenServiceClient) RegisterNetworkWarden(ctx context.Context, in *NetworkWardenServiceRegisterNetworkWardenRequest, opts ...grpc.CallOption) (*NetworkWardenServiceRegisterNetworkWardenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkWardenServiceRegisterNetworkWardenResponse)
	err := c.cc.Invoke(ctx, NetworkWardenService_RegisterNetworkWarden_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkWardenServiceServer is the server API for NetworkWardenService service.
// All implementations must embed UnimplementedNetworkWardenServiceServer
// for forward compatibility.
type NetworkWardenServiceServer interface {
	CheckEmails(context.Context, *NetworkWardenServiceCheckEmailsRequest) (*NetworkWardenServiceCheckEmailsResponse, error)
	CheckPhoneNumbers(context.Context, *NetworkWardenServiceCheckPhoneNumbersRequest) (*NetworkWardenServiceCheckPhoneNumbersResponse, error)
	RegisterHolder(context.Context, *NetworkWardenServiceRegisterHolderRequest) (*NetworkWardenServiceRegisterHolderResponse, error)
	ConfirmHolderRegistration(context.Context, *NetworkWardenServiceConfirmHolderRegistrationRequest) (*NetworkWardenServiceConfirmHolderRegistrationResponse, error)
	ResendConfirmationCode(context.Context, *NetworkWardenServiceResendConfirmationCodeRequest) (*NetworkWardenServiceResendConfirmationCodeResponse, error)
	LoginHolder(context.Context, *NetworkWardenServiceLoginHolderRequest) (*NetworkWardenServiceLoginHolderResponse, error)
	LogoutHolder(context.Context, *NetworkWardenServiceLogoutHolderRequest) (*NetworkWardenServiceLogoutHolderResponse, error)
	RefreshHolderToken(context.Context, *NetworkWardenServiceRefreshHolderTokenRequest) (*NetworkWardenServiceRefreshHolderTokenResponse, error)
	ChangeHolderPassword(context.Context, *NetworkWardenServiceChangeHolderPasswordRequest) (*NetworkWardenServiceChangeHolderPasswordResponse, error)
	ModifyHolder(context.Context, *NetworkWardenServiceModifyHolderRequest) (*NetworkWardenServiceModifyHolderResponse, error)
	GetHolder(context.Context, *NetworkWardenServiceGetHolderRequest) (*NetworkWardenServiceGetHolderResponse, error)
	DeleteHolder(context.Context, *NetworkWardenServiceDeleteHolderRequest) (*NetworkWardenServiceDeleteHolderResponse, error)
	GetPersonalDataNodesList(context.Context, *NetworkWardenServiceGetPersonalDataNodesListRequest) (*NetworkWardenServiceGetPersonalDataNodesListResponse, error)
	JoinPersonalDataNodeRegistrationWaitlist(context.Context, *NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequest) (*NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponse, error)
	ActivatePersonalDataNode(context.Context, *NetworkWardenServiceActivatePersonalDataNodeRequest) (*NetworkWardenServiceActivatePersonalDataNodeResponse, error)
	InitiatePersonalDataNode(context.Context, *NetworkWardenServiceInitiatePersonalDataNodeRequest) (*NetworkWardenServiceInitiatePersonalDataNodeResponse, error)
	GetNetworkNodesList(context.Context, *NetworkWardenServiceGetNetworkNodesListRequest) (*NetworkWardenServiceGetNetworkNodesListResponse, error)
	JoinNetworkNodeRegistrationWaitlist(context.Context, *NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequest) (*NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponse, error)
	ActivateNetworkNode(context.Context, *NetworkWardenServiceActivateNetworkNodeRequest) (*NetworkWardenServiceActivateNetworkNodeResponse, error)
	InitiateNetworkNode(context.Context, *NetworkWardenServiceInitiateNetworkNodeRequest) (*NetworkWardenServiceInitiateNetworkNodeResponse, error)
	GetNetworkWardensList(context.Context, *NetworkWardenServiceGetNetworkWardensListRequest) (*NetworkWardenServiceGetNetworkWardensListResponse, error)
	RegisterNetworkWarden(context.Context, *NetworkWardenServiceRegisterNetworkWardenRequest) (*NetworkWardenServiceRegisterNetworkWardenResponse, error)
	mustEmbedUnimplementedNetworkWardenServiceServer()
}

// UnimplementedNetworkWardenServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNetworkWardenServiceServer struct{}

func (UnimplementedNetworkWardenServiceServer) CheckEmails(context.Context, *NetworkWardenServiceCheckEmailsRequest) (*NetworkWardenServiceCheckEmailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEmails not implemented")
}
func (UnimplementedNetworkWardenServiceServer) CheckPhoneNumbers(context.Context, *NetworkWardenServiceCheckPhoneNumbersRequest) (*NetworkWardenServiceCheckPhoneNumbersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPhoneNumbers not implemented")
}
func (UnimplementedNetworkWardenServiceServer) RegisterHolder(context.Context, *NetworkWardenServiceRegisterHolderRequest) (*NetworkWardenServiceRegisterHolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterHolder not implemented")
}
func (UnimplementedNetworkWardenServiceServer) ConfirmHolderRegistration(context.Context, *NetworkWardenServiceConfirmHolderRegistrationRequest) (*NetworkWardenServiceConfirmHolderRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmHolderRegistration not implemented")
}
func (UnimplementedNetworkWardenServiceServer) ResendConfirmationCode(context.Context, *NetworkWardenServiceResendConfirmationCodeRequest) (*NetworkWardenServiceResendConfirmationCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendConfirmationCode not implemented")
}
func (UnimplementedNetworkWardenServiceServer) LoginHolder(context.Context, *NetworkWardenServiceLoginHolderRequest) (*NetworkWardenServiceLoginHolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginHolder not implemented")
}
func (UnimplementedNetworkWardenServiceServer) LogoutHolder(context.Context, *NetworkWardenServiceLogoutHolderRequest) (*NetworkWardenServiceLogoutHolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogoutHolder not implemented")
}
func (UnimplementedNetworkWardenServiceServer) RefreshHolderToken(context.Context, *NetworkWardenServiceRefreshHolderTokenRequest) (*NetworkWardenServiceRefreshHolderTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshHolderToken not implemented")
}
func (UnimplementedNetworkWardenServiceServer) ChangeHolderPassword(context.Context, *NetworkWardenServiceChangeHolderPasswordRequest) (*NetworkWardenServiceChangeHolderPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeHolderPassword not implemented")
}
func (UnimplementedNetworkWardenServiceServer) ModifyHolder(context.Context, *NetworkWardenServiceModifyHolderRequest) (*NetworkWardenServiceModifyHolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyHolder not implemented")
}
func (UnimplementedNetworkWardenServiceServer) GetHolder(context.Context, *NetworkWardenServiceGetHolderRequest) (*NetworkWardenServiceGetHolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHolder not implemented")
}
func (UnimplementedNetworkWardenServiceServer) DeleteHolder(context.Context, *NetworkWardenServiceDeleteHolderRequest) (*NetworkWardenServiceDeleteHolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHolder not implemented")
}
func (UnimplementedNetworkWardenServiceServer) GetPersonalDataNodesList(context.Context, *NetworkWardenServiceGetPersonalDataNodesListRequest) (*NetworkWardenServiceGetPersonalDataNodesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonalDataNodesList not implemented")
}
func (UnimplementedNetworkWardenServiceServer) JoinPersonalDataNodeRegistrationWaitlist(context.Context, *NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequest) (*NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinPersonalDataNodeRegistrationWaitlist not implemented")
}
func (UnimplementedNetworkWardenServiceServer) ActivatePersonalDataNode(context.Context, *NetworkWardenServiceActivatePersonalDataNodeRequest) (*NetworkWardenServiceActivatePersonalDataNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivatePersonalDataNode not implemented")
}
func (UnimplementedNetworkWardenServiceServer) InitiatePersonalDataNode(context.Context, *NetworkWardenServiceInitiatePersonalDataNodeRequest) (*NetworkWardenServiceInitiatePersonalDataNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiatePersonalDataNode not implemented")
}
func (UnimplementedNetworkWardenServiceServer) GetNetworkNodesList(context.Context, *NetworkWardenServiceGetNetworkNodesListRequest) (*NetworkWardenServiceGetNetworkNodesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkNodesList not implemented")
}
func (UnimplementedNetworkWardenServiceServer) JoinNetworkNodeRegistrationWaitlist(context.Context, *NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequest) (*NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinNetworkNodeRegistrationWaitlist not implemented")
}
func (UnimplementedNetworkWardenServiceServer) ActivateNetworkNode(context.Context, *NetworkWardenServiceActivateNetworkNodeRequest) (*NetworkWardenServiceActivateNetworkNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateNetworkNode not implemented")
}
func (UnimplementedNetworkWardenServiceServer) InitiateNetworkNode(context.Context, *NetworkWardenServiceInitiateNetworkNodeRequest) (*NetworkWardenServiceInitiateNetworkNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateNetworkNode not implemented")
}
func (UnimplementedNetworkWardenServiceServer) GetNetworkWardensList(context.Context, *NetworkWardenServiceGetNetworkWardensListRequest) (*NetworkWardenServiceGetNetworkWardensListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkWardensList not implemented")
}
func (UnimplementedNetworkWardenServiceServer) RegisterNetworkWarden(context.Context, *NetworkWardenServiceRegisterNetworkWardenRequest) (*NetworkWardenServiceRegisterNetworkWardenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNetworkWarden not implemented")
}
func (UnimplementedNetworkWardenServiceServer) mustEmbedUnimplementedNetworkWardenServiceServer() {}
func (UnimplementedNetworkWardenServiceServer) testEmbeddedByValue()                              {}

// UnsafeNetworkWardenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkWardenServiceServer will
// result in compilation errors.
type UnsafeNetworkWardenServiceServer interface {
	mustEmbedUnimplementedNetworkWardenServiceServer()
}

func RegisterNetworkWardenServiceServer(s grpc.ServiceRegistrar, srv NetworkWardenServiceServer) {
	// If the following call pancis, it indicates UnimplementedNetworkWardenServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NetworkWardenService_ServiceDesc, srv)
}

func _NetworkWardenService_CheckEmails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkWardenServiceCheckEmailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkWardenServiceServer).CheckEmails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkWardenService_CheckEmails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkWardenServiceServer).CheckEmails(ctx, req.(*NetworkWardenServiceCheckEmailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkWardenService_CheckPhoneNumbers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkWardenServiceCheckPhoneNumbersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkWardenServiceServer).CheckPhoneNumbers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkWardenService_CheckPhoneNumbers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkWardenServiceServer).CheckPhoneNumbers(ctx, req.(*NetworkWardenServiceCheckPhoneNumbersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkWardenService_RegisterHolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkWardenServiceRegisterHolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkWardenServiceServer).RegisterHolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkWardenService_RegisterHolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkWardenServiceServer).RegisterHolder(ctx, req.(*NetworkWardenServiceRegisterHolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkWardenService_ConfirmHolderRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkWardenServiceConfirmHolderRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkWardenServiceServer).ConfirmHolderRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkWardenService_ConfirmHolderRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkWardenServiceServer).ConfirmHolderRegistration(ctx, req.(*NetworkWardenServiceConfirmHolderRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkWardenService_ResendConfirmationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkWardenServiceResendConfirmationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkWardenServiceServer).ResendConfirmationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkWardenService_ResendConfirmationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkWardenServiceServer).ResendConfirmationCode(ctx, req.(*NetworkWardenServiceResendConfirmationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkWardenService_LoginHolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkWardenServiceLoginHolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkWardenServiceServer).LoginHolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkWardenService_LoginHolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkWardenServiceServer).LoginHolder(ctx, req.(*NetworkWardenServiceLoginHolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkWardenService_LogoutHolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkWardenServiceLogoutHolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkWardenServiceServer).LogoutHolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkWardenService_LogoutHolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkWardenServiceServer).LogoutHolder(ctx, req.(*NetworkWardenServiceLogoutHolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkWardenService_RefreshHolderToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkWardenServiceRefreshHolderTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkWardenServiceServer).RefreshHolderToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkWardenService_RefreshHolderToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkWardenServiceServer).RefreshHolderToken(ctx, req.(*NetworkWardenServiceRefreshHolderTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkWardenService_ChangeHolderPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkWardenServiceChangeHolderPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkWardenServiceServer).ChangeHolderPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkWardenService_ChangeHolderPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkWardenServiceServer).ChangeHolderPassword(ctx, req.(*NetworkWardenServiceChangeHolderPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkWardenService_ModifyHolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkWardenServiceModifyHolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkWardenServiceServer).ModifyHolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkWardenService_ModifyHolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkWardenServiceServer).ModifyHolder(ctx, req.(*NetworkWardenServiceModifyHolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkWardenService_GetHolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkWardenServiceGetHolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkWardenServiceServer).GetHolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkWardenService_GetHolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkWardenServiceServer).GetHolder(ctx, req.(*NetworkWardenServiceGetHolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkWardenService_DeleteHolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkWardenServiceDeleteHolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkWardenServiceServer).DeleteHolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkWardenService_DeleteHolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkWardenServiceServer).DeleteHolder(ctx, req.(*NetworkWardenServiceDeleteHolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkWardenService_GetPersonalDataNodesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkWardenServiceGetPersonalDataNodesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkWardenServiceServer).GetPersonalDataNodesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkWardenService_GetPersonalDataNodesList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkWardenServiceServer).GetPersonalDataNodesList(ctx, req.(*NetworkWardenServiceGetPersonalDataNodesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkWardenService_JoinPersonalDataNodeRegistrationWaitlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkWardenServiceServer).JoinPersonalDataNodeRegistrationWaitlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkWardenService_JoinPersonalDataNodeRegistrationWaitlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkWardenServiceServer).JoinPersonalDataNodeRegistrationWaitlist(ctx, req.(*NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkWardenService_ActivatePersonalDataNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkWardenServiceActivatePersonalDataNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkWardenServiceServer).ActivatePersonalDataNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkWardenService_ActivatePersonalDataNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkWardenServiceServer).ActivatePersonalDataNode(ctx, req.(*NetworkWardenServiceActivatePersonalDataNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkWardenService_InitiatePersonalDataNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkWardenServiceInitiatePersonalDataNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkWardenServiceServer).InitiatePersonalDataNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkWardenService_InitiatePersonalDataNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkWardenServiceServer).InitiatePersonalDataNode(ctx, req.(*NetworkWardenServiceInitiatePersonalDataNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkWardenService_GetNetworkNodesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkWardenServiceGetNetworkNodesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkWardenServiceServer).GetNetworkNodesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkWardenService_GetNetworkNodesList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkWardenServiceServer).GetNetworkNodesList(ctx, req.(*NetworkWardenServiceGetNetworkNodesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkWardenService_JoinNetworkNodeRegistrationWaitlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkWardenServiceServer).JoinNetworkNodeRegistrationWaitlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkWardenService_JoinNetworkNodeRegistrationWaitlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkWardenServiceServer).JoinNetworkNodeRegistrationWaitlist(ctx, req.(*NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkWardenService_ActivateNetworkNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkWardenServiceActivateNetworkNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkWardenServiceServer).ActivateNetworkNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkWardenService_ActivateNetworkNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkWardenServiceServer).ActivateNetworkNode(ctx, req.(*NetworkWardenServiceActivateNetworkNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkWardenService_InitiateNetworkNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkWardenServiceInitiateNetworkNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkWardenServiceServer).InitiateNetworkNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkWardenService_InitiateNetworkNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkWardenServiceServer).InitiateNetworkNode(ctx, req.(*NetworkWardenServiceInitiateNetworkNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkWardenService_GetNetworkWardensList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkWardenServiceGetNetworkWardensListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkWardenServiceServer).GetNetworkWardensList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkWardenService_GetNetworkWardensList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkWardenServiceServer).GetNetworkWardensList(ctx, req.(*NetworkWardenServiceGetNetworkWardensListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkWardenService_RegisterNetworkWarden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkWardenServiceRegisterNetworkWardenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkWardenServiceServer).RegisterNetworkWarden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkWardenService_RegisterNetworkWarden_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkWardenServiceServer).RegisterNetworkWarden(ctx, req.(*NetworkWardenServiceRegisterNetworkWardenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkWardenService_ServiceDesc is the grpc.ServiceDesc for NetworkWardenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkWardenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "networkwarden.v1.NetworkWardenService",
	HandlerType: (*NetworkWardenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckEmails",
			Handler:    _NetworkWardenService_CheckEmails_Handler,
		},
		{
			MethodName: "CheckPhoneNumbers",
			Handler:    _NetworkWardenService_CheckPhoneNumbers_Handler,
		},
		{
			MethodName: "RegisterHolder",
			Handler:    _NetworkWardenService_RegisterHolder_Handler,
		},
		{
			MethodName: "ConfirmHolderRegistration",
			Handler:    _NetworkWardenService_ConfirmHolderRegistration_Handler,
		},
		{
			MethodName: "ResendConfirmationCode",
			Handler:    _NetworkWardenService_ResendConfirmationCode_Handler,
		},
		{
			MethodName: "LoginHolder",
			Handler:    _NetworkWardenService_LoginHolder_Handler,
		},
		{
			MethodName: "LogoutHolder",
			Handler:    _NetworkWardenService_LogoutHolder_Handler,
		},
		{
			MethodName: "RefreshHolderToken",
			Handler:    _NetworkWardenService_RefreshHolderToken_Handler,
		},
		{
			MethodName: "ChangeHolderPassword",
			Handler:    _NetworkWardenService_ChangeHolderPassword_Handler,
		},
		{
			MethodName: "ModifyHolder",
			Handler:    _NetworkWardenService_ModifyHolder_Handler,
		},
		{
			MethodName: "GetHolder",
			Handler:    _NetworkWardenService_GetHolder_Handler,
		},
		{
			MethodName: "DeleteHolder",
			Handler:    _NetworkWardenService_DeleteHolder_Handler,
		},
		{
			MethodName: "GetPersonalDataNodesList",
			Handler:    _NetworkWardenService_GetPersonalDataNodesList_Handler,
		},
		{
			MethodName: "JoinPersonalDataNodeRegistrationWaitlist",
			Handler:    _NetworkWardenService_JoinPersonalDataNodeRegistrationWaitlist_Handler,
		},
		{
			MethodName: "ActivatePersonalDataNode",
			Handler:    _NetworkWardenService_ActivatePersonalDataNode_Handler,
		},
		{
			MethodName: "InitiatePersonalDataNode",
			Handler:    _NetworkWardenService_InitiatePersonalDataNode_Handler,
		},
		{
			MethodName: "GetNetworkNodesList",
			Handler:    _NetworkWardenService_GetNetworkNodesList_Handler,
		},
		{
			MethodName: "JoinNetworkNodeRegistrationWaitlist",
			Handler:    _NetworkWardenService_JoinNetworkNodeRegistrationWaitlist_Handler,
		},
		{
			MethodName: "ActivateNetworkNode",
			Handler:    _NetworkWardenService_ActivateNetworkNode_Handler,
		},
		{
			MethodName: "InitiateNetworkNode",
			Handler:    _NetworkWardenService_InitiateNetworkNode_Handler,
		},
		{
			MethodName: "GetNetworkWardensList",
			Handler:    _NetworkWardenService_GetNetworkWardensList_Handler,
		},
		{
			MethodName: "RegisterNetworkWarden",
			Handler:    _NetworkWardenService_RegisterNetworkWarden_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "networkwarden/v1/network_warden_service.proto",
}
