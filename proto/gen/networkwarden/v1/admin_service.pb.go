// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: networkwarden/v1/admin_service.proto

package v1

import (
	v1 "github.com/ecumenos-social/schemas/proto/gen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AdminServiceLoginAdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteMacAddress string `protobuf:"bytes,1,opt,name=remote_mac_address,json=remoteMacAddress,proto3" json:"remote_mac_address,omitempty"`
	Email            string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	PhoneNumber      string `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Password         string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *AdminServiceLoginAdminRequest) Reset() {
	*x = AdminServiceLoginAdminRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_admin_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminServiceLoginAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminServiceLoginAdminRequest) ProtoMessage() {}

func (x *AdminServiceLoginAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_admin_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminServiceLoginAdminRequest.ProtoReflect.Descriptor instead.
func (*AdminServiceLoginAdminRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_admin_service_proto_rawDescGZIP(), []int{0}
}

func (x *AdminServiceLoginAdminRequest) GetRemoteMacAddress() string {
	if x != nil {
		return x.RemoteMacAddress
	}
	return ""
}

func (x *AdminServiceLoginAdminRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *AdminServiceLoginAdminRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *AdminServiceLoginAdminRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type AdminServiceLoginAdminResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token        string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	RefreshToken string `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
}

func (x *AdminServiceLoginAdminResponse) Reset() {
	*x = AdminServiceLoginAdminResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_admin_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminServiceLoginAdminResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminServiceLoginAdminResponse) ProtoMessage() {}

func (x *AdminServiceLoginAdminResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_admin_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminServiceLoginAdminResponse.ProtoReflect.Descriptor instead.
func (*AdminServiceLoginAdminResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_admin_service_proto_rawDescGZIP(), []int{1}
}

func (x *AdminServiceLoginAdminResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AdminServiceLoginAdminResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type AdminServiceRefreshAdminTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteMacAddress string `protobuf:"bytes,1,opt,name=remote_mac_address,json=remoteMacAddress,proto3" json:"remote_mac_address,omitempty"`
	RefreshToken     string `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
}

func (x *AdminServiceRefreshAdminTokenRequest) Reset() {
	*x = AdminServiceRefreshAdminTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_admin_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminServiceRefreshAdminTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminServiceRefreshAdminTokenRequest) ProtoMessage() {}

func (x *AdminServiceRefreshAdminTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_admin_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminServiceRefreshAdminTokenRequest.ProtoReflect.Descriptor instead.
func (*AdminServiceRefreshAdminTokenRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_admin_service_proto_rawDescGZIP(), []int{2}
}

func (x *AdminServiceRefreshAdminTokenRequest) GetRemoteMacAddress() string {
	if x != nil {
		return x.RemoteMacAddress
	}
	return ""
}

func (x *AdminServiceRefreshAdminTokenRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type AdminServiceRefreshAdminTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token        string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	RefreshToken string `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
}

func (x *AdminServiceRefreshAdminTokenResponse) Reset() {
	*x = AdminServiceRefreshAdminTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_admin_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminServiceRefreshAdminTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminServiceRefreshAdminTokenResponse) ProtoMessage() {}

func (x *AdminServiceRefreshAdminTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_admin_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminServiceRefreshAdminTokenResponse.ProtoReflect.Descriptor instead.
func (*AdminServiceRefreshAdminTokenResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_admin_service_proto_rawDescGZIP(), []int{3}
}

func (x *AdminServiceRefreshAdminTokenResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AdminServiceRefreshAdminTokenResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type AdminServiceLogoutAdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteMacAddress string `protobuf:"bytes,1,opt,name=remote_mac_address,json=remoteMacAddress,proto3" json:"remote_mac_address,omitempty"`
	Token            string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *AdminServiceLogoutAdminRequest) Reset() {
	*x = AdminServiceLogoutAdminRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_admin_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminServiceLogoutAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminServiceLogoutAdminRequest) ProtoMessage() {}

func (x *AdminServiceLogoutAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_admin_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminServiceLogoutAdminRequest.ProtoReflect.Descriptor instead.
func (*AdminServiceLogoutAdminRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_admin_service_proto_rawDescGZIP(), []int{4}
}

func (x *AdminServiceLogoutAdminRequest) GetRemoteMacAddress() string {
	if x != nil {
		return x.RemoteMacAddress
	}
	return ""
}

func (x *AdminServiceLogoutAdminRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type AdminServiceLogoutAdminResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *AdminServiceLogoutAdminResponse) Reset() {
	*x = AdminServiceLogoutAdminResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_admin_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminServiceLogoutAdminResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminServiceLogoutAdminResponse) ProtoMessage() {}

func (x *AdminServiceLogoutAdminResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_admin_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminServiceLogoutAdminResponse.ProtoReflect.Descriptor instead.
func (*AdminServiceLogoutAdminResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_admin_service_proto_rawDescGZIP(), []int{5}
}

func (x *AdminServiceLogoutAdminResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type AdminServiceChangeAdminPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteMacAddress string `protobuf:"bytes,1,opt,name=remote_mac_address,json=remoteMacAddress,proto3" json:"remote_mac_address,omitempty"`
	Token            string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Password         string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	NewPassword      string `protobuf:"bytes,4,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"`
}

func (x *AdminServiceChangeAdminPasswordRequest) Reset() {
	*x = AdminServiceChangeAdminPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_admin_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminServiceChangeAdminPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminServiceChangeAdminPasswordRequest) ProtoMessage() {}

func (x *AdminServiceChangeAdminPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_admin_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminServiceChangeAdminPasswordRequest.ProtoReflect.Descriptor instead.
func (*AdminServiceChangeAdminPasswordRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_admin_service_proto_rawDescGZIP(), []int{6}
}

func (x *AdminServiceChangeAdminPasswordRequest) GetRemoteMacAddress() string {
	if x != nil {
		return x.RemoteMacAddress
	}
	return ""
}

func (x *AdminServiceChangeAdminPasswordRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AdminServiceChangeAdminPasswordRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AdminServiceChangeAdminPasswordRequest) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

type AdminServiceChangeAdminPasswordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *AdminServiceChangeAdminPasswordResponse) Reset() {
	*x = AdminServiceChangeAdminPasswordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_admin_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminServiceChangeAdminPasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminServiceChangeAdminPasswordResponse) ProtoMessage() {}

func (x *AdminServiceChangeAdminPasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_admin_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminServiceChangeAdminPasswordResponse.ProtoReflect.Descriptor instead.
func (*AdminServiceChangeAdminPasswordResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_admin_service_proto_rawDescGZIP(), []int{7}
}

func (x *AdminServiceChangeAdminPasswordResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type AdminServiceGetPersonalDataNodesListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteMacAddress string         `protobuf:"bytes,1,opt,name=remote_mac_address,json=remoteMacAddress,proto3" json:"remote_mac_address,omitempty"`
	Token            string         `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	OnlyMy           *bool          `protobuf:"varint,3,opt,name=only_my,json=onlyMy,proto3,oneof" json:"only_my,omitempty"`
	Pagination       *v1.Pagination `protobuf:"bytes,4,opt,name=pagination,proto3,oneof" json:"pagination,omitempty"`
}

func (x *AdminServiceGetPersonalDataNodesListRequest) Reset() {
	*x = AdminServiceGetPersonalDataNodesListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_admin_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminServiceGetPersonalDataNodesListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminServiceGetPersonalDataNodesListRequest) ProtoMessage() {}

func (x *AdminServiceGetPersonalDataNodesListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_admin_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminServiceGetPersonalDataNodesListRequest.ProtoReflect.Descriptor instead.
func (*AdminServiceGetPersonalDataNodesListRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_admin_service_proto_rawDescGZIP(), []int{8}
}

func (x *AdminServiceGetPersonalDataNodesListRequest) GetRemoteMacAddress() string {
	if x != nil {
		return x.RemoteMacAddress
	}
	return ""
}

func (x *AdminServiceGetPersonalDataNodesListRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AdminServiceGetPersonalDataNodesListRequest) GetOnlyMy() bool {
	if x != nil && x.OnlyMy != nil {
		return *x.OnlyMy
	}
	return false
}

func (x *AdminServiceGetPersonalDataNodesListRequest) GetPagination() *v1.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type AdminServiceGetPersonalDataNodesListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*PersonalDataNode `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *AdminServiceGetPersonalDataNodesListResponse) Reset() {
	*x = AdminServiceGetPersonalDataNodesListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_admin_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminServiceGetPersonalDataNodesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminServiceGetPersonalDataNodesListResponse) ProtoMessage() {}

func (x *AdminServiceGetPersonalDataNodesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_admin_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminServiceGetPersonalDataNodesListResponse.ProtoReflect.Descriptor instead.
func (*AdminServiceGetPersonalDataNodesListResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_admin_service_proto_rawDescGZIP(), []int{9}
}

func (x *AdminServiceGetPersonalDataNodesListResponse) GetData() []*PersonalDataNode {
	if x != nil {
		return x.Data
	}
	return nil
}

type AdminServiceGetPersonalDataNodeByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteMacAddress string `protobuf:"bytes,1,opt,name=remote_mac_address,json=remoteMacAddress,proto3" json:"remote_mac_address,omitempty"`
	Token            string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Id               string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AdminServiceGetPersonalDataNodeByIDRequest) Reset() {
	*x = AdminServiceGetPersonalDataNodeByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_admin_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminServiceGetPersonalDataNodeByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminServiceGetPersonalDataNodeByIDRequest) ProtoMessage() {}

func (x *AdminServiceGetPersonalDataNodeByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_admin_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminServiceGetPersonalDataNodeByIDRequest.ProtoReflect.Descriptor instead.
func (*AdminServiceGetPersonalDataNodeByIDRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_admin_service_proto_rawDescGZIP(), []int{10}
}

func (x *AdminServiceGetPersonalDataNodeByIDRequest) GetRemoteMacAddress() string {
	if x != nil {
		return x.RemoteMacAddress
	}
	return ""
}

func (x *AdminServiceGetPersonalDataNodeByIDRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AdminServiceGetPersonalDataNodeByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AdminServiceGetPersonalDataNodeByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *PersonalDataNode `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AdminServiceGetPersonalDataNodeByIDResponse) Reset() {
	*x = AdminServiceGetPersonalDataNodeByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_admin_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminServiceGetPersonalDataNodeByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminServiceGetPersonalDataNodeByIDResponse) ProtoMessage() {}

func (x *AdminServiceGetPersonalDataNodeByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_admin_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminServiceGetPersonalDataNodeByIDResponse.ProtoReflect.Descriptor instead.
func (*AdminServiceGetPersonalDataNodeByIDResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_admin_service_proto_rawDescGZIP(), []int{11}
}

func (x *AdminServiceGetPersonalDataNodeByIDResponse) GetData() *PersonalDataNode {
	if x != nil {
		return x.Data
	}
	return nil
}

type AdminServiceSetPersonalDataNodeStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteMacAddress string                  `protobuf:"bytes,1,opt,name=remote_mac_address,json=remoteMacAddress,proto3" json:"remote_mac_address,omitempty"`
	Token            string                  `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Id               string                  `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Status           PersonalDataNode_Status `protobuf:"varint,4,opt,name=status,proto3,enum=networkwarden.v1.PersonalDataNode_Status" json:"status,omitempty"`
}

func (x *AdminServiceSetPersonalDataNodeStatusRequest) Reset() {
	*x = AdminServiceSetPersonalDataNodeStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_admin_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminServiceSetPersonalDataNodeStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminServiceSetPersonalDataNodeStatusRequest) ProtoMessage() {}

func (x *AdminServiceSetPersonalDataNodeStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_admin_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminServiceSetPersonalDataNodeStatusRequest.ProtoReflect.Descriptor instead.
func (*AdminServiceSetPersonalDataNodeStatusRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_admin_service_proto_rawDescGZIP(), []int{12}
}

func (x *AdminServiceSetPersonalDataNodeStatusRequest) GetRemoteMacAddress() string {
	if x != nil {
		return x.RemoteMacAddress
	}
	return ""
}

func (x *AdminServiceSetPersonalDataNodeStatusRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AdminServiceSetPersonalDataNodeStatusRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AdminServiceSetPersonalDataNodeStatusRequest) GetStatus() PersonalDataNode_Status {
	if x != nil {
		return x.Status
	}
	return PersonalDataNode_STATUS_UNKNOWN_UNSPECIFIED
}

type AdminServiceSetPersonalDataNodeStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *AdminServiceSetPersonalDataNodeStatusResponse) Reset() {
	*x = AdminServiceSetPersonalDataNodeStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_admin_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminServiceSetPersonalDataNodeStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminServiceSetPersonalDataNodeStatusResponse) ProtoMessage() {}

func (x *AdminServiceSetPersonalDataNodeStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_admin_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminServiceSetPersonalDataNodeStatusResponse.ProtoReflect.Descriptor instead.
func (*AdminServiceSetPersonalDataNodeStatusResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_admin_service_proto_rawDescGZIP(), []int{13}
}

func (x *AdminServiceSetPersonalDataNodeStatusResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type AdminServiceGetNetworkNodesListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteMacAddress string         `protobuf:"bytes,1,opt,name=remote_mac_address,json=remoteMacAddress,proto3" json:"remote_mac_address,omitempty"`
	Token            string         `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	OnlyMy           *bool          `protobuf:"varint,3,opt,name=only_my,json=onlyMy,proto3,oneof" json:"only_my,omitempty"`
	Pagination       *v1.Pagination `protobuf:"bytes,4,opt,name=pagination,proto3,oneof" json:"pagination,omitempty"`
}

func (x *AdminServiceGetNetworkNodesListRequest) Reset() {
	*x = AdminServiceGetNetworkNodesListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_admin_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminServiceGetNetworkNodesListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminServiceGetNetworkNodesListRequest) ProtoMessage() {}

func (x *AdminServiceGetNetworkNodesListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_admin_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminServiceGetNetworkNodesListRequest.ProtoReflect.Descriptor instead.
func (*AdminServiceGetNetworkNodesListRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_admin_service_proto_rawDescGZIP(), []int{14}
}

func (x *AdminServiceGetNetworkNodesListRequest) GetRemoteMacAddress() string {
	if x != nil {
		return x.RemoteMacAddress
	}
	return ""
}

func (x *AdminServiceGetNetworkNodesListRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AdminServiceGetNetworkNodesListRequest) GetOnlyMy() bool {
	if x != nil && x.OnlyMy != nil {
		return *x.OnlyMy
	}
	return false
}

func (x *AdminServiceGetNetworkNodesListRequest) GetPagination() *v1.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type AdminServiceGetNetworkNodesListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*NetworkNode `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *AdminServiceGetNetworkNodesListResponse) Reset() {
	*x = AdminServiceGetNetworkNodesListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_admin_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminServiceGetNetworkNodesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminServiceGetNetworkNodesListResponse) ProtoMessage() {}

func (x *AdminServiceGetNetworkNodesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_admin_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminServiceGetNetworkNodesListResponse.ProtoReflect.Descriptor instead.
func (*AdminServiceGetNetworkNodesListResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_admin_service_proto_rawDescGZIP(), []int{15}
}

func (x *AdminServiceGetNetworkNodesListResponse) GetData() []*NetworkNode {
	if x != nil {
		return x.Data
	}
	return nil
}

type AdminServiceGetNetworkNodeByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteMacAddress string `protobuf:"bytes,1,opt,name=remote_mac_address,json=remoteMacAddress,proto3" json:"remote_mac_address,omitempty"`
	Token            string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Id               string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AdminServiceGetNetworkNodeByIDRequest) Reset() {
	*x = AdminServiceGetNetworkNodeByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_admin_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminServiceGetNetworkNodeByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminServiceGetNetworkNodeByIDRequest) ProtoMessage() {}

func (x *AdminServiceGetNetworkNodeByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_admin_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminServiceGetNetworkNodeByIDRequest.ProtoReflect.Descriptor instead.
func (*AdminServiceGetNetworkNodeByIDRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_admin_service_proto_rawDescGZIP(), []int{16}
}

func (x *AdminServiceGetNetworkNodeByIDRequest) GetRemoteMacAddress() string {
	if x != nil {
		return x.RemoteMacAddress
	}
	return ""
}

func (x *AdminServiceGetNetworkNodeByIDRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AdminServiceGetNetworkNodeByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AdminServiceGetNetworkNodeByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *NetworkNode `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AdminServiceGetNetworkNodeByIDResponse) Reset() {
	*x = AdminServiceGetNetworkNodeByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_admin_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminServiceGetNetworkNodeByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminServiceGetNetworkNodeByIDResponse) ProtoMessage() {}

func (x *AdminServiceGetNetworkNodeByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_admin_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminServiceGetNetworkNodeByIDResponse.ProtoReflect.Descriptor instead.
func (*AdminServiceGetNetworkNodeByIDResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_admin_service_proto_rawDescGZIP(), []int{17}
}

func (x *AdminServiceGetNetworkNodeByIDResponse) GetData() *NetworkNode {
	if x != nil {
		return x.Data
	}
	return nil
}

type AdminServiceSetNetworkNodeStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteMacAddress string             `protobuf:"bytes,1,opt,name=remote_mac_address,json=remoteMacAddress,proto3" json:"remote_mac_address,omitempty"`
	Token            string             `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Id               string             `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Status           NetworkNode_Status `protobuf:"varint,4,opt,name=status,proto3,enum=networkwarden.v1.NetworkNode_Status" json:"status,omitempty"`
}

func (x *AdminServiceSetNetworkNodeStatusRequest) Reset() {
	*x = AdminServiceSetNetworkNodeStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_admin_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminServiceSetNetworkNodeStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminServiceSetNetworkNodeStatusRequest) ProtoMessage() {}

func (x *AdminServiceSetNetworkNodeStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_admin_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminServiceSetNetworkNodeStatusRequest.ProtoReflect.Descriptor instead.
func (*AdminServiceSetNetworkNodeStatusRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_admin_service_proto_rawDescGZIP(), []int{18}
}

func (x *AdminServiceSetNetworkNodeStatusRequest) GetRemoteMacAddress() string {
	if x != nil {
		return x.RemoteMacAddress
	}
	return ""
}

func (x *AdminServiceSetNetworkNodeStatusRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AdminServiceSetNetworkNodeStatusRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AdminServiceSetNetworkNodeStatusRequest) GetStatus() NetworkNode_Status {
	if x != nil {
		return x.Status
	}
	return NetworkNode_STATUS_UNKNOWN_UNSPECIFIED
}

type AdminServiceSetNetworkNodeStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *AdminServiceSetNetworkNodeStatusResponse) Reset() {
	*x = AdminServiceSetNetworkNodeStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_admin_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminServiceSetNetworkNodeStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminServiceSetNetworkNodeStatusResponse) ProtoMessage() {}

func (x *AdminServiceSetNetworkNodeStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_admin_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminServiceSetNetworkNodeStatusResponse.ProtoReflect.Descriptor instead.
func (*AdminServiceSetNetworkNodeStatusResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_admin_service_proto_rawDescGZIP(), []int{19}
}

func (x *AdminServiceSetNetworkNodeStatusResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type AdminServiceGetNetworkWardensListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteMacAddress string         `protobuf:"bytes,1,opt,name=remote_mac_address,json=remoteMacAddress,proto3" json:"remote_mac_address,omitempty"`
	Token            string         `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Pagination       *v1.Pagination `protobuf:"bytes,3,opt,name=pagination,proto3,oneof" json:"pagination,omitempty"`
}

func (x *AdminServiceGetNetworkWardensListRequest) Reset() {
	*x = AdminServiceGetNetworkWardensListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_admin_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminServiceGetNetworkWardensListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminServiceGetNetworkWardensListRequest) ProtoMessage() {}

func (x *AdminServiceGetNetworkWardensListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_admin_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminServiceGetNetworkWardensListRequest.ProtoReflect.Descriptor instead.
func (*AdminServiceGetNetworkWardensListRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_admin_service_proto_rawDescGZIP(), []int{20}
}

func (x *AdminServiceGetNetworkWardensListRequest) GetRemoteMacAddress() string {
	if x != nil {
		return x.RemoteMacAddress
	}
	return ""
}

func (x *AdminServiceGetNetworkWardensListRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AdminServiceGetNetworkWardensListRequest) GetPagination() *v1.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type AdminServiceGetNetworkWardensListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*NetworkWarden `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *AdminServiceGetNetworkWardensListResponse) Reset() {
	*x = AdminServiceGetNetworkWardensListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_admin_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminServiceGetNetworkWardensListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminServiceGetNetworkWardensListResponse) ProtoMessage() {}

func (x *AdminServiceGetNetworkWardensListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_admin_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminServiceGetNetworkWardensListResponse.ProtoReflect.Descriptor instead.
func (*AdminServiceGetNetworkWardensListResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_admin_service_proto_rawDescGZIP(), []int{21}
}

func (x *AdminServiceGetNetworkWardensListResponse) GetData() []*NetworkWarden {
	if x != nil {
		return x.Data
	}
	return nil
}

type AdminServiceGetNetworkWardenByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteMacAddress string `protobuf:"bytes,1,opt,name=remote_mac_address,json=remoteMacAddress,proto3" json:"remote_mac_address,omitempty"`
	Token            string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Id               string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AdminServiceGetNetworkWardenByIDRequest) Reset() {
	*x = AdminServiceGetNetworkWardenByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_admin_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminServiceGetNetworkWardenByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminServiceGetNetworkWardenByIDRequest) ProtoMessage() {}

func (x *AdminServiceGetNetworkWardenByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_admin_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminServiceGetNetworkWardenByIDRequest.ProtoReflect.Descriptor instead.
func (*AdminServiceGetNetworkWardenByIDRequest) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_admin_service_proto_rawDescGZIP(), []int{22}
}

func (x *AdminServiceGetNetworkWardenByIDRequest) GetRemoteMacAddress() string {
	if x != nil {
		return x.RemoteMacAddress
	}
	return ""
}

func (x *AdminServiceGetNetworkWardenByIDRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AdminServiceGetNetworkWardenByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AdminServiceGetNetworkWardenByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *NetworkWarden `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AdminServiceGetNetworkWardenByIDResponse) Reset() {
	*x = AdminServiceGetNetworkWardenByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkwarden_v1_admin_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminServiceGetNetworkWardenByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminServiceGetNetworkWardenByIDResponse) ProtoMessage() {}

func (x *AdminServiceGetNetworkWardenByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkwarden_v1_admin_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminServiceGetNetworkWardenByIDResponse.ProtoReflect.Descriptor instead.
func (*AdminServiceGetNetworkWardenByIDResponse) Descriptor() ([]byte, []int) {
	return file_networkwarden_v1_admin_service_proto_rawDescGZIP(), []int{23}
}

func (x *AdminServiceGetNetworkWardenByIDResponse) GetData() *NetworkWarden {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_networkwarden_v1_admin_service_proto protoreflect.FileDescriptor

var file_networkwarden_v1_admin_service_proto_rawDesc = []byte{
	0x0a, 0x24, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x29, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x01, 0x0a, 0x1d,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0x5b, 0x0a, 0x1e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x79, 0x0a,
	0x24, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x62, 0x0a, 0x25, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x64, 0x0a, 0x1e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x6f,
	0x75, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c,
	0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x3b, 0x0a, 0x1f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0xab, 0x01, 0x0a, 0x26, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65,
	0x77, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x43, 0x0a,
	0x27, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x22, 0xe6, 0x01, 0x0a, 0x2b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x07, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6d,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x79, 0x4d,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x01, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6d, 0x79, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x66, 0x0a, 0x2c, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x80, 0x01, 0x0a, 0x2a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x65, 0x0a, 0x2b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc5, 0x01,
	0x0a, 0x2c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65,
	0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c,
	0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x49, 0x0a, 0x2d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x22, 0xe1, 0x01, 0x0a, 0x26, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d,
	0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1c, 0x0a, 0x07, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6d, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x79, 0x4d, 0x79, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x5f, 0x6d, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5c, 0x0a, 0x27, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x7b, 0x0a, 0x25, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d,
	0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x5b, 0x0a, 0x26, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47,
	0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbb, 0x01, 0x0a,
	0x27, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x44, 0x0a, 0x28, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x22, 0xb9, 0x01, 0x0a, 0x28, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65,
	0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x60, 0x0a, 0x29,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7d,
	0x0a, 0x27, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5f, 0x0a,
	0x28, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xa5,
	0x0d, 0x0a, 0x0c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x6f, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x2f, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x84, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x36, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x6f, 0x75,
	0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x30, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x13,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x38, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x49, 0x44,
	0x12, 0x3c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e,
	0x6f, 0x64, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65,
	0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64,
	0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9c, 0x01,
	0x0a, 0x19, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x49, 0x44,
	0x12, 0x37, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x12,
	0x39, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47,
	0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x42,
	0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xc9, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x42,
	0x11, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x65, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x6f, 0x73, 0x2d, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e,
	0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x4e, 0x58, 0x58, 0xaa, 0x02, 0x10, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x10, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x1c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_networkwarden_v1_admin_service_proto_rawDescOnce sync.Once
	file_networkwarden_v1_admin_service_proto_rawDescData = file_networkwarden_v1_admin_service_proto_rawDesc
)

func file_networkwarden_v1_admin_service_proto_rawDescGZIP() []byte {
	file_networkwarden_v1_admin_service_proto_rawDescOnce.Do(func() {
		file_networkwarden_v1_admin_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_networkwarden_v1_admin_service_proto_rawDescData)
	})
	return file_networkwarden_v1_admin_service_proto_rawDescData
}

var file_networkwarden_v1_admin_service_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_networkwarden_v1_admin_service_proto_goTypes = []any{
	(*AdminServiceLoginAdminRequest)(nil),                 // 0: networkwarden.v1.AdminServiceLoginAdminRequest
	(*AdminServiceLoginAdminResponse)(nil),                // 1: networkwarden.v1.AdminServiceLoginAdminResponse
	(*AdminServiceRefreshAdminTokenRequest)(nil),          // 2: networkwarden.v1.AdminServiceRefreshAdminTokenRequest
	(*AdminServiceRefreshAdminTokenResponse)(nil),         // 3: networkwarden.v1.AdminServiceRefreshAdminTokenResponse
	(*AdminServiceLogoutAdminRequest)(nil),                // 4: networkwarden.v1.AdminServiceLogoutAdminRequest
	(*AdminServiceLogoutAdminResponse)(nil),               // 5: networkwarden.v1.AdminServiceLogoutAdminResponse
	(*AdminServiceChangeAdminPasswordRequest)(nil),        // 6: networkwarden.v1.AdminServiceChangeAdminPasswordRequest
	(*AdminServiceChangeAdminPasswordResponse)(nil),       // 7: networkwarden.v1.AdminServiceChangeAdminPasswordResponse
	(*AdminServiceGetPersonalDataNodesListRequest)(nil),   // 8: networkwarden.v1.AdminServiceGetPersonalDataNodesListRequest
	(*AdminServiceGetPersonalDataNodesListResponse)(nil),  // 9: networkwarden.v1.AdminServiceGetPersonalDataNodesListResponse
	(*AdminServiceGetPersonalDataNodeByIDRequest)(nil),    // 10: networkwarden.v1.AdminServiceGetPersonalDataNodeByIDRequest
	(*AdminServiceGetPersonalDataNodeByIDResponse)(nil),   // 11: networkwarden.v1.AdminServiceGetPersonalDataNodeByIDResponse
	(*AdminServiceSetPersonalDataNodeStatusRequest)(nil),  // 12: networkwarden.v1.AdminServiceSetPersonalDataNodeStatusRequest
	(*AdminServiceSetPersonalDataNodeStatusResponse)(nil), // 13: networkwarden.v1.AdminServiceSetPersonalDataNodeStatusResponse
	(*AdminServiceGetNetworkNodesListRequest)(nil),        // 14: networkwarden.v1.AdminServiceGetNetworkNodesListRequest
	(*AdminServiceGetNetworkNodesListResponse)(nil),       // 15: networkwarden.v1.AdminServiceGetNetworkNodesListResponse
	(*AdminServiceGetNetworkNodeByIDRequest)(nil),         // 16: networkwarden.v1.AdminServiceGetNetworkNodeByIDRequest
	(*AdminServiceGetNetworkNodeByIDResponse)(nil),        // 17: networkwarden.v1.AdminServiceGetNetworkNodeByIDResponse
	(*AdminServiceSetNetworkNodeStatusRequest)(nil),       // 18: networkwarden.v1.AdminServiceSetNetworkNodeStatusRequest
	(*AdminServiceSetNetworkNodeStatusResponse)(nil),      // 19: networkwarden.v1.AdminServiceSetNetworkNodeStatusResponse
	(*AdminServiceGetNetworkWardensListRequest)(nil),      // 20: networkwarden.v1.AdminServiceGetNetworkWardensListRequest
	(*AdminServiceGetNetworkWardensListResponse)(nil),     // 21: networkwarden.v1.AdminServiceGetNetworkWardensListResponse
	(*AdminServiceGetNetworkWardenByIDRequest)(nil),       // 22: networkwarden.v1.AdminServiceGetNetworkWardenByIDRequest
	(*AdminServiceGetNetworkWardenByIDResponse)(nil),      // 23: networkwarden.v1.AdminServiceGetNetworkWardenByIDResponse
	(*v1.Pagination)(nil),                                 // 24: common.v1.Pagination
	(*PersonalDataNode)(nil),                              // 25: networkwarden.v1.PersonalDataNode
	(PersonalDataNode_Status)(0),                          // 26: networkwarden.v1.PersonalDataNode.Status
	(*NetworkNode)(nil),                                   // 27: networkwarden.v1.NetworkNode
	(NetworkNode_Status)(0),                               // 28: networkwarden.v1.NetworkNode.Status
	(*NetworkWarden)(nil),                                 // 29: networkwarden.v1.NetworkWarden
}
var file_networkwarden_v1_admin_service_proto_depIdxs = []int32{
	24, // 0: networkwarden.v1.AdminServiceGetPersonalDataNodesListRequest.pagination:type_name -> common.v1.Pagination
	25, // 1: networkwarden.v1.AdminServiceGetPersonalDataNodesListResponse.data:type_name -> networkwarden.v1.PersonalDataNode
	25, // 2: networkwarden.v1.AdminServiceGetPersonalDataNodeByIDResponse.data:type_name -> networkwarden.v1.PersonalDataNode
	26, // 3: networkwarden.v1.AdminServiceSetPersonalDataNodeStatusRequest.status:type_name -> networkwarden.v1.PersonalDataNode.Status
	24, // 4: networkwarden.v1.AdminServiceGetNetworkNodesListRequest.pagination:type_name -> common.v1.Pagination
	27, // 5: networkwarden.v1.AdminServiceGetNetworkNodesListResponse.data:type_name -> networkwarden.v1.NetworkNode
	27, // 6: networkwarden.v1.AdminServiceGetNetworkNodeByIDResponse.data:type_name -> networkwarden.v1.NetworkNode
	28, // 7: networkwarden.v1.AdminServiceSetNetworkNodeStatusRequest.status:type_name -> networkwarden.v1.NetworkNode.Status
	24, // 8: networkwarden.v1.AdminServiceGetNetworkWardensListRequest.pagination:type_name -> common.v1.Pagination
	29, // 9: networkwarden.v1.AdminServiceGetNetworkWardensListResponse.data:type_name -> networkwarden.v1.NetworkWarden
	29, // 10: networkwarden.v1.AdminServiceGetNetworkWardenByIDResponse.data:type_name -> networkwarden.v1.NetworkWarden
	0,  // 11: networkwarden.v1.AdminService.LoginAdmin:input_type -> networkwarden.v1.AdminServiceLoginAdminRequest
	2,  // 12: networkwarden.v1.AdminService.RefreshAdminToken:input_type -> networkwarden.v1.AdminServiceRefreshAdminTokenRequest
	4,  // 13: networkwarden.v1.AdminService.LogoutAdmin:input_type -> networkwarden.v1.AdminServiceLogoutAdminRequest
	6,  // 14: networkwarden.v1.AdminService.ChangeAdminPassword:input_type -> networkwarden.v1.AdminServiceChangeAdminPasswordRequest
	8,  // 15: networkwarden.v1.AdminService.GetPersonalDataNodesList:input_type -> networkwarden.v1.AdminServiceGetPersonalDataNodesListRequest
	10, // 16: networkwarden.v1.AdminService.GetPersonalDataNodeByID:input_type -> networkwarden.v1.AdminServiceGetPersonalDataNodeByIDRequest
	12, // 17: networkwarden.v1.AdminService.SetPersonalDataNodeStatus:input_type -> networkwarden.v1.AdminServiceSetPersonalDataNodeStatusRequest
	14, // 18: networkwarden.v1.AdminService.GetNetworkNodesList:input_type -> networkwarden.v1.AdminServiceGetNetworkNodesListRequest
	16, // 19: networkwarden.v1.AdminService.GetNetworkNodeByID:input_type -> networkwarden.v1.AdminServiceGetNetworkNodeByIDRequest
	18, // 20: networkwarden.v1.AdminService.SetNetworkNodeStatus:input_type -> networkwarden.v1.AdminServiceSetNetworkNodeStatusRequest
	20, // 21: networkwarden.v1.AdminService.GetNetworkWardensList:input_type -> networkwarden.v1.AdminServiceGetNetworkWardensListRequest
	22, // 22: networkwarden.v1.AdminService.GetNetworkWardenByID:input_type -> networkwarden.v1.AdminServiceGetNetworkWardenByIDRequest
	1,  // 23: networkwarden.v1.AdminService.LoginAdmin:output_type -> networkwarden.v1.AdminServiceLoginAdminResponse
	3,  // 24: networkwarden.v1.AdminService.RefreshAdminToken:output_type -> networkwarden.v1.AdminServiceRefreshAdminTokenResponse
	5,  // 25: networkwarden.v1.AdminService.LogoutAdmin:output_type -> networkwarden.v1.AdminServiceLogoutAdminResponse
	7,  // 26: networkwarden.v1.AdminService.ChangeAdminPassword:output_type -> networkwarden.v1.AdminServiceChangeAdminPasswordResponse
	9,  // 27: networkwarden.v1.AdminService.GetPersonalDataNodesList:output_type -> networkwarden.v1.AdminServiceGetPersonalDataNodesListResponse
	11, // 28: networkwarden.v1.AdminService.GetPersonalDataNodeByID:output_type -> networkwarden.v1.AdminServiceGetPersonalDataNodeByIDResponse
	13, // 29: networkwarden.v1.AdminService.SetPersonalDataNodeStatus:output_type -> networkwarden.v1.AdminServiceSetPersonalDataNodeStatusResponse
	15, // 30: networkwarden.v1.AdminService.GetNetworkNodesList:output_type -> networkwarden.v1.AdminServiceGetNetworkNodesListResponse
	17, // 31: networkwarden.v1.AdminService.GetNetworkNodeByID:output_type -> networkwarden.v1.AdminServiceGetNetworkNodeByIDResponse
	19, // 32: networkwarden.v1.AdminService.SetNetworkNodeStatus:output_type -> networkwarden.v1.AdminServiceSetNetworkNodeStatusResponse
	21, // 33: networkwarden.v1.AdminService.GetNetworkWardensList:output_type -> networkwarden.v1.AdminServiceGetNetworkWardensListResponse
	23, // 34: networkwarden.v1.AdminService.GetNetworkWardenByID:output_type -> networkwarden.v1.AdminServiceGetNetworkWardenByIDResponse
	23, // [23:35] is the sub-list for method output_type
	11, // [11:23] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_networkwarden_v1_admin_service_proto_init() }
func file_networkwarden_v1_admin_service_proto_init() {
	if File_networkwarden_v1_admin_service_proto != nil {
		return
	}
	file_networkwarden_v1_network_node_proto_init()
	file_networkwarden_v1_network_warden_proto_init()
	file_networkwarden_v1_personal_data_node_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_networkwarden_v1_admin_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*AdminServiceLoginAdminRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_admin_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AdminServiceLoginAdminResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_admin_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*AdminServiceRefreshAdminTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_admin_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*AdminServiceRefreshAdminTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_admin_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*AdminServiceLogoutAdminRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_admin_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*AdminServiceLogoutAdminResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_admin_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*AdminServiceChangeAdminPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_admin_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*AdminServiceChangeAdminPasswordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_admin_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*AdminServiceGetPersonalDataNodesListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_admin_service_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*AdminServiceGetPersonalDataNodesListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_admin_service_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*AdminServiceGetPersonalDataNodeByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_admin_service_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*AdminServiceGetPersonalDataNodeByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_admin_service_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*AdminServiceSetPersonalDataNodeStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_admin_service_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*AdminServiceSetPersonalDataNodeStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_admin_service_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*AdminServiceGetNetworkNodesListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_admin_service_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*AdminServiceGetNetworkNodesListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_admin_service_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*AdminServiceGetNetworkNodeByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_admin_service_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*AdminServiceGetNetworkNodeByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_admin_service_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*AdminServiceSetNetworkNodeStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_admin_service_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*AdminServiceSetNetworkNodeStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_admin_service_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*AdminServiceGetNetworkWardensListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_admin_service_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*AdminServiceGetNetworkWardensListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_admin_service_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*AdminServiceGetNetworkWardenByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkwarden_v1_admin_service_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*AdminServiceGetNetworkWardenByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_networkwarden_v1_admin_service_proto_msgTypes[8].OneofWrappers = []any{}
	file_networkwarden_v1_admin_service_proto_msgTypes[14].OneofWrappers = []any{}
	file_networkwarden_v1_admin_service_proto_msgTypes[20].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_networkwarden_v1_admin_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_networkwarden_v1_admin_service_proto_goTypes,
		DependencyIndexes: file_networkwarden_v1_admin_service_proto_depIdxs,
		MessageInfos:      file_networkwarden_v1_admin_service_proto_msgTypes,
	}.Build()
	File_networkwarden_v1_admin_service_proto = out.File
	file_networkwarden_v1_admin_service_proto_rawDesc = nil
	file_networkwarden_v1_admin_service_proto_goTypes = nil
	file_networkwarden_v1_admin_service_proto_depIdxs = nil
}
