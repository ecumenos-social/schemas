syntax = "proto3";

package networkwarden.v1;

option go_package = "github.com/ecumenos-social/schemas/proto/gen/networkwarden/v1";

import "common/v1/geolocation.proto";
import "common/v1/pagination.proto";
import "common/v1/rate_limit.proto";
import "networkwarden/v1/holder.proto";
import "networkwarden/v1/network_node.proto";
import "networkwarden/v1/network_warden.proto";
import "networkwarden/v1/personal_data_node.proto";

message NetworkWardenServiceCheckEmailsRequest {
  repeated string emails = 1;
}

message NetworkWardenServiceCheckEmailsResponse {
  bool valid = 1;
  repeated string results = 2;
}

message NetworkWardenServiceCheckPhoneNumbersRequest {
  repeated string phone_numbers = 1;
}

message NetworkWardenServiceCheckPhoneNumbersResponse {
  bool valid = 1;
  repeated string results = 2;
}

message NetworkWardenServiceRegisterHolderRequest {
  optional string remote_mac_address = 1;
  repeated string emails = 2;
  repeated string phone_numbers = 3;
  optional string avatar_image_url = 4;
  repeated string countries = 5;
  repeated string languages = 6;
  string password = 7;
}

enum NetworkWardenServiceConfirmationApproach {
  NETWORK_WARDEN_SERVICE_CONFIRMATION_APPROACH_UNKNOWN_UNSPECIFIED = 0;
  NETWORK_WARDEN_SERVICE_CONFIRMATION_APPROACH_PHONE_NUMBER = 1;
  NETWORK_WARDEN_SERVICE_CONFIRMATION_APPROACH_EMAIL = 2;
}

message NetworkWardenServiceRegisterHolderResponse {
  string token = 1;
  string refresh_token = 2;
  NetworkWardenServiceConfirmationApproach confirmation_approach = 3;
}

message NetworkWardenServiceConfirmHolderRegistrationRequest {
  optional string remote_mac_address = 1;
  string token = 2;
  string confirmation_code = 3;
}

message NetworkWardenServiceConfirmHolderRegistrationResponse {
  bool success = 1;
}

message NetworkWardenServiceResendConfirmationCodeRequest {
  optional string remote_mac_address = 1;
  string token = 2;
  NetworkWardenServiceConfirmationApproach confirmation_approach = 3;

}

message NetworkWardenServiceResendConfirmationCodeResponse {
  bool success = 1;
}

message NetworkWardenServiceLoginHolderRequest {
  optional string remote_mac_address = 1;
  string email = 2;
  string phone_number = 3;
  string password = 4;
}

message NetworkWardenServiceLoginHolderResponse {
  string token = 1;
  string refresh_token = 2;
}

message NetworkWardenServiceLogoutHolderRequest {
  optional string remote_mac_address = 1;
  string token = 2;
}

message NetworkWardenServiceLogoutHolderResponse {
  bool success = 1;
}

message NetworkWardenServiceRefreshHolderTokenRequest {
  optional string remote_mac_address = 1;
  string refresh_token = 2;
}

message NetworkWardenServiceRefreshHolderTokenResponse {
  string token = 1;
  string refresh_token = 2;
}

message NetworkWardenServiceChangeHolderPasswordRequest {
  optional string remote_mac_address = 1;
  string token = 2;
  string password = 3;
  string new_password = 4;
}

message NetworkWardenServiceChangeHolderPasswordResponse {
  bool success = 1;
}

message NetworkWardenServiceModifyHolderRequest {
  optional string remote_mac_address = 1;
  string token = 2;
  optional string avatar_image_url = 3;
  repeated string countries = 4;
  repeated string languages = 5;
}

message NetworkWardenServiceModifyHolderResponse {
  bool success = 1;
}

message NetworkWardenServiceGetHolderRequest {
  optional string remote_mac_address = 1;
  string token = 2;
  string holder_id = 3;
}

message NetworkWardenServiceGetHolderResponse {
  networkwarden.v1.Holder data = 1;
}

message NetworkWardenServiceDeleteHolderRequest {
  optional string remote_mac_address = 1;
  string token = 2;
  string password = 3;
}

message NetworkWardenServiceDeleteHolderResponse {
  bool success = 1;
}

message NetworkWardenServiceGetPersonalDataNodesListRequest {
  optional string remote_mac_address = 1;
  optional string token = 2;
  optional bool only_my = 3;
  optional common.v1.Pagination pagination = 4;
}

message NetworkWardenServiceGetPersonalDataNodesListResponse {
  repeated networkwarden.v1.PersonalDataNode data = 1;
}

message NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequest {
  string remote_mac_address = 1;
  string token = 2;
  string url = 3;
  string name = 4;
  string label = 5;
  string description = 6;
  common.v1.Geolocation location = 7;
}

message NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponse {
  bool success = 1;
  string id = 2;
}

message NetworkWardenServiceActivatePersonalDataNodeRequest {
  string remote_mac_address = 1;
  string token = 2;
  string id = 3;
}

message NetworkWardenServiceActivatePersonalDataNodeResponse {
  bool success = 1;
  string api_key = 2;
}

message NetworkWardenServiceInitiatePersonalDataNodeRequest {
  string api_key = 1;
  int64 accounts_capacity = 2;
  bool is_open = 3;
  string version = 4;
  common.v1.RateLimit rate_limit = 5;
  common.v1.RateLimit crawl_rate_limit = 6;
  int64 id_gen_node = 7;
}

message NetworkWardenServiceInitiatePersonalDataNodeResponse {
  bool success = 1; 
}

message NetworkWardenServiceGetNetworkNodesListRequest {
  optional string remote_mac_address = 1;
  optional string token = 2;
  optional bool only_my = 3;
  optional common.v1.Pagination pagination = 4;
}

message NetworkWardenServiceGetNetworkNodesListResponse {
  repeated networkwarden.v1.NetworkNode data = 1;
}

message NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequest {
  string remote_mac_address = 1;
  string token = 2;
  string url = 3;
  string name = 4;
  string description = 5;
  common.v1.Geolocation location = 6;
  string domain_name = 7;
}

message NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponse {
  bool success = 1;
  string id = 2;
}

message NetworkWardenServiceActivateNetworkNodeRequest {
  string remote_mac_address = 1;
  string token = 2;
  string id = 3;
}

message NetworkWardenServiceActivateNetworkNodeResponse {
  bool success = 1;
  string api_key = 2;
}

message NetworkWardenServiceInitiateNetworkNodeRequest {
  string api_key = 1;
  int64 accounts_capacity = 2;
  bool is_open = 3;
  string version = 4;
  common.v1.RateLimit rate_limit = 5;
  common.v1.RateLimit crawl_rate_limit = 6;
  int64 id_gen_node = 7;
}

message NetworkWardenServiceInitiateNetworkNodeResponse {
  bool success = 1; 
}

message NetworkWardenServiceGetNetworkWardensListRequest {
  optional string remote_mac_address = 1;
  optional common.v1.Pagination pagination = 2;
}

message NetworkWardenServiceGetNetworkWardensListResponse {
  repeated networkwarden.v1.NetworkWarden data = 1;
}

message NetworkWardenServiceRegisterNetworkWardenRequest {
  string id = 1;
  string name = 5;
  string description = 6;
  string address_suffix = 7;
  uint64 pdn_capacity = 8;
  uint64 nn_capacity = 9;
  string url = 10;
  string version = 13;
  common.v1.RateLimit rate_limit = 14;
}

message NetworkWardenServiceRegisterNetworkWardenResponse {
  bool success = 1;
}

service NetworkWardenService {
  rpc CheckEmails(NetworkWardenServiceCheckEmailsRequest) returns (NetworkWardenServiceCheckEmailsResponse);
  rpc CheckPhoneNumbers(NetworkWardenServiceCheckPhoneNumbersRequest) returns (NetworkWardenServiceCheckPhoneNumbersResponse);
  rpc RegisterHolder(NetworkWardenServiceRegisterHolderRequest) returns (NetworkWardenServiceRegisterHolderResponse);
  rpc ConfirmHolderRegistration(NetworkWardenServiceConfirmHolderRegistrationRequest) returns (NetworkWardenServiceConfirmHolderRegistrationResponse);
  rpc ResendConfirmationCode(NetworkWardenServiceResendConfirmationCodeRequest) returns (NetworkWardenServiceResendConfirmationCodeResponse);
  rpc LoginHolder(NetworkWardenServiceLoginHolderRequest) returns (NetworkWardenServiceLoginHolderResponse);
  rpc LogoutHolder(NetworkWardenServiceLogoutHolderRequest) returns (NetworkWardenServiceLogoutHolderResponse);
  rpc RefreshHolderToken(NetworkWardenServiceRefreshHolderTokenRequest) returns (NetworkWardenServiceRefreshHolderTokenResponse);
  rpc ChangeHolderPassword(NetworkWardenServiceChangeHolderPasswordRequest) returns (NetworkWardenServiceChangeHolderPasswordResponse);
  rpc ModifyHolder(NetworkWardenServiceModifyHolderRequest) returns (NetworkWardenServiceModifyHolderResponse);
  rpc GetHolder(NetworkWardenServiceGetHolderRequest) returns (NetworkWardenServiceGetHolderResponse);
  rpc DeleteHolder(NetworkWardenServiceDeleteHolderRequest) returns (NetworkWardenServiceDeleteHolderResponse);
  rpc GetPersonalDataNodesList(NetworkWardenServiceGetPersonalDataNodesListRequest) returns (NetworkWardenServiceGetPersonalDataNodesListResponse);
  rpc JoinPersonalDataNodeRegistrationWaitlist(NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistRequest) returns (NetworkWardenServiceJoinPersonalDataNodeRegistrationWaitlistResponse);
  rpc ActivatePersonalDataNode(NetworkWardenServiceActivatePersonalDataNodeRequest) returns (NetworkWardenServiceActivatePersonalDataNodeResponse);
  rpc InitiatePersonalDataNode(NetworkWardenServiceInitiatePersonalDataNodeRequest) returns (NetworkWardenServiceInitiatePersonalDataNodeResponse);
  rpc GetNetworkNodesList(NetworkWardenServiceGetNetworkNodesListRequest) returns (NetworkWardenServiceGetNetworkNodesListResponse);
  rpc JoinNetworkNodeRegistrationWaitlist(NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistRequest) returns (NetworkWardenServiceJoinNetworkNodeRegistrationWaitlistResponse);
  rpc ActivateNetworkNode(NetworkWardenServiceActivateNetworkNodeRequest) returns (NetworkWardenServiceActivateNetworkNodeResponse);
  rpc InitiateNetworkNode(NetworkWardenServiceInitiateNetworkNodeRequest) returns (NetworkWardenServiceInitiateNetworkNodeResponse);
  rpc GetNetworkWardensList(NetworkWardenServiceGetNetworkWardensListRequest) returns (NetworkWardenServiceGetNetworkWardensListResponse);
  rpc RegisterNetworkWarden(NetworkWardenServiceRegisterNetworkWardenRequest) returns (NetworkWardenServiceRegisterNetworkWardenResponse);
}
